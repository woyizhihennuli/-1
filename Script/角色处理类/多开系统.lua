-- @Author: baidwwy
-- @Date:   2023-03-10 11:49:54
-- @Last Modified by:   baidwwy
-- @Last Modified time: 2024-01-18 18:53:04

local 多开系统类 = class()

function 多开系统类:初始化(id)
end

function 多开系统类:切换角色(id,内容)
   local 文本 = 内容.文本
   local 选择id = 内容.参数+0
if 玩家数据[id] == nil then return end
if 玩家数据[id].角色.数据.地图数据.编号 == 5136 or 玩家数据[id].角色.数据.地图数据.编号 == 5137 or 玩家数据[id].角色.数据.地图数据.编号 == 5138
  or 玩家数据[id].角色.数据.地图数据.编号 == 5139 then
   发送数据(玩家数据[id].连接id,7,"#Y/本地图无法使用该功能")
    return
end

   if 玩家数据[id].角色.数据.多角色操作 == nil then
      玩家数据[id].角色.数据.多角色操作 = false
    end

    if 玩家数据[id].摊位数据~=nil then
      常规提示(id,"#Y/摆摊状态下禁止此种行为")
      return
    end
  ---

   if 文本=="获取角色信息" then
      self:取角色选择信息(id,155)
   elseif 文本=="创建角色" then
      local 临时文件=table.loadstring(读入文件([[data/]]..玩家数据[id].账号..[[/信息.txt]]))
      if #临时文件>=5 then
         发送数据(玩家数据[id].连接id,7,"#Y/一个账号最多可以建立5个角色!")
         return
      end

    self:创建分角色(id,内容)
   elseif 文本=="切换角色" then
      if 玩家数据[选择id]==nil then
         发送数据(玩家数据[id].连接id,7,"#Y/请先参战再切换角色!")
         return
      end
    if 玩家数据[id].角色.数据.多角色操作 == false then
       发送数据(玩家数据[id].连接id,7,"#Y/你没有多开无法切换角色!")
        return
      end

      if 玩家数据[id].队长==false then
        常规提示(id,"只有队长才可进行此操作")
        return
      end

      if 玩家数据[id].队伍~=玩家数据[选择id].队伍 then
        常规提示(id,"只有一个队伍才可进行此操作")
        return
      end


      if 玩家数据[选择id].子角色操作 ~= nil then
      local 序列 = 0
      local  上线id = {}
             上线id.其他队员 = {}
             上线id.子队员 = {}
         if 玩家数据[id].队长 and 玩家数据[选择id]~=nil then
               for n=1,#队伍数据[id].成员数据 do
                if 玩家数据[队伍数据[id].成员数据[n]].子角色操作~= nil then

                  上线id.子队员[#上线id.子队员+1]=队伍数据[id].成员数据[n]
                else
                   上线id.其他队员[#上线id.其他队员+1] = 队伍数据[id].成员数据[n]
                end
                if 队伍数据[id].成员数据[n] == 选择id then
                  序列 = n
                 end
              end

              删除重复(上线id.子队员)
              删除重复(上线id.其他队员)
              if 序列== 0 then
                  发送数据(玩家数据[id].连接id,7,"#Y/角色未在队伍中无法切换!")
                   return
                else
              玩家数据[id].角色.数据.多角色操作 = false
              队伍处理类:退出队伍(id)
              --系统处理类:断开游戏(选择id)
              self:角色更换处理(id,上线id,选择id)
              end
         end
       else
          发送数据(玩家数据[id].连接id,7,"#Y/该玩家不可以使用角色切换")
          return
       end

   elseif 文本=="角色参战" then
      if 玩家数据[id].队伍 == 0 then
         local 建队信息 = {}
         建队信息.ip = 内容.ip
         建队信息.数字id = id
         建队信息.id = id
         队伍处理类:创建队伍(id,建队信息)
      end
       if 玩家数据[id].队长==false then
        常规提示(id,"只有队长才可进行此操作")
        return
      end

      if 玩家数据[选择id]==nil then
        self:角色进入游戏(id,选择id)
      else
         发送数据(玩家数据[id].连接id,7,"#Y/玩家已经在线无法参战!")
         return
      end

      self:角色加入队伍(id,选择id)


      玩家数据[id].角色.数据.多角色操作 = true

      队伍处理类:索取队伍信息(id,4004)
      发送数据(玩家数据[id].连接id,158)
   elseif 文本=="取多开总数据" then--点头像取数据
      if  玩家数据[选择id]~=nil then
     发送数据(玩家数据[id].连接id,8001.1,玩家数据[选择id].角色:取总数据())
     发送数据(玩家数据[id].连接id,8012,玩家数据[选择id].召唤兽.数据)
     道具刷新(玩家数据[id].连接id,id)
     end
   elseif 文本=="角色退出" then
    if 玩家数据[id].角色.数据.多角色操作 == false then
       发送数据(玩家数据[id].连接id,7,"#Y/你没有多开无法退出角色!")
        return
      end
      if 玩家数据[选择id]==nil or 选择id ==id then
         发送数据(玩家数据[id].连接id,7,"#Y/玩家不在线不用重复退出!")
         return
      end
      if 玩家数据[选择id].子角色操作 ~= nil then
          系统处理类:断开游戏(选择id)
      else
          发送数据(玩家数据[id].连接id,7,"#Y/该玩家不可以使用角色退出")
          return
      end
      玩家数据[id].角色.数据.多角色操作 = false
      local 临时文件=table.loadstring(读入文件([[data/]]..玩家数据[id].账号..[[/信息.txt]]))
      for n=1,#临时文件 do
         local 临时id = 临时文件[n] + 0
         if 临时id ~= id then
            if 玩家数据[临时id]~= nil then
               if 玩家数据[临时id].子角色操作~= nil then
                玩家数据[id].角色.数据.多角色操作 = true
              end
            end
         end
      end
      临时文件 = nil
      if 玩家数据[id].角色.数据.多角色操作 ==false then
        发送数据(玩家数据[id].连接id,7,"#Y/所有角色已退出")
        发送数据(玩家数据[id].连接id,159)
      end
  elseif 文本 == "角色操作"  or 文本 == "学习生活技能" or  文本 == "学习强化技能" or 文本 == "学习门派技能" or  文本 == "打开奇经八脉"
     or  文本 == "兑换乾元丹" or  文本 == "重置奇经八脉" or  文本 == "学习奇经八脉" or   文本 == "打开称谓栏" or  文本 == "更换称谓"
     or  文本 == "删除称谓" or 文本 == "添加属性点" or  文本 == "角色升级" or  文本 == "设置修炼" or  文本 == "打开背包" or 文本 == "格子互换1"
     or  文本 == "格子互换" or  文本 == "索要行囊" or 文本 == "索要法宝"  or 文本 == "整理背包"  or 文本 == "修炼法宝" or 文本 == "索要锦衣"
     or  文本 == "卸下装备" or  文本 == "佩戴装备" or 文本 == "卸下法宝" or 文本 == "佩戴法宝" or 文本 == "佩戴宝宝装备"  or  文本 == "卸下宝宝装备"
     or  文本 == "乘骑坐骑" or  文本 == "乘骑坐骑1" or 文本 == "坐骑改名处理" or 文本 == "坐骑驯养处理" or 文本 == "合成宝石" or 文本 == "提取物品"
     or  文本 == "提取金钱" or 文本 == "打开物品仓库" or 文本 == "仓库存放事件" or 文本 == "仓库取出事件" or 文本 == "仓库换页" or 文本 == "获取仓库道具"
     or  文本 == "整理仓库" or 文本 == "购买物品仓库" or 文本 == "回收物品" or 文本 == "卸下召唤兽饰品"  or 文本 == "召唤兽参战处理" or 文本 == "召唤兽改名处理"
     or 文本 == "召唤兽放生处理" or 文本 == "召唤兽获取数据" or 文本 == "召唤兽加点处理" or 文本 == "打开召唤兽仓库"  or 文本 == "召唤兽仓库存入事件"
     or 文本 == "召唤兽仓库取出事件" or 文本 == "加载召唤兽仓库事件" or 文本 == "召唤兽仓库购买事件" or 文本 == "获取烹饪" or 文本 == "获取炼药" or 文本 == "清空道具"

     or 文本 == "召唤兽栏打开"
    then
     if 玩家数据[id].角色.数据.多角色操作 == false then
        发送数据(玩家数据[id].连接id,7,"#Y/你没有多开无法操作!")
        return
      end
    if 玩家数据[选择id]==nil or 选择id ==id then
         发送数据(玩家数据[id].连接id,7,"#Y/角色不在线无法操作!")
         return
      end
      if 玩家数据[选择id].子角色操作 == nil then
        发送数据(玩家数据[id].连接id,7,"#Y/该玩家不可以使用该功能")
        return
      end

      local 连接id = 玩家数据[id].连接id
      --do
   if 文本 == "角色操作" then
      发送数据(玩家数据[id].连接id,8001,玩家数据[选择id].角色:取总数据())
      发送数据(连接id,8012,玩家数据[选择id].召唤兽.数据)
      --发送数据(连接id,6013,玩家数据[选择id].坐骑类.坐骑列表)
     -- 玩家数据[选择id].道具:索要道具(连接id,选择id,id)
     道具刷新(选择id,id)
    elseif 文本 == "学习生活技能" then
      玩家数据[选择id].角色:学习生活技能(连接id,选择id,内容.序列,id)
    elseif 文本 == "学习强化技能" then
      玩家数据[选择id].角色:学习强化技能(连接id,选择id,内容.序列,id)
    elseif 文本 == "学习门派技能" then
      玩家数据[选择id].角色:学习门派技能(连接id,选择id,内容.序列,id)
      -------------------------------------------------------------------------------------------
    elseif 文本 == "打开奇经八脉" then
    发送数据(玩家数据[id].连接id,8007,玩家数据[选择id].角色.数据)
   elseif 文本 == "兑换乾元丹" then

    local 银子=1000000*(玩家数据[选择id].角色.数据.乾元丹.兑换+1)
      local 经验=5000000*(玩家数据[选择id].角色.数据.乾元丹.兑换+1)
      local 可换数量=取可兑换乾元丹(玩家数据[选择id].角色.数据.等级)
      if 可换数量==0 then
        常规提示(id,"#Y等级必须达到60级才可兑换乾元丹")
        return
      elseif 可换数量<=玩家数据[选择id].角色.数据.装备属性.可换乾元丹 then
        常规提示(id,"#Y当前可兑换乾元丹的数量已达上限")
        return
      end
      if 玩家数据[选择id].角色.数据.当前经验<经验 then
        常规提示(id,"#Y没有那么多的经验")
        return
      elseif
        玩家数据[选择id].角色.数据.银子<银子 then
        常规提示(id,"#Y没有那么多的银子")
        return
      end
      玩家数据[选择id].角色:扣除银子(银子,0,0,"兑换乾元丹",1)
      玩家数据[选择id].角色.数据.当前经验=玩家数据[选择id].角色.数据.当前经验-经验
      玩家数据[选择id].角色.数据.乾元丹.兑换=玩家数据[选择id].角色.数据.装备属性.附加乾元丹+1
      玩家数据[选择id].角色.数据.乾元丹.当前=玩家数据[选择id].角色.数据.装备属性.剩余乾元丹+1
      常规提示(id,"#Y兑换乾元丹成功")
      玩家数据[选择id].角色:刷新信息()
      发送数据(玩家数据[id].连接id,1538,{内容="消耗了"..经验.."点经验、"..银子.."两银子"})
      发送数据(玩家数据[id].连接id,8007,玩家数据[选择id].角色.数据)






    elseif 文本 == "重置奇经八脉" then
      local 数量=系统处理类:取经脉数量(选择id)
      local 银子=数量*500000
      local 经验=数量*2000000
      if 玩家数据[选择id].角色.数据.当前经验<经验 then
        常规提示(id,"#Y没有那么多的经验")
        return
      elseif
        玩家数据[选择id].角色.数据.银子<银子 then
        常规提示(id,"#Y没有那么多的银子")
        return
      end
      玩家数据[选择id].角色:扣除银子(银子,0,0,"清洗经脉",1)
      玩家数据[选择id].角色.数据.当前经验=玩家数据[选择id].角色.数据.当前经验-经验
      玩家数据[选择id].角色.数据.乾元丹.当前=玩家数据[选择id].角色.数据.装备属性.附加乾元丹+数量
      玩家数据[选择id].角色.数据.乾元丹.当前=玩家数据[选择id].角色.数据.装备属性.剩余乾元丹+数量
      玩家数据[选择id].角色.数据.乾元丹.已用=玩家数据[选择id].角色.数据.装备属性.可换乾元丹-数量
      if 玩家数据[选择id].角色.数据.装备属性.可换乾元丹<0 then 玩家数据[选择id].角色.数据.装备属性.可换乾元丹=0 end
      常规提示(id,"#Y重置经脉成功，本次重置后总共获得了#R"..数量.."#Y个乾元丹，请重新打开奇经八脉界面")
      发送数据(玩家数据[id].连接id,1538,{内容="消耗了"..经验.."点经验、"..银子.."两银子"})
      发送数据(玩家数据[id].连接id,8007,玩家数据[选择id].角色.数据)
      for n, v in pairs(玩家数据[选择id].角色.数据.奇经八脉) do
        玩家数据[选择id].角色.数据.奇经八脉[n]=0
      end
    elseif 文本 == "学习奇经八脉" then
      系统处理类:学习经脉(选择id,内容.序列,id)
    elseif 文本 == "打开称谓栏" then
     发送数据(玩家数据[id].连接id,8008,玩家数据[选择id].角色.数据.称谓数据)


    elseif 文本 == "更换称谓" then
      local 序列=内容.序列
      local 地图=玩家数据[选择id].角色.数据.地图数据.编号
      if 玩家数据[选择id].角色.数据.称谓数据[序列]==nil then
        常规提示(id,"#Y/你没有这样的称谓")
        return
      elseif 地图==5136 or 地图==5137 or 地图==5138 or 地图==5139 then
        常规提示(id,"#Y/该场景不允许修改称谓")
        return
      elseif 玩家数据[选择id].角色.数据.称谓数据[序列].名称==玩家数据[选择id].角色.数据.称谓数据[序列].当前 then
        玩家数据[选择id].角色.数据.称谓数据.当前=nil
        发送数据(玩家数据[id].连接id,8009,玩家数据[选择id].角色.数据.称谓数据)
        地图处理类:更换称谓(选择id,玩家数据[选择id].角色.数据.地图数据.编号,玩家数据[选择id].角色.数据.称谓数据.当前)
        常规提示(id,"#Y/更换称谓成功！")
        return
      else
        玩家数据[选择id].角色.数据.称谓数据.当前=玩家数据[选择id].角色.数据.称谓数据[序列].名称
        发送数据(玩家数据[id].连接id,8009,玩家数据[选择id].角色.数据.称谓数据)
        地图处理类:更换称谓(选择id,玩家数据[选择id].角色.数据.地图数据.编号,玩家数据[选择id].角色.数据.称谓数据.当前)
        常规提示(id,"#Y/更换称谓成功！")
        return
      end

    elseif 文本 == "删除称谓" then
      local 序列=内容.序列
       local jj=玩家数据[选择id].角色.数据.称谓数据[序列]
      if jj.名称== 玩家数据[选择id].角色.数据.称谓数据.当前 then
          玩家数据[选择id].角色.数据.称谓数据.当前="无称谓"
      end
      table.remove(玩家数据[选择id].角色.数据.称谓数据, 序列)
      常规提示(id,"#Y/删除称谓成功！")
----------------------------------------------------------------------------------------------------------
   elseif 文本 == "添加属性点" then
    玩家数据[选择id].角色:添加属性点(内容.序列,选择id,id)
    发送数据(连接id,8005,玩家数据[选择id].角色:取总数据())

  elseif 文本 == "角色升级" then
    玩家数据[选择id].角色:升级处理(连接id,nil,id)
    发送数据(连接id,8005,玩家数据[选择id].角色:取总数据())


   elseif 文本 == "设置修炼" then
    if 内容.人物~=nil then
      玩家数据[选择id].角色.数据.修炼.当前=内容.人物
    end
    if 内容.bb~=nil then
      玩家数据[选择id].角色.数据.bb修炼.当前=内容.bb
    end
    常规提示(id,"#Y/更换修炼类型成功！")
    发送数据(玩家数据[id].连接id,8010,{人物=玩家数据[选择id].角色.数据.修炼,bb=玩家数据[选择id].角色.数据.bb修炼})

    ------------------------------------------------------------------
   elseif 文本 == "打开背包" then
      玩家数据[选择id].道具:多开索要道具(连接id,选择id,id)
    elseif 文本 == "索要行囊" then
      玩家数据[选择id].道具:索要行囊(连接id,选择id,id)
    elseif 文本 == "索要法宝" then
      玩家数据[选择id].道具:索要法宝(连接id,选择id,id)
    elseif 文本 == "格子互换1" then
     玩家数据[选择id].道具:道具格子互换1(连接id,选择id,内容,id)
    elseif 文本 == "格子互换" then  --3701
      玩家数据[选择id].道具:多开道具格子互换(连接id,选择id,内容,id)
    elseif 文本 == "整理背包" then
     玩家数据[选择id].道具:整理背包(选择id,内容.类型,id)
    elseif 文本 == "修炼法宝" then
      玩家数据[选择id].道具:修炼法宝(连接id,选择id,内容.序列,id)
    elseif 文本 == "索要锦衣" then
      玩家数据[选择id].道具:索要锦衣(连接id,选择id,id)
    elseif 文本 == "卸下装备" then  --3704
      玩家数据[选择id].道具:卸下装备(连接id,选择id,内容,id)
    elseif 文本 == "佩戴装备" then  --3703
      玩家数据[选择id].道具:佩戴装备(连接id,选择id,内容,id)
    elseif 文本 == "卸下法宝" then  --3734
      玩家数据[选择id].道具:卸下法宝(连接id,选择id,内容.序列,id)
    elseif 文本 == "佩戴法宝" then
      玩家数据[选择id].道具:佩戴法宝(连接id,选择id,内容.类型,内容.编号+0,id)
    elseif 文本 == "佩戴宝宝装备" then
      玩家数据[选择id].道具:佩戴bb装备(连接id,选择id,内容,id)
    elseif 文本 == "卸下宝宝装备" then
      玩家数据[选择id].道具:卸下bb装备(连接id,选择id,内容,id)

    elseif 文本 == "乘骑坐骑"  then
    local 序列=内容.序列
    if 玩家数据[选择id].角色.数据.坐骑列表[序列]==nil then
      常规提示(id,"#Y/没有这样的坐骑")
      return
    else
      玩家数据[选择id].角色.数据.坐骑=table.loadstring(table.tostring(玩家数据[选择id].角色.数据.坐骑列表[序列]))
      常规提示(id,"#Y/骑乘坐骑成功！")
      -- 常规提示(id,"#Y/角色移动速度增加了！")
      -- 常规提示(id,"#Y/属性额外增加了1%")
      玩家数据[选择id].角色:刷新信息(是否,体质,魔力)
      发送数据(连接id,8013,玩家数据[选择id].角色.数据.坐骑列表)
      地图处理类:更新坐骑(选择id,玩家数据[选择id].角色.数据.坐骑)
    end
  elseif  文本 == "乘骑坐骑1"  then
     -- 常规提示(id,"#Y/角色移动速度下降了！")
     -- 常规提示(id,"#Y/属性减少了1%")
    常规提示(id,"#Y/下乘坐骑成功！")
    玩家数据[选择id].角色.数据.坐骑=nil
    玩家数据[选择id].角色:刷新信息(是否,体质,魔力)
    发送数据(连接id,8013,玩家数据[选择id].角色.数据.坐骑列表)
    地图处理类:更新坐骑(选择id,玩家数据[选择id].角色.数据.坐骑)
    --[[local id=选择id
    玩家数据[id].角色.数据.坐骑=nil
    常规提示(id,"#Y下乘坐骑成功！")
    玩家数据[id].角色:刷新信息(是否,体质,魔力)
    发送数据(玩家数据[id].连接id,60,玩家数据[id].角色.数据.坐骑)
    地图处理类:更新坐骑(id,玩家数据[id].角色.数据.坐骑)--]]

  elseif 文本 == "坐骑改名处理" then
    玩家数据[选择id].坐骑类:改名处理(连接id,选择id,内容,id)
  elseif 文本 == "坐骑驯养处理" then
    玩家数据[选择id].坐骑类:驯养处理(连接id,选择id,内容,id)
  elseif 文本 == "合成宝石" then
    local 编号 = 内容.编号+0
    local 道具id = 玩家数据[选择id].角色.数据[内容.类型][编号]
    if 玩家数据[选择id].道具.数据[道具id]==nil then return end
    local 名称 = 玩家数据[选择id].道具.数据[道具id].名称
     if 名称=="星辉石" or 名称=="红玛瑙" or 名称=="太阳石" or 名称=="月亮石" or 名称=="舍利子" or 名称=="黑宝石" or 名称=="光芒石" or 名称=="神秘石"  then
       玩家数据[选择id].道具:自动合成宝石(选择id,名称,道具id,内容.类型,编号,id)
      end
   elseif 文本 == "提取物品" then
    local 编号 = 内容.编号+0
    local 道具id = 玩家数据[选择id].角色.数据[内容.类型][编号]
    if 玩家数据[选择id].道具.数据[道具id] == nil then return end
    local 名称 = 玩家数据[选择id].道具.数据[道具id].名称
    local 道具格子=玩家数据[id].角色:取道具格子()

    if 道具格子==0 then
      常规提示(id,"您的道具栏物品已经满啦")
      return
    end
    if 玩家数据[选择id].道具.数据[道具id].专用~=nil or 玩家数据[选择id].道具.数据[道具id].不可交易 then
      常规提示(id,"该道具为不可交易无法提取")
      return
    end


     local 道具编号=玩家数据[id].道具:取新编号()
      玩家数据[选择id].道具.数据[道具id].识别码 =id.."_"..os.time().."_"..取随机数(20,10000).."_"..取随机数(111111111111,999999999999)
      玩家数据[id].道具.数据[道具编号]=table.loadstring(table.tostring(玩家数据[选择id].道具.数据[道具id]))--复制物品(对方id.物品[数据.道具])
      玩家数据[id].道具.数据[道具编号].数量=玩家数据[选择id].道具.数据[道具id].数量
      玩家数据[id].角色.道具[道具格子]=道具编号
      玩家数据[选择id].道具.数据[道具id] = nil
      玩家数据[选择id].角色.数据[内容.类型][编号] = nil
      常规提示(id,"道具提取成功")
      道具刷新(id)
      道具刷新(选择id,id)
   elseif 文本 == "提取金钱" then
    玩家数据[id].角色.数据.银子 = 玩家数据[id].角色.数据.银子 + 玩家数据[选择id].角色.数据.银子
    玩家数据[选择id].角色.数据.银子 = 0
    常规提示(id,"金钱提取成功")
    道具刷新(id)
    道具刷新(选择id,id)
  elseif 文本 == "打开物品仓库" then
    发送数据(连接id,8025,玩家数据[选择id].道具:索要道具3(选择id,"道具"))
    发送数据(连接id,8026,{道具=玩家数据[选择id].道具:索要仓库道具(选择id,1),总数=#玩家数据[选择id].角色.数据.道具仓库})
   elseif 文本 == "仓库存放事件" then
     玩家数据[选择id].道具:仓库存放事件(连接id,选择id,内容,id)
    elseif 文本 == "仓库取出事件" then
      玩家数据[选择id].道具:仓库取走事件(连接id,选择id,内容,id)

   elseif 文本 == "仓库换页" then

    if 内容.序列>#玩家数据[选择id].角色.数据.道具仓库 then
      常规提示(id,"#Y/这已经是最后一页了2")
      return
    elseif 内容.序列<1 then
      return
    end
    发送数据(连接id,8027,{道具=玩家数据[选择id].道具:索要仓库道具(选择id,内容.序列),页数=内容.序列})

   elseif 文本 == "获取仓库道具" then
    发送数据(连接id,8025,玩家数据[选择id].道具:索要道具3(选择id,内容.仓库类型))
    发送数据(连接id,8026)
   elseif 文本 == "整理仓库" then
      玩家数据[选择id].道具:整理背包(选择id,内容.仓库类型,id)
      玩家数据[选择id].道具:整理仓库(选择id,id)
      发送数据(连接id,8025,玩家数据[选择id].道具:索要道具3(选择id,内容.仓库类型))
      发送数据(连接id,8026)
    elseif 文本 == "购买物品仓库" then
       if #玩家数据[选择id].角色.数据.道具仓库>= 20 then
        常规提示(id,"仓库已达到上限，无法继续购买")
        return
      end
      if 玩家数据[id].角色.数据.银子<3000000 then
        常规提示(id,"你的银子不够300万无法购买")
        return
      end
        玩家数据[id].角色.数据.银子 = 玩家数据[id].角色.数据.银子 - 3000000
        玩家数据[选择id].角色.数据.道具仓库[#玩家数据[选择id].角色.数据.道具仓库+1]={}
        常规提示(id,"购买仓库成功，请重新打开物品仓库界面！")
        道具刷新(id)

     elseif 文本 == "回收物品" then
      --self:自动回收处理(id,选择id,内容)
     elseif 文本 == "卸下召唤兽饰品" then
        local 认证码=内容.序列
        local 编号=玩家数据[选择id].召唤兽:取编号(认证码)
        if 玩家数据[选择id].召唤兽.数据[编号]==nil then
          常规提示(id,"没有这样的召唤兽")
          return
        elseif 玩家数据[选择id].召唤兽.数据[编号].饰品==nil then
          常规提示(id,"没有这样的饰品")
          return
        else
          玩家数据[选择id].道具:给予道具(选择id,玩家数据[选择id].召唤兽.数据[编号].饰品)
          常规提示(id,"获得了"..玩家数据[选择id].召唤兽.数据[编号].饰品)
          玩家数据[选择id].召唤兽.数据[编号]:刷新信息()
          玩家数据[选择id].召唤兽.数据[编号].饰品=nil
        end
     elseif 文本 == "召唤兽栏打开" then
          --发送数据(连接id,6012,玩家数据[选择id].召唤兽.数据)
          发送数据(连接id,17.9,玩家数据[选择id].召唤兽.数据)
     elseif 文本 == "召唤兽参战处理" then
        玩家数据[选择id].召唤兽:参战处理(连接id,5002,选择id,内容.序列,id)
     elseif 文本 == "召唤兽改名处理" then
      玩家数据[选择id].召唤兽:改名处理(连接id,5003,选择id,内容.序列,内容.名称,id)
     elseif 文本 == "召唤兽放生处理" then
      玩家数据[选择id].召唤兽:放生处理(连接id,5005,选择id,内容,id)
     elseif 文本 == "召唤兽获取数据" then
      发送数据(连接id,6012,玩家数据[选择id].召唤兽.数据)
     elseif 文本 == "召唤兽加点处理" then
      local 点数 = 内容.序列
      玩家数据[选择id].召唤兽:加点处理(连接id,5004,选择id,点数,id)
    elseif 文本 == "打开召唤兽仓库" then
      local 临时读入数据 = {}
      if f函数.文件是否存在([[data\]]..玩家数据[选择id].账号..[[\]]..选择id..[[\召唤兽仓库.txt]])==false then
       临时读入数据={[1]={}}
        写出文件([[data\]]..玩家数据[选择id].账号..[[\]]..选择id..[[\召唤兽仓库.txt]],table.tostring(临时读入数据))
      else
        临时读入数据= table.loadstring(读入文件([[data\]]..玩家数据[选择id].账号..[[\]]..选择id..[[\召唤兽仓库.txt]]))
      end
      发送数据(连接id,8012,玩家数据[选择id].召唤兽.数据)
      发送数据(连接id,8033,{宠物=临时读入数据[1],页数=1,最大页数=#临时读入数据})
      临时读入数据 = nil

    elseif 文本 == "召唤兽仓库存入事件" then
    玩家数据[选择id].召唤兽:召唤兽仓库存入事件(连接id,5012,选择id,内容,id)
    elseif 文本 == "召唤兽仓库取出事件" then
    玩家数据[选择id].召唤兽:召唤兽仓库取出事件(连接id,5013,选择id,内容,id)
    elseif 文本 == "加载召唤兽仓库事件" then
    玩家数据[选择id].召唤兽:加载召唤兽仓库事件(连接id,5014,选择id,内容,id)
    elseif 文本 == "召唤兽仓库购买事件" then
     local 临时读入数据= table.loadstring(读入文件([[data\]]..玩家数据[选择id].账号..[[\]]..选择id..[[\召唤兽仓库.txt]]))
     if #临时读入数据>= 5 then
        常规提示(id,"仓库数量达到最大，无法继续购买")
        return
      end
      if 玩家数据[id].角色.数据.银子<10000000 then
         常规提示(id,"你的银子不够,购买仓库需要1000万银子")
        return
      end
     临时读入数据[#临时读入数据+1] = {}
     写出文件([[data\]]..玩家数据[选择id].账号..[[\]]..选择id..[[\召唤兽仓库.txt]],table.tostring(临时读入数据))
     玩家数据[id].角色.数据.银子 = 玩家数据[id].角色.数据.银子 -10000000
     常规提示(id,"你花费了1000万银子购买了一个召唤兽仓库,现召唤兽仓库:#R/"..#临时读入数据.."#Y/个")
     发送数据(连接id,8012,玩家数据[选择id].召唤兽.数据)
     发送数据(连接id,8033,{宠物=临时读入数据[内容.页数+0],页数=内容.页数+0,最大页数 = #临时读入数据})
     临时读入数据 = nil
   elseif 文本 == "获取烹饪" then
    玩家数据[选择id].道具:烹饪处理(连接id,选择id,内容,id)
    elseif 文本 == "获取炼药" then
    玩家数据[选择id].道具:炼药处理(连接id,选择id,内容,id)
    elseif 文本 == "清空道具" then
    玩家数据[选择id].道具:清空包裹(连接id,选择id,id)

    end

    self:取角色选择信息(id,156)

   elseif 文本 == "一键退出" then
     if 玩家数据[id].角色.数据.多角色操作 == false then
        发送数据(玩家数据[id].连接id,7,"#Y/你没有多开无法一键退出!")
        return
      end

      local 临时文件=table.loadstring(读入文件([[data/]]..玩家数据[id].账号..[[/信息.txt]]))
      for n=1,#临时文件 do
         local 临时id = 临时文件[n] + 0
         if 临时id ~= id then
            if 玩家数据[临时id]~= nil then
               if 玩家数据[临时id].子角色操作~= nil then
                 系统处理类:断开游戏(临时id)
              end
            end
         end
      end
      临时文件 = nil
      玩家数据[id].角色.数据.多角色操作 = false
      发送数据(玩家数据[id].连接id,7,"#Y/所有角色已退出")
      发送数据(玩家数据[id].连接id,159)


   end

end


function 多开系统类:取角色选择信息(id,序号)--角色登陆读取数据
  local 临时文件=table.loadstring(读入文件([[data/]]..玩家数据[id].账号..[[/信息.txt]]))
  local 临时发送数据={}
  for n=1,#临时文件 do
    local 读取文件=table.loadstring(读入文件([[data/]]..玩家数据[id].账号..[[/]]..临时文件[n]..[[/角色.txt]]))
   临时发送数据[n]={名称=读取文件.名称,等级=读取文件.等级,模型=读取文件.模型,id=读取文件.数字id}
  end
  发送数据(玩家数据[id].连接id,序号,临时发送数据)
  临时文件=nil



end


function 多开系统类:创建分角色(id,内容)
   local 临时名称=table.loadstring(读入文件([[tysj/名称数据.txt]]))
   for n=1,#临时名称 do
      if 临时名称[n].名称==内容.名称 then
        发送数据(玩家数据[id].连接id,7,"#Y/这个名称已经被他人占用了，请重新再想个吧")
        return 0
      end
    end

      local 临时角色=角色处理类.创建()
      服务端参数.角色id=服务端参数.角色id+1
      f函数.写配置(程序目录.."配置文件.ini","主要配置","id",服务端参数.角色id)
      临时角色:创建角色(服务端参数.角色id,玩家数据[id].账号,内容.模型,内容.名称,内容.ip,0)
      临时角色=nil
      发送数据(玩家数据[id].连接id,157)
      发送数据(玩家数据[id].连接id,7,"#Y/角色创建成功")

end




function 多开系统类:角色加入队伍(id,对方id)

 local 队伍id= 玩家数据[id].队伍
  local 角色xy={x=x,y=y}
  local 对方xy={x=0,y=0}
  对方xy.x,对方xy.y=玩家数据[对方id].角色.数据.地图数据.x,玩家数据[对方id].角色.数据.地图数据.y
  角色xy.x,角色xy.y=玩家数据[id].角色.数据.地图数据.x,玩家数据[id].角色.数据.地图数据.y
  if 取两点距离(对方xy,角色xy)>=1000 then
    常规提示(id,"对方离你太远了~")
    return
  elseif #队伍数据[队伍id].成员数据>=5 then
    常规提示(id,"队伍人数已满！")
    return
  elseif 玩家数据[对方id].队伍~=0 then
    常规提示(id,"对方已加入其他队伍")
    return
  end

  队伍数据[队伍id].成员数据[#队伍数据[队伍id].成员数据+1]=对方id
  玩家数据[对方id].队伍=队伍id
  玩家数据[对方id].队长=false
  广播队伍消息(队伍id,取名称(对方id).."加入了队伍")
  for n=1,#队伍数据[队伍id].成员数据 do
   队伍处理类:索取队伍信息(队伍数据[队伍id].成员数据[n],4004)
  end

end


function 多开系统类:角色进入游戏(id,数字id,是否切换)
  数字id=数字id+0
  local 临时角色连接id = 玩家数据[id].连接id+0
  local 临时角色账号 = 玩家数据[id].账号
  local 临时角色ip = 玩家数据[id].ip
  local  临时角色硬盘  = 玩家数据[id].硬盘
   if 账号记录 == nil then
          return
        end
        账号记录[临时角色账号..数字id]=数字id
        玩家数据[数字id]={}
        玩家数据[数字id].角色=角色处理类:创建()
        玩家数据[数字id].道具=道具处理类:创建()
        玩家数据[数字id].装备=装备处理类:创建(nil,数字id)
        玩家数据[数字id].召唤兽=召唤兽处理类:创建(nil,数字id)
        玩家数据[数字id].助战=助战处理类:创建(数字id)
        玩家数据[数字id].角色:加载数据(临时角色账号,数字id)
        玩家数据[数字id].道具:加载数据(临时角色账号,数字id)
        玩家数据[数字id].召唤兽:加载数据(临时角色账号,数字id)
        玩家数据[数字id].召唤兽仓库 = 召唤兽仓库类:创建()
        玩家数据[数字id].召唤兽仓库:加载数据(临时角色账号,数字id)
        玩家数据[数字id].助战:加载数据(临时角色账号,数字id)
        玩家数据[数字id].连接id=nil
        玩家数据[数字id].账号=临时角色账号
        玩家数据[数字id].队伍=0
        玩家数据[数字id].当前频道=os.time()
        玩家数据[数字id].世界频道=os.time()
        玩家数据[数字id].传闻频道=os.time()
        玩家数据[数字id].遇怪时间=os.time()+取随机数(10,20)
        玩家数据[数字id].战斗=0
        玩家数据[数字id].ip=临时角色ip
        玩家数据[数字id].yp=临时角色硬盘
        玩家数据[数字id].商品列表=0
        玩家数据[数字id].移动数据={}
        玩家数据[数字id].最后事件=""
        玩家数据[数字id].道具操作={}
        玩家数据[数字id].角色.多角色操作 = false
        玩家数据[数字id].子角色操作 =true
        玩家数据[数字id].保存时间=os.time()+math.random(0,60)
        f函数.写配置(程序目录..[[data\]]..临时角色账号..[[\账号信息.txt]],"账号配置","创建ip",临时角色ip)
        local x = tonumber(string.sub(玩家数据[数字id].角色.数据.地图数据.编号,2,6))
          for i=1,#房屋数据 do
            if 房屋数据[i].ID == x then
              发送数据(id,111,房屋数据[i])
            end
          end


        if 玩家数据[数字id].角色.数据.藏宝阁出售 ~= nil then
          常规提示(数字id,"#Y该角色已经被上架藏宝阁,无法进入游戏,可以使用任意角色在XX处使用ID和取回密码取回账号")
          return
        end

         if 银子数据[数字id]==nil then
          银子数据[数字id]={id=数字id,名称=玩家数据[数字id].角色.数据.名称,银子=玩家数据[数字id].角色.数据.银子+玩家数据[数字id].角色.数据.存银,门派=玩家数据[数字id].角色.数据.门派,等级=玩家数据[数字id].角色.数据.等级}
        end
        if 活跃数据[数字id]==nil or 活跃数据==nil then
          活跃数据[数字id]={活跃度=0,领取100活跃=false,领取200活跃=false,领取300活跃=false,领取400活跃=false,领取500活跃=false}
        end
      --发送角色数据
      if 玩家数据[数字id].角色.数据.帮派 ~= "无帮派" and (玩家数据[数字id].角色.数据.帮派数据 == nil or 帮派数据[玩家数据[数字id].角色.数据.帮派数据.编号] == nil or 帮派数据[玩家数据[数字id].角色.数据.帮派数据.编号].成员数据[数字id] == nil) then
        玩家数据[数字id].角色.数据.帮派 = "无帮派"
        玩家数据[数字id].角色.数据.帮派数据 = nil
        发送数据(数字id,7,"#R你已经被逐出了帮派")
      elseif 玩家数据[数字id].角色.数据.帮派 ~= "无帮派" and 玩家数据[数字id].角色.数据.帮派数据 ~= nil and 帮派数据[玩家数据[数字id].角色.数据.帮派数据.编号] ~= nil and 帮派数据[玩家数据[数字id].角色.数据.帮派数据.编号].成员数据[数字id] ~= nil then
        帮派数据[玩家数据[数字id].角色.数据.帮派数据.编号].成员数据[数字id].在线 = true
      end
      for i,v in pairs(玩家数据[数字id].角色.数据.装备) do
        if v ~= nil and 玩家数据[数字id].道具.数据[v] ~= nil and 玩家数据[数字id].道具.数据[v].临时附魔 ~= nil then
          玩家数据[数字id].角色:附魔装备刷新(数字id,v)
        end
      end
    玩家数据[数字id].角色.数据.地图数据.编号=玩家数据[id].角色.数据.地图数据.编号
    玩家数据[数字id].角色.数据.地图数据.x=玩家数据[id].角色.数据.地图数据.x+取随机数(10,50)
    玩家数据[数字id].角色.数据.地图数据.y=玩家数据[id].角色.数据.地图数据.y+取随机数(10,50)

    玩家数据[数字id].角色.数据.飞行 =false

    玩家数据[数字id].角色:刷新任务跟踪()

    地图处理类:加入玩家(数字id,玩家数据[数字id].角色.数据.地图数据.编号,玩家数据[数字id].角色.数据.地图数据.x,玩家数据[数字id].角色.数据.地图数据.y)

    --[[if 是否切换 == nil then
      系统处理类:进入事件(数字id,玩家数据[数字id].连接id)
    end--]]
   -- collectgarbage("collect")
   系统处理类:进入游戏预处理(临时角色连接id,数字id)

  end

function 多开系统类:角色更换处理(id,上线id,选择id)
     for n=1,#上线id.子队员 do
      if 玩家数据[上线id.子队员[n]]~=nil then
        系统处理类:断开游戏(上线id.子队员[n])
      elseif 上线id.子队员[n] == 选择id then
        table.remove(上线id.子队员,n)
      end
  end
   local 连接id = 玩家数据[id].连接id
   local 账号 = 玩家数据[id].账号
   local 硬盘 = 玩家数据[id].硬盘
   local 临时ip = 玩家数据[id].ip

    系统处理类:断开游戏(id)



        账号记录[账号..选择id]=选择id
        玩家数据[选择id]={}
        玩家数据[选择id].角色=角色处理类:创建(连接id)
        玩家数据[选择id].道具=道具处理类:创建(连接id)
        玩家数据[选择id].装备=装备处理类:创建(连接id,选择id)
        玩家数据[选择id].召唤兽=召唤兽处理类:创建(连接id,选择id)
        玩家数据[选择id].助战=助战处理类:创建(选择id)
        玩家数据[选择id].角色:加载数据(账号,选择id)
        玩家数据[选择id].道具:加载数据(账号,选择id)
        玩家数据[选择id].召唤兽:加载数据(账号,选择id)
        玩家数据[选择id].召唤兽仓库 = 召唤兽仓库类:创建()
        玩家数据[选择id].召唤兽仓库:加载数据(账号,选择id)
        玩家数据[选择id].助战:加载数据(账号,选择id)
        玩家数据[选择id].连接id=连接id
        玩家数据[选择id].账号=账号
        玩家数据[选择id].队伍=0
        玩家数据[选择id].当前频道=os.time()
        玩家数据[选择id].世界频道=os.time()
        玩家数据[选择id].传闻频道=os.time()
        玩家数据[选择id].遇怪时间=os.time()+取随机数(10,20)
        玩家数据[选择id].战斗=0
        玩家数据[选择id].ip=临时ip
        玩家数据[选择id].yp=硬盘
        玩家数据[选择id].商品列表=0
        玩家数据[选择id].移动数据={}
        玩家数据[选择id].最后事件=""
        玩家数据[选择id].道具操作={}
        玩家数据[选择id].角色.数据.多角色操作 = true
        玩家数据[选择id].子角色操作 = nil




    发送数据(连接id,5,玩家数据[选择id].角色:取总数据())
    发送数据(连接id,16,玩家数据[选择id].召唤兽.数据)
    发送数据(连接id,102,玩家数据[选择id].助战:取数据())
    发送数据(连接id,1,{id=连接id,用户="正式用户"})
    发送数据(连接id,43,{时辰=时辰信息.当前})
    发送数据(连接id,160)



    地图处理类:加入玩家(选择id,玩家数据[选择id].角色.数据.地图数据.编号,玩家数据[选择id].角色.数据.地图数据.x,玩家数据[选择id].角色.数据.地图数据.y,id)
    玩家数据[选择id].角色:刷新任务跟踪()
    local 建队信息 = {}
    建队信息.ip = 临时ip
    建队信息.数字id = 选择id
    建队信息.id = 选择id
    队伍处理类:创建队伍(选择id,建队信息)
    for n=1,#上线id.子队员 do
      self:角色进入游戏(选择id,上线id.子队员[n],1)
      self:角色加入队伍(选择id,上线id.子队员[n])
    end
    for n=1,#上线id.其他队员 do
      if 上线id.其他队员[n] == id then
        self:角色进入游戏(选择id,上线id.其他队员[n],1)
      end
      self:角色加入队伍(选择id,上线id.其他队员[n])
    end
  队伍处理类:索取队伍信息(选择id,4004)
--  玩家数据[选择id].角色.多角色操作 = true



end












function 多开系统类:更新(dt) end
function 多开系统类:显示(x,y) end
return 多开系统类