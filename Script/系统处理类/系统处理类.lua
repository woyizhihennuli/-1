-- @Author: baidwwy
-- @Date:   2023-03-10 11:49:53
-- @Last Modified by:   baidwwy
-- @Last Modified time: 2024-01-29 00:37:36
--======================================================================--

--======================================================================--
local 系统处理类 = class()
local jnzb = require("script/角色处理类/技能类")
local function 积分排序(a,b) return a.积分<b.积分 end
function 系统处理类:初始化() end
function 系统处理类:数据处理(id,序号,内容)
  --print(内容.分区)
  -- __S服务:输出("开始加载科举题库"..id.."##"..序号)
  if 内容==nil then
    return 0
  end
  if 序号~=5 then
    if 内容~=nil and 内容.ip~=nil and f函数.读配置(程序目录 .. "ip封禁.ini", "ip", 内容.ip)=="1" or f函数.读配置(程序目录 .. "ip封禁.ini", "ip", 内容.ip)==1 then
        __S服务:输出(string.format("封禁ip的客户进入试图进入(%s):%s:%s", 内容.id, 内容.ip,id))
        发送数据(id,7,"您的已被禁止登陆!")
        return 0
    end
  end
  if 序号==1 or 序号==1.1 or 序号==1.2 then
    self:账号验证(id,序号,内容)
  elseif 序号==2 then -- 申请创建角色
    if f函数.文件是否存在([[data/]]..内容.账号)==false then  --未创建存档
      发送数据(id,3)
    else
      self.临时文件=读入文件([[data/]]..内容.账号..[[/信息.txt]])
      self.写入信息=table.loadstring(self.临时文件)
      if #self.写入信息>=6 then
        发送数据(id,7,"#Y/您无法再创建更多的角色了")
        return 0
      end
      发送数据(id,3)
    end
  elseif 序号==3 then --创建新角色
      if  string.find(内容.名称, "#") ~= nil or string.find(内容.名称,"/")~= nil
      or string.find(内容.名称, "@") ~= nil or string.find(内容.名称,"*")~= nil
      or string.find(内容.名称, " ") ~= nil or string.find(内容.名称,"~")~= nil
      or string.find(内容.名称, "GM") ~= nil or string.find(内容.名称,"gm")~= nil
      or string.find(内容.名称, "  ") ~= nil or string.find(内容.名称,"充值")~= nil
      or string.find(内容.名称, "游戏管理员") ~= nil or string.find(内容.名称,"·")~= nil
      or string.find(内容.名称,"七七")~= nil  or string.find(内容.名称,"群")~= nil
       or string.find(内容.名称,"裙")~= nil or string.find(内容.名称,"q")~= nil
       or string.find(内容.名称,"Q")~= nil or string.find(内容.名称,"小七")~= nil
       or string.find(内容.名称, "管理员") ~= nil or string.find(内容.名称, "QQ") ~= nil
      or 内容.名称 == "" then
      发送数据(id,7,"名称#Y"..内容.名称.."#/存在敏感词,请少侠换一个吧")
      return
      end
    for n=1,#名称数据 do
      if 名称数据[n].名称==内容.名称 then
        发送数据(id,7,"#Y/这个名称已经被他人占用了，请重新再想个吧")
        return 0
      end
    end
      if f函数.文件是否存在([[data/]]..内容.账号)==false then  --未创建存档
        --创建新的账号数据
        if lfs.mkdir([[data/]]..内容.账号)==false then
          发送数据(id,7,"#Y/建立存档失败，错误代号1001")
          return 0
        end
        --self.写入数据=[[]]
        写出文件([[data/]]..内容.账号..[[/账号信息.txt]],"")
        临时角色=角色处理类.创建()
        临时角色:创建角色(id,内容.账号,内容.模型,内容.名称,内容.ip,内容.染色ID)
         写出文件([[tysj/名称数据.txt]],table.tostring(名称数据))
        临时角色=nil
        self:取角色选择信息(id,内容.账号)
      else
        self.临时文件=读入文件([[data/]]..内容.账号..[[/信息.txt]])
        self.写入信息=table.loadstring(self.临时文件)
        if #self.写入信息>=6 then
          发送数据(id,7,"#Y/您无法再创建更多的角色了")
          return 0
        end
        临时角色=角色处理类.创建()
        临时角色:创建角色(id,内容.账号,内容.模型,内容.名称,内容.ip,内容.染色ID)
        写出文件([[tysj/名称数据.txt]],table.tostring(名称数据))
        临时角色=nil
        self:取角色选择信息(id,内容.账号)
        -- self.临时数据=读入文件()
        -- 服务端参数.id=服务端参数.id+1
      end
  elseif 序号==4 then --选择角色进入游戏
    local 数字id=self:取角色选择id(内容.id,内容.账号)
    self:进入游戏(id,内容.账号,数字id,内容.ip,内容.硬盘)
  elseif 序号==4.1 then --4.2 重连和管理工具都走这边
    local 数字id=self:取角色选择id(内容.id,内容.账号)
    self:断开游戏(数字id)
    self:进入游戏(id,内容.账号,数字id,内容.ip,内容.硬盘,序号)
  elseif 序号==85.1 then
    玩家数据[内容.数字id].助战:染色处理(内容.编号,内容.染色组)
  elseif 序号==5 then --选择角色进入游戏
    self:断开游戏(内容+0,id)
  elseif 序号==6 then
    if 玩家数据[内容.数字id].角色.数据.宠物.领养次数==0 then
      玩家数据[内容.数字id].角色.数据.宠物={模型=内容.cw,名称=内容.cw,等级=1,最大等级=120,耐力=5,最大耐力=5,经验=1,最大经验=10,领养次数=1}
      发送数据(id,7,"#Y/领养宠物成功")
      发送数据(id,8,玩家数据[内容.数字id].角色.数据.宠物)
    else
      发送数据(id,7,"#Y/您当前无法再领取宠物了")
    end
  elseif 序号==7 then
   发送数据(id,10,玩家数据[内容.数字id].角色:取总数据())
  elseif 序号==7.1 then
   发送数据(id,10.1,玩家数据[内容.多开id].角色:取总数据())
  elseif 序号==8 then
    玩家数据[内容.数字id].角色:添加属性点(内容,id)
    发送数据(id,10,玩家数据[内容.数字id].角色:取总数据())
  elseif 序号==9 then
    if 玩家数据[内容.数字id].角色.数据.等级>=服务端参数.服务器上限 then
        发送数据(id,7,"#Y/您当前等级已达到服务器上限，等待GM开放更高等级")
        return 0
    end
    玩家数据[内容.数字id].角色:升级处理(id)
  elseif 序号==10 then
    玩家数据[内容.数字id].角色:获取任务信息(id)
  elseif 序号==11 then
    玩家数据[内容.数字id].角色:设置快捷技能(内容)
   -- 发送数据(id,10,玩家数据[内容.数字id].角色:取总数据())
  elseif 序号==12 then
    发送数据(id,41,玩家数据[内容.数字id].角色.数据.快捷技能)
  elseif 序号==13 then
    玩家数据[内容.数字id].角色:使用快捷技能(内容.序列)
  elseif 序号==14 then


    local id=内容.数字id
    if 内容.人物~=nil then
      玩家数据[id].角色.数据.修炼.当前=内容.人物
    end
    if 内容.bb~=nil then
      玩家数据[id].角色.数据.bb修炼.当前=内容.bb
    end
    常规提示(id,"#Y/更换修炼类型成功！")
    刷新修炼数据(id)
  elseif 序号==15 then
    local id=内容.数字id
    if 玩家数据[id].角色.数据.自动遇怪 then
      玩家数据[id].角色.数据.自动遇怪=false
      常规提示(id,"#Y/你关闭了自动遇怪功能")
      自动遇怪[id]=nil
    else
      玩家数据[id].角色.数据.自动遇怪=true
      常规提示(id,"#Y你正在使用自动遇怪功能\n在野外场景下#R每隔5秒#W会自动触发暗雷战斗\n如需关闭此功能#G再次ALT+Z#Y自动遇怪即可关闭此功能")
      自动遇怪[id]=os.time()
    end
    发送数据(玩家数据[id].连接id,48,{遇怪=玩家数据[id].角色.数据.自动遇怪})
  elseif 序号==16 then
    if self:取消息数据(内容.数字id,玩家数据[内容.数字id].连接id)==false then
      玩家数据[内容.数字id].角色:取好友数据(内容.数字id,玩家数据[内容.数字id].连接id,50)
    end
  elseif 序号==17 then --添加好友
    local 查找数据=self:查找角色(内容.名称,内容.id)
    if #查找数据==0 then
     常规提示(内容.数字id,"#Y这个角色并不存在或当前没有在线")
     return
    else
      发送数据(玩家数据[内容.数字id].连接id,51,查找数据)
    end
  elseif 序号==18 then --添加好友
    local 查找数据=self:查找角色(内容.名称,内容.id)
    if #查找数据==0 then
      常规提示(内容.数字id,"#Y这个角色并不存在或当前没有在线")
      return
    else
      --发送数据(玩家数据[内容.数字id].连接id,51,查找数据)
      self:添加好友(内容.数字id,玩家数据[内容.数字id].连接id,查找数据[2],内容.类型)
    end
  elseif 序号==19 then --刷新好友数据
    玩家数据[内容.数字id].角色:取好友数据(内容.数字id,玩家数据[内容.数字id].连接id,53)
  elseif 序号==20 then --更新好友数据
    local id=内容.数字id
    local 类型=内容.类型
    local 序列=内容.序列
    --if 玩家数据[好友id]==nil then
    --  常规提示(内容.数字id,"#Y对方当前不在线，无法更新其信息")
    --  return
    if 玩家数据[id].角色.数据.好友数据[类型]==nil then
      常规提示(内容.数字id,"#Y更新失败，你没有这个分类")
      return
    elseif 玩家数据[id].角色.数据.好友数据[类型][序列]==nil then
      常规提示(内容.数字id,"#Y更新失败，你没有这个好友")
      return
    else
      local 好友id=玩家数据[id].角色.数据.好友数据[类型][序列].id
      if 玩家数据[好友id]==nil then
        常规提示(内容.数字id,"#Y对方当前不在线，无法更新其信息")
        return
      else
        玩家数据[id].角色.数据.好友数据[类型][序列].名称=玩家数据[好友id].角色.数据.名称
        玩家数据[id].角色.数据.好友数据[类型][序列].等级=玩家数据[好友id].角色.数据.等级
        玩家数据[id].角色.数据.好友数据[类型][序列].门派=玩家数据[好友id].角色.数据.门派
        玩家数据[id].角色.数据.好友数据[类型][序列].称谓=玩家数据[好友id].角色.数据.称谓
        玩家数据[id].角色.数据.好友数据[类型][序列].帮派=玩家数据[好友id].角色.数据.帮派
        玩家数据[id].角色.数据.好友数据[类型][序列].称谓=玩家数据[好友id].角色.数据.当前称谓
        发送数据(玩家数据[id].连接id,54,{数据=玩家数据[id].角色.数据.好友数据[类型][序列],类型=类型,序列=序列})
      end
    end
  elseif 序号==21 then
    local id=内容.数字id
    local 好友id=内容.id
    if 玩家数据[好友id]==nil then
      常规提示(id,"#Y对方当前不在线，无法添加其为好友")
      return
    else
      self:添加好友(内容.数字id,玩家数据[内容.数字id].连接id,好友id,1)
    end
  elseif 序号==22 then
    local id=内容.数字id
    local 好友id=内容.id
    if 玩家数据[好友id]==nil then
      常规提示(id,"#Y对方当前不在线，无法添加其为好友")
      return
    else
      self:添加好友(内容.数字id,玩家数据[内容.数字id].连接id,好友id,3)
    end

  elseif 序号==22.1 then
    local id=内容.数字id
    if 成就数据[id]==nil then
      成就数据[id]={成就点=0}
    end
    发送数据(玩家数据[id].连接id,22.1,{成就数据=成就数据[id]})

  elseif 序号==23 then --移除好友
    local id=内容.数字id
    local 好友id=内容.id
    local 类型=内容.类型
    local 删除序列=0
    for n=1,#玩家数据[id].角色.数据.好友数据[类型] do
      if 玩家数据[id].角色.数据.好友数据[类型][n].id==好友id then 删除序列=n end
    end
    if 删除序列~=0 then
      table.remove(玩家数据[id].角色.数据.好友数据[类型],删除序列)
      发送数据(玩家数据[id].连接id,52)
      常规提示(id,"#Y删除好友成功！")
      if 类型=="黑名单" then
        删除序列=0
        for n=1,#好友黑名单[id] do
          if 好友黑名单[id][n]==好友id then 删除序列=n end
        end
        if 删除序列~=0 then
          table.remove(好友黑名单[id],删除序列)
        end
      end
    end
  elseif 序号==24 then --请求发送消息
    local id=内容.数字id
    local 好友id=内容.id
    if 消息数据[好友id]==nil then
      消息数据[好友id]={}
    end
    if self:拒收消息检查(好友id,id,id)==false then return  end
    消息数据[好友id][#消息数据[好友id]+1]={名称=玩家数据[id].角色.数据.名称,类型=1,模型=玩家数据[id].角色.数据.模型,内容=内容.内容,id=id,时间=时间转换1(os.time()),等级=玩家数据[id].角色.数据.等级,好友度=self:取好友度(id,好友id)}
    发送数据(玩家数据[id].连接id,55,{信息=玩家数据[id].角色.数据.名称.."   "..时间转换1(os.time()),id=好友id,内容=内容.内容})
    self:更新消息通知(好友id)
  elseif 序号==25 then
    self:取消息数据(内容.数字id,玩家数据[内容.数字id].连接id)
  elseif 序号==26 then
    local 序列=内容.序列
    local id=内容.数字id
    if 玩家数据[id].角色.数据.坐骑列表[序列]==nil then
      常规提示(id,"#Y你没有这样的坐骑")
      return
    else
      玩家数据[id].角色.数据.坐骑=table.loadstring(table.tostring(玩家数据[id].角色.数据.坐骑列表[序列]))
      常规提示(id,"#Y骑乘坐骑成功！")
      玩家数据[id].角色:刷新信息(是否,体质,魔力)
      发送数据(玩家数据[id].连接id,60,玩家数据[id].角色.数据.坐骑)
      地图处理类:更新坐骑(id,玩家数据[id].角色.数据.坐骑)
    end
  elseif 序号==26.1 then
    local 序列=内容.序列
    local id=内容.多开id
    local 主id=内容.数字id
    if 玩家数据[id].角色.数据.坐骑列表[序列]==nil then
      常规提示(主id,"#Y你没有这样的坐骑")
      return
    else
      玩家数据[id].角色.数据.坐骑=table.loadstring(table.tostring(玩家数据[id].角色.数据.坐骑列表[序列]))
      常规提示(主id,"#Y骑乘坐骑成功！")
      玩家数据[id].角色:刷新信息(是否,体质,魔力)
      --发送数据(玩家数据[主id].连接id,60,玩家数据[id].角色.数据.坐骑)
      地图处理类:更新坐骑(id,玩家数据[id].角色.数据.坐骑)
    end
  elseif 序号==27 then
    local id=内容.数字id
    玩家数据[id].角色.数据.坐骑=nil
    常规提示(id,"#Y下乘坐骑成功！")
    玩家数据[id].角色:刷新信息(是否,体质,魔力)
    发送数据(玩家数据[id].连接id,60,玩家数据[id].角色.数据.坐骑)
    地图处理类:更新坐骑(id,玩家数据[id].角色.数据.坐骑)
   elseif 序号==27.1 then
    local id=内容.多开id
    local 主id=内容.数字id
    玩家数据[id].角色.数据.坐骑=nil
    常规提示(主id,"#Y下乘坐骑成功！")
    玩家数据[id].角色:刷新信息(是否,体质,魔力)
    --发送数据(玩家数据[id].连接id,60,玩家数据[id].角色.数据.坐骑)
    地图处理类:更新坐骑(id,玩家数据[id].角色.数据.坐骑)
  elseif 序号==28 then
    玩家数据[内容.数字id].角色:取快捷技能(内容.数字id)
  elseif 序号==29 then
    if 内容==nil or 内容.数字id==nil then
      print("购买商品出错")
    return
  end
      商城处理类:取商品组数据(内容.数字id, 18,内容.分类)

  elseif 序号==29.1 then---武神坛商城
    if 内容==nil or 内容.数字id==nil then
      print("购买商品出错")
    return
  end
    商城处理类:取商品组数据(内容.数字id, 20,内容.分类)

  elseif 序号==30 then
        if 内容==nil or 内容.数字id==nil then
      print("购买商品出错")
      return
    end
    商城处理类:数据处理(内容.数字id, 内容)
  elseif 序号==31 then
    local id = 内容.数字id

    地图处理类:更新称谓(内容.多开id or 内容.数字id,内容.称谓ID)
  elseif 序号==32 then
    if 内容.多开id~=nil then
       内容.数字id=内容.多开id
    end
    玩家数据[内容.数字id].角色:增加奇经八脉(内容.数字id,内容.序列,内容.技能,内容.状态)
  elseif 序号==32.2 then--切换经脉
    玩家数据[内容.数字id].角色:切换经脉(内容.数字id,内容.序列)
  elseif 序号==33 then
    if 玩家数据[内容.序列] ~= nil and 玩家数据[内容.序列].战斗 ~= nil and 玩家数据[内容.序列].战斗 ~= 0 and 玩家数据[内容.序列].观战 == nil  then
      if 玩家数据[内容.数字id].队伍 ~= 0 then
        常规提示(内容.数字id,"#Y/观战不能组队哟!......")
        return
      else
        战斗准备类.战斗盒子[玩家数据[内容.序列].战斗]:设置观战玩家(内容.序列,内容.数字id)
        玩家数据[内容.数字id].战斗 = 玩家数据[内容.序列].战斗
        玩家数据[内容.数字id].观战 = 1
      end
    elseif 玩家数据[内容.数字id].角色.数据.强P开关 ~= nil then
      玩家数据[内容.数字id].最后对话={}
      添加最后对话(内容.数字id,"你确定要对#R"..玩家数据[内容.序列].角色.数据.名称.."#Y强行进行PK么?",{"确定强行PK","我再考虑考虑！"})
      玩家数据[内容.数字id].强P对象 = 内容.序列
      return
    elseif 玩家数据[内容.数字id].角色.数据.PK开关 ~= nil and 玩家数据[内容.序列].角色.数据.PK开关 ~= nil then
      if 玩家数据[内容.序列].观战 ~= nil then
        if 战斗准备类.战斗盒子[玩家数据[内容.序列].战斗]~=nil  then
          战斗准备类.战斗盒子[玩家数据[内容.序列].战斗]:删除观战玩家(内容.序列)
          玩家数据[内容.序列].战斗=0
          玩家数据[内容.序列].观战=nil
          发送数据(玩家数据[内容.序列].连接id,5505)
        else
          玩家数据[内容.序列].战斗=0
          玩家数据[内容.序列].观战=nil
          发送数据(玩家数据[内容.序列].连接id,5505)
        end
      end
      战斗准备类:创建玩家战斗(内容.数字id, 200007, 内容.序列, 1501)
    elseif 玩家数据[内容.数字id].角色.数据.地图数据.编号 ~= 5140 and 玩家数据[内容.数字id].角色.数据.地图数据.编号 ~= 1001 and 玩家数据[内容.数字id].角色.数据.地图数据.编号 ~= 1994 and 玩家数据[内容.数字id].角色.数据.地图数据.编号 ~= 6003 and 玩家数据[内容.数字id].角色.数据.地图数据.编号 ~= 6004 and 玩家数据[内容.数字id].角色.数据.地图数据.编号 ~= 6005 and 玩家数据[内容.数字id].角色.数据.地图数据.编号 ~= 6006 and 玩家数据[内容.数字id].角色.数据.地图数据.编号 ~= 6007 and 玩家数据[内容.数字id].角色.数据.地图数据.编号 ~= 6008 and 玩家数据[内容.数字id].角色.数据.地图数据.编号 ~= 6009 and 玩家数据[内容.数字id].角色.数据.地图数据.编号 ~= 6010 and 玩家数据[内容.数字id].角色.数据.地图数据.编号 ~= 6011 and 玩家数据[内容.数字id].角色.数据.地图数据.编号 ~= 6012 and 玩家数据[内容.数字id].角色.数据.地图数据.编号 ~= 6013 and 玩家数据[内容.数字id].角色.数据.地图数据.编号 ~= 6014 and 玩家数据[内容.数字id].角色.数据.地图数据.编号 ~= 6015 and 玩家数据[内容.数字id].角色.数据.地图数据.编号 ~= 6016 and 玩家数据[内容.数字id].角色.数据.地图数据.编号 ~= 6017 and 玩家数据[内容.数字id].角色.数据.地图数据.编号 ~= 6018 and 玩家数据[内容.数字id].角色.数据.地图数据.编号 ~= 6019 and 玩家数据[内容.数字id].角色.数据.地图数据.编号 ~= 6020 then
      常规提示(内容.数字id,"#Y只可以在长安擂台PK！")
      return 0

    elseif 玩家数据[内容.数字id].角色.数据.地图数据.编号 ~= 5140 and 玩家数据[内容.数字id].角色.数据.地图数据.编号 ~= 6003 and 玩家数据[内容.数字id].角色.数据.地图数据.编号 ~= 6004 and 玩家数据[内容.数字id].角色.数据.地图数据.编号 ~= 6005 and 玩家数据[内容.数字id].角色.数据.地图数据.编号 ~= 6006 and 玩家数据[内容.数字id].角色.数据.地图数据.编号 ~= 6007 and 玩家数据[内容.数字id].角色.数据.地图数据.编号 ~= 6008 and 玩家数据[内容.数字id].角色.数据.地图数据.编号 ~= 6009 and 玩家数据[内容.数字id].角色.数据.地图数据.编号 ~= 6010 and 玩家数据[内容.数字id].角色.数据.地图数据.编号 ~= 6011 and 玩家数据[内容.数字id].角色.数据.地图数据.编号 ~= 6012 and 玩家数据[内容.数字id].角色.数据.地图数据.编号 ~= 6013 and 玩家数据[内容.数字id].角色.数据.地图数据.编号 ~= 6014 and 玩家数据[内容.数字id].角色.数据.地图数据.编号 ~= 6015 and 玩家数据[内容.数字id].角色.数据.地图数据.编号 ~= 6016 and 玩家数据[内容.数字id].角色.数据.地图数据.编号 ~= 6017 and 玩家数据[内容.数字id].角色.数据.地图数据.编号 ~= 6018 and 玩家数据[内容.数字id].角色.数据.地图数据.编号 ~= 6019 and 玩家数据[内容.数字id].角色.数据.地图数据.编号 ~= 6020 and (取两点距离({x=8274,y=3426},{x=玩家数据[内容.数字id].角色.数据.地图数据.x,y=玩家数据[内容.数字id].角色.数据.地图数据.y})>400 or 取两点距离({x=8274,y=3426},{x=玩家数据[内容.序列].角色.数据.地图数据.x,y=玩家数据[内容.序列].角色.数据.地图数据.y})>400) then
      常规提示(内容.数字id,"#y/只有擂台之上才可以进行切磋")
      return 0
    else
      if 玩家数据[内容.序列].观战 ~= nil then
        if 战斗准备类.战斗盒子[玩家数据[内容.序列].战斗]~=nil  then
          战斗准备类.战斗盒子[玩家数据[内容.序列].战斗]:删除观战玩家(内容.序列)
          玩家数据[内容.序列].战斗=0
          玩家数据[内容.序列].观战=nil
          发送数据(玩家数据[内容.序列].连接id,5505)
        else
          玩家数据[内容.序列].战斗=0
          玩家数据[内容.序列].观战=nil
          发送数据(玩家数据[内容.序列].连接id,5505)
        end
      end
      if 玩家数据[内容.数字id].角色.数据.地图数据.编号 == 1001  or 玩家数据[内容.数字id].角色.数据.地图数据.编号 == 1994 then
          战斗准备类:创建玩家战斗(内容.数字id, 200003, 内容.序列, 1501)

      elseif 玩家数据[内容.数字id].角色.数据.地图数据.编号 == 5140 then--嘎嘎 跨服
          战斗准备类:创建玩家战斗(内容.数字id, 300001, 内容.序列, 1501)
      elseif 玩家数据[内容.数字id].角色.数据.地图数据.编号 == 6003 or 玩家数据[内容.数字id].角色.数据.地图数据.编号 == 6004 or 玩家数据[内容.数字id].角色.数据.地图数据.编号 == 6005 or 玩家数据[内容.数字id].角色.数据.地图数据.编号 == 6006 or 玩家数据[内容.数字id].角色.数据.地图数据.编号 == 6007 or 玩家数据[内容.数字id].角色.数据.地图数据.编号 == 6008 then
        if 比武大会.比赛 then
		  if 比武大会.玩家表[内容.数字id].阵营 ~= 比武大会.玩家表[内容.序列].阵营 then
			战斗准备类:创建玩家战斗(内容.数字id, 200004, 内容.序列, 1501)
		  else
		    常规提示(内容.数字id,"对方为同阵营玩家，无法进行比武！")
			return 0
		  end
        else
          常规提示(内容.数字id,"当前为比武大会准备时间,19.10分正式开打!")
          return 0
        end
      elseif 玩家数据[内容.数字id].角色.数据.地图数据.编号 == 6009 then
        if 首席争霸开关 then
          战斗准备类:创建玩家战斗(内容.数字id, 200005, 内容.序列, 1501)
        else
          常规提示(内容.数字id,"当前为首席争霸准备时间，无法进行切磋！")
          return 0
        end
      elseif 玩家数据[内容.数字id].角色.数据.地图数据.编号 == 6010 then
      帮战活动类:进入战斗(内容.数字id,内容.序列)


      end
    end
  elseif 序号==34 then
      self:创建账号(id,序号,内容)
  elseif 序号==35 then --玩法介绍分类
    发送数据(玩家数据[内容.数字id].连接id, 992, {内容=玩法介绍})
  elseif 序号==36 then --玩法介绍内容
    取玩法介绍(内容.数字id,内容.分类,内容.子类)
  elseif 序号==37 then
    if 内容.多开id~=nil then
       内容.数字id=内容.多开id
    end
    print(内容.数字id)
    玩家数据[内容.数字id].角色:删除称谓(内容.数字id,玩家数据[内容.数字id].角色.数据.称谓[内容.称谓ID])
  elseif 序号==38 then
    self:生死劫处理(内容.数字id,内容)
  elseif 序号==39 then
    发送数据(玩家数据[内容.数字id].连接id,987,{内容=排行榜数据})
  elseif 序号==40 then
    if 活跃数据[内容.数字id]==nil then
      活跃数据[内容.数字id]={活跃度=0,领取100活跃=false,领取200活跃=false,领取300活跃=false,领取400活跃=false,领取500活跃=false}
    end
    发送数据(玩家数据[内容.数字id].连接id,88,{活跃数据=活跃数据[内容.数字id],累积活跃=玩家数据[内容.数字id].角色.数据.累积活跃})
  elseif 序号==41 then
    self:领取活跃度奖励(内容.数字id,内容)
  elseif 序号==42 then
    self:帮战报名处理(内容.数字id,内容)
  elseif 序号==43 then
    self:获取签到数据(内容.数字id)
  elseif 序号==44 then
    self:签到处理(内容.数字id,内容)
  elseif 序号==45 then
    self:获取VIP数据(内容.数字id)
  elseif 序号==46 then
    self:VIP领取奖励处理(内容.数字id,内容)
  elseif 序号==47 then
    self:获取点卡数据(内容.数字id)
  elseif 序号==48 then
    --商城处理类:取商品组数据(内容.数字id, 19)
  elseif 序号==49 then
    地图处理类:移除玩家(内容.数字id)
  elseif 序号==149 then
     local id=内容.数字id
     local 认证码=内容.序列
     local 编号=玩家数据[id].召唤兽:取编号(认证码)
     if 玩家数据[id].召唤兽.数据[编号]==nil then
       常规提示(id,"你没有这样的召唤兽")
       return
      elseif 玩家数据[id].召唤兽.数据[编号].饰品==nil then
       常规提示(id,"你没有这样的饰品")
       return
      elseif 玩家数据[id].角色:取道具格子2()<=0 then
      常规提示(id,"#Y请先清理下背包")
      return
      else
       玩家数据[id].道具:给予道具(id,玩家数据[id].召唤兽.数据[编号].饰品)
       常规提示(id,"你获得了"..玩家数据[id].召唤兽.数据[编号].饰品)
       玩家数据[id].召唤兽.数据[编号].饰品=nil
      end
  elseif 序号==50 then
    地图处理类:加入玩家(内容.数字id,玩家数据[内容.数字id].角色.数据.地图数据.编号,玩家数据[内容.数字id].角色.数据.地图数据.x,玩家数据[内容.数字id].角色.数据.地图数据.y)
  elseif 序号==53 then --购买商会召唤兽
     local id=内容.数字id+0
     local 序列=内容.名称
     if 商店bb[id]==nil or 商店bb[id][序列]==nil then
        常规提示(id,"你无法购买这样的召唤兽")
        return
      elseif 玩家数据[id].角色.数据.银子<商店bb[id][序列].价格 then
        常规提示(id,"你没有那么多的银子")
        return
      elseif 玩家数据[id].角色:取新增宝宝数量()==false then
        常规提示(id,"你当前可携带的召唤兽数量已达上限")
        return
      else
        玩家数据[id].角色:扣除银子(商店bb[id][序列].价格,0,0,"商会购买召唤兽",1)
        玩家数据[id].召唤兽:添加召唤兽(商店bb[id][序列].模型,"野怪",false,false,0)
        table.remove(商店bb[id],序列)
        常规提示(id,"购买召唤兽成功")
        发送数据(玩家数据[id].连接id,131,商店bb[id])
      end
    elseif 序号==53.1 then --购买商会召唤兽
     local id=内容.数字id+0
     local 序列=内容.名称
     if 变异商店bb[id]==nil or 变异商店bb[id][序列]==nil then
        常规提示(id,"你无法购买这样的召唤兽")
        return
      elseif 玩家数据[id].角色.数据.银子<变异商店bb[id][序列].价格 then
        常规提示(id,"你没有那么多的银子")
        return
      elseif 玩家数据[id].角色:取新增宝宝数量()==false then
        常规提示(id,"你当前可携带的召唤兽数量已达上限")
        return
      else
        玩家数据[id].角色:扣除银子(变异商店bb[id][序列].价格,0,0,"商会购买召唤兽",1)
        玩家数据[id].召唤兽:添加召唤兽(变异商店bb[id][序列].模型,true,true,false,0)

                                                         -- 造型,宝宝,变异,神兽,等级,物法,位置,vip
        table.remove(变异商店bb[id],序列)
        常规提示(id,"购买召唤兽成功")
        发送数据(玩家数据[id].连接id,131.1,变异商店bb[id])
      end
   elseif 序号==54 then
     添加最后对话(内容.数字id,format("系统每隔两小时会自动刷新出新的召唤兽，当然你也可以在我这里都过耗费银子进行快速刷新。每次刷新都将消耗500000两银子，你是否需要进行刷新？"),{"请帮我刷新","不用了"})
     elseif 序号==54.1 then
     添加最后对话(内容.数字id,format("系统每隔两小时会自动刷新出新的召唤兽，当然你也可以在我这里都过耗费银子进行快速刷新。每次刷新都将消耗800000两银子，你是否需要进行刷新？"),{"刷新变异召唤兽","不用了"})

  elseif 序号==60 then
    local 点卡=f函数.读配置(程序目录..[[data\]]..玩家数据[内容.数字id].账号..[[\账号信息.txt]],"账号配置","点卡")
    if 点卡 == nil or 点卡 == "" or 点卡 == "空" then
      f函数.写配置(程序目录..[[data\]]..玩家数据[内容.数字id].账号..[[\账号信息.txt]],"账号配置","点卡",0)
      点卡 = 0
    end
    local 银子 = 玩家数据[内容.数字id].角色.数据.银子
    发送数据(玩家数据[内容.数字id].连接id,92.2,{兑换比例=兑换比例,点卡=银子})
    发送数据(玩家数据[内容.数字id].连接id,112,藏宝阁数据)
    if 观察藏宝阁数据 == nil then
      观察藏宝阁数据 = {}
    end
    观察藏宝阁数据[内容.数字id] = 1
  elseif 序号 == 60.1 then
    发送数据(玩家数据[内容.数字id].连接id, 113, 玩家数据[内容.数字id].道具:索要道具1(内容.数字id))
  elseif 序号 == 60.2 then
    发送数据(玩家数据[内容.数字id].连接id, 114, 玩家数据[内容.数字id].召唤兽.数据)
  elseif 序号 == 60.3 then
    发送数据(玩家数据[内容.数字id].连接id, 115, 玩家数据[内容.数字id].角色.数据.银子)
  elseif 序号 == 60.5 then --上架道具
    self:藏宝阁上架(内容.数字id,内容.编号,内容.价格)
  elseif 序号 == 60.6 then --上架召唤兽
    self:藏宝阁上架召唤兽(内容.数字id,内容.编号,内容.价格)
  elseif 序号 == 60.7 then --上架召唤兽
    观察藏宝阁数据[内容.数字id] = nil
  elseif 序号 == 60.8 then --上架银子
    self:藏宝阁上架银两(内容.数字id,内容.编号,内容.价格)
  elseif 序号 == 60.9 then --上架银子
    self:藏宝阁购买处理(内容.数字id,内容.编号,内容.类型)
  elseif 序号 == 60.4 then --上架银子
    self:藏宝阁取回处理(内容.数字id,内容.编号,内容.类型)
  elseif 序号 == 61 then --上架角色
    -- 玩家数据[内容.数字id].角色.数据.藏宝阁出售 = 1
    -- 藏宝阁数据.角色[#藏宝阁数据.角色+1] = {所有者=内容.数字id,价格=内容.编号,取回密码=内容.价格,结束时间=os.time()+604800,角色信息={账号=玩家数据[内容.数字id].账号,模型=玩家数据[内容.数字id].角色.数据.模型,名称=玩家数据[内容.数字id].角色.数据.名称,等级=玩家数据[内容.数字id].角色.数据.等级,门派=玩家数据[内容.数字id].角色.数据.门派}}
    -- 常规提示(内容.数字id,"#Y上架角色成功,即日起该角色将无法进入游戏,可以使用任意角色在XX处使用取回密码取回账号,请牢记你的取回密码:"..内容.价格)
    -- 玩家数据[内容.数字id].角色:存档()
    -- 发送数据(玩家数据[内容.数字id].连接id,998,"#Y上架角色成功,即日起该角色将无法进入游戏,可以使用任意角色在XX处使用取回密码取回账号,请牢记你的取回密码！")
    -- __S服务:连接退出(玩家数据[内容.数字id].连接id)
    -- for i,v in pairs(观察藏宝阁数据) do
    --   if 玩家数据[i] ~= nil then
    --     发送数据(玩家数据[i].连接id,116 , 藏宝阁数据)
    --   else
    --     观察藏宝阁数据[i] = nil
    --   end
    -- end
  elseif 序号 == 62 then --查看角色
    -- local id = 内容.数字id
    -- local 编号 = 内容.编号
    -- local 名称 = 内容.名称
    -- if 藏宝阁数据.角色[编号] == nil or 名称 ~= 藏宝阁数据.角色[编号].角色信息.名称 then
    --   常规提示(id,"#Y数据错误请重新打开藏宝阁")
    --   return
    -- end
    -- local 发送角色信息= {}
    -- 发送角色信息.角色数据 = table.loadstring(读入文件([[data/]]..藏宝阁数据.角色[编号].角色信息.账号..[[/]]..藏宝阁数据.角色[编号].所有者..[[/角色.txt]]))
    -- 发送角色信息.召唤兽数据 = table.loadstring(读入文件([[data/]]..藏宝阁数据.角色[编号].角色信息.账号..[[/]]..藏宝阁数据.角色[编号].所有者..[[/召唤兽.txt]]))
    -- local 道具数据 = table.loadstring(读入文件([[data/]]..藏宝阁数据.角色[编号].角色信息.账号..[[/]]..藏宝阁数据.角色[编号].所有者..[[/道具.txt]]))
    -- 发送角色信息.装备数据 = {}
    -- for i=1,6 do
    --   if 发送角色信息.角色数据.装备[i] ~= nil and 道具数据[发送角色信息.角色数据.装备[i]] ~= nil then
    --     发送角色信息.装备数据[i] = 道具数据[发送角色信息.角色数据.装备[i]]
    --   end
    -- end
    -- 发送角色信息.灵饰数据 = {}
    --  for i=1,4 do
    --   if 发送角色信息.角色数据.灵饰[i] ~= nil and 道具数据[发送角色信息.角色数据.灵饰[i]] ~= nil then
    --     发送角色信息.灵饰数据[i] = 道具数据[发送角色信息.角色数据.灵饰[i]]
    --   end
    -- end
    -- 发送数据(玩家数据[id].连接id,117,发送角色信息)
    -- 发送角色信息 = nil
    -- 道具数据 = nil
  elseif 序号==63 then
    -- local id = 内容.数字id
    -- local 目标id = 内容.编号
    -- local 密码 = 内容.价格
    -- for i=1,#藏宝阁数据.角色 do
    --   if 藏宝阁数据.角色[i].所有者 == 目标id or tonumber(藏宝阁数据.角色[i].所有者) == tonumber(目标id) then
    --     if 藏宝阁数据.角色[i].取回密码 ~= 密码 then
    --       常规提示(id,"#Y密码错误请重新输入")
    --       return
    --     else
    --       local 角色信息 = table.loadstring(读入文件([[data/]]..藏宝阁数据.角色[i].角色信息.账号..[[/]]..藏宝阁数据.角色[i].所有者..[[/角色.txt]]))
    --       角色信息.藏宝阁出售 = nil
    --       写出文件([[data/]]..藏宝阁数据.角色[i].角色信息.账号..[[/]]..藏宝阁数据.角色[i].所有者..[[/角色.txt]],table.tostring(角色信息))
    --       角色信息 = nil
    --       table.remove(藏宝阁数据.角色,i)
    --       for i,v in pairs(观察藏宝阁数据) do
    --         if 玩家数据[i] ~= nil then
    --           发送数据(玩家数据[i].连接id,116 , 藏宝阁数据)
    --         else
    --           观察藏宝阁数据[i] = nil
    --         end
    --       end
    --       常规提示(id,"#Y恭喜角色成功取回,请原账号登录即可!!!")
    --       return
    --     end
    --   end
    -- end
---帮战
   elseif 序号==64 then
   战斗准备类:创建玩家战斗(内容.数字id, 200006, 内容.序列, 1501)


-- 剑会天下操作开始
  elseif 序号==65 then --
    local 数字id = 内容.数字id
    取剑会天下数据(数字id)
    local 临时数据 = 剑会天下[数字id]
    发送数据(玩家数据[数字id].连接id,126,临时数据)
  elseif 序号==66 then --开始匹配
    local id=内容.数字id
    local 模式 = 内容.模式
    if 剑会天下开关 == false then
      常规提示(id,"#Y/当前不是活动时间,请在等待剑会天下开启时进行匹配！")
      return
    end
    -- table.print(玩家数据[id].角色)
    if 玩家数据[id].角色.数据.地图数据.编号~=1001 and 玩家数据[id].角色.数据.地图数据.编号~=1501 and 玩家数据[id].角色.数据.地图数据.编号~=1070 and 玩家数据[id].角色.数据.地图数据.编号~=1092
    and 玩家数据[id].角色.数据.地图数据.编号~=1226 and 玩家数据[id].角色.数据.地图数据.编号~=1040 then
      常规提示(id,"#Y/该场景不能进行匹配 请玩家切换场景至安全区！")
      return
    end
    if 模式=="单人匹配" then
      if 剑会天下单人匹配开关==false then
        常规提示(id,"#Y/单人匹配功能已经关闭！")
        return
      end
      -- print(玩家数据[id].角色.数据.门派)
      if 玩家数据[id].角色.数据.门派=="无门派" then
           常规提示(id,"#Y/还没有拜师呢,不能参加匹配!")
           return
      end
      if 玩家数据[id].角色.数据.等级<109 then
        常规提示(id,"#Y/等级不足无法加入匹配!")
           return
      end
      if 剑会记录[id]== 1 then
          常规提示(id,"#Y/已经失败过了不能参加匹配")
         return
      end
      if 取队伍人数(id)==1 then
        剑会天下单人匹配[#剑会天下单人匹配+1]={匹配=true,id=id,积分=剑会天下[id].当前积分}
        发送数据(玩家数据[id].连接id,127,{人数=内容.人数,模式=模式})
      else
        常规提示(id,"#Y/单人匹配模式请一个人参加活动！")
        return
      end
    elseif 模式=="三人匹配" then
      if 剑会天下三人匹配开关==false then
        常规提示(id,"#Y/三人匹配功能已经关闭！")
        return
      end
      if 取队长权限(id) then
        -- if 队伍数据[id].助战~=nil and not 判断是否为空表(队伍数据[id].助战) then
        --   常规提示(id,"#Y/携带助战无法参加")
        --   return
        -- end
        if 取队伍人数(id)==3 then
          for i=1,#队伍数据[玩家数据[id].队伍].成员数据 do
              if 剑会记录[队伍数据[玩家数据[id].队伍].成员数据[i]]== 1 then
              常规提示(id,"#Y/队伍中#R/".. 玩家数据[队伍数据[玩家数据[id].队伍].成员数据[i]].角色.数据.名称.."#Y/玩家已经失败过了不能参加匹配~")
              return
              end
              if 玩家数据[队伍数据[玩家数据[id].队伍].成员数据[i]].角色.数据.门派=="无门派" then
                  常规提示(id,"#Y/队伍中#R/".. 玩家数据[队伍数据[玩家数据[id].队伍].成员数据[i]].角色.数据.名称.."#Y/还没有拜师呢,不能参加匹配!")
                  return
              end
                            if 玩家数据[队伍数据[玩家数据[id].队伍].成员数据[i]].角色.数据.等级<109 then
                  常规提示(id,"#Y/队伍中#R/".. 玩家数据[队伍数据[玩家数据[id].队伍].成员数据[i]].角色.数据.名称.."#Y/等级小于109级,无法匹配三人模式")
                  return
              end
          end
          local 平均分 = 0
          for i=1,#队伍数据[玩家数据[id].队伍].成员数据 do
            取剑会天下数据(队伍数据[玩家数据[id].队伍].成员数据[i])
            平均分=平均分+剑会天下[队伍数据[玩家数据[id].队伍].成员数据[i]].当前积分
            if 玩家数据[队伍数据[玩家数据[id].队伍].成员数据[i]]~=nil then
              发送数据(玩家数据[队伍数据[玩家数据[id].队伍].成员数据[i]].连接id,127,{人数=内容.人数,模式=模式})
            end
          end
          平均分=math.floor(平均分/3)
          剑会天下三人匹配[#剑会天下三人匹配+1]={匹配=true,id=玩家数据[id].队伍,积分=平均分}
        else
          常规提示(id,"#Y/三人匹配模式请组队并队伍人数达到三人进行活动！")
          return
        end
      else
        常规提示(id,"#Y/队长才可以发起匹配！")
        return
      end
    elseif 模式=="五人匹配" then
      if 剑会天下五人匹配开关==false then
        常规提示(id,"#Y/五人匹配功能已经关闭！")
        return
      end
      -- if 队伍数据[id].助战~=nil and not 判断是否为空表(队伍数据[id].助战) then
      --   常规提示(id,"#Y/携带助战无法参加")
      --   return
      -- end
      if 取队长权限(id) then
        if 取队伍人数(id)==5 then
          for i=1,#队伍数据[玩家数据[id].队伍].成员数据 do
              if 剑会记录[队伍数据[玩家数据[id].队伍].成员数据[i]]== 1 then
                  常规提示(id,"#Y/队伍中#R/".. 玩家数据[队伍数据[玩家数据[id].队伍].成员数据[i]].角色.数据.名称.."#Y/玩家已经失败过了不能参加匹配~")
                  return
              end
              if 玩家数据[队伍数据[玩家数据[id].队伍].成员数据[i]].角色.数据.门派=="无门派" then
                  常规提示(id,"#Y/队伍中#R/".. 玩家数据[队伍数据[玩家数据[id].队伍].成员数据[i]].角色.数据.名称.."#Y/还没有拜师呢,不能参加匹配!")
                  return
              end
              if 玩家数据[队伍数据[玩家数据[id].队伍].成员数据[i]].角色.数据.等级<109 then
                  常规提示(id,"#Y/队伍中#R/".. 玩家数据[队伍数据[玩家数据[id].队伍].成员数据[i]].角色.数据.名称.."#Y/等级小于109级,无法匹配五人模式")
                  return
              end
          end
          local 平均分 = 0
          for i=1,#队伍数据[玩家数据[id].队伍].成员数据 do
            取剑会天下数据(队伍数据[玩家数据[id].队伍].成员数据[i])
            if 玩家数据[队伍数据[玩家数据[id].队伍].成员数据[i]]~=nil then
              发送数据(玩家数据[队伍数据[玩家数据[id].队伍].成员数据[i]].连接id,127,{人数=内容.人数,模式=模式})
            end
          end
          平均分=math.floor(平均分/3)
          剑会天下五人匹配[#剑会天下五人匹配+1]={匹配=true,id=玩家数据[id].队伍,积分=平均分}
        else
          常规提示(id,"#Y/五人匹配模式请组队并队伍人数达到五人进行活动！")
          return
        end
      else
        常规提示(id,"#Y/队长才可以发起匹配！")
        return
      end
    end
  elseif 序号==67 then  --停止匹配
    local id=内容.数字id
    local 模式 = 内容.模式
    if 模式=="单人匹配" then
      for n,v in pairs(剑会天下单人匹配) do
        if v.id == id then
          table.remove(剑会天下单人匹配,n)
          break
        end
      end
      发送数据(玩家数据[id].连接id,128)
      常规提示(id,"#Y/你已经取消了匹配！")
    elseif 模式=="三人匹配" then
      if 玩家数据[id].队伍~=0 then
        for i=1,#队伍数据[玩家数据[id].队伍].成员数据 do
          if 玩家数据[队伍数据[玩家数据[id].队伍].成员数据[i]]~=nil then
            发送数据(玩家数据[队伍数据[玩家数据[id].队伍].成员数据[i]].连接id,128)
            常规提示(队伍数据[玩家数据[id].队伍].成员数据[i],"#Y/队伍取消了匹配！")
          end
        end
        for n,v in pairs(剑会天下三人匹配) do
          if v.id == 玩家数据[id].队伍 then
            table.remove(剑会天下三人匹配,n)
            break
          end
        end
      end
    elseif 模式=="五人匹配" then
      if 玩家数据[id].队伍~=0 then
        for i=1,#队伍数据[玩家数据[id].队伍].成员数据 do
          if 玩家数据[队伍数据[玩家数据[id].队伍].成员数据[i]]~=nil then
            发送数据(玩家数据[队伍数据[玩家数据[id].队伍].成员数据[i]].连接id,128)
            常规提示(队伍数据[玩家数据[id].队伍].成员数据[i],"#Y/队伍取消了匹配！")
          end
        end
        for n,v in pairs(剑会天下五人匹配) do
          if v.id == 玩家数据[id].队伍 then
            table.remove(剑会天下五人匹配,n)
            break
          end
        end
      end
    end
    -- 剑会天下操作结束

  elseif 序号==87.1 or 序号==87.2 or 序号==87 or 序号 == 86 or 序号 == 85 or 序号 == 84 or 序号 == 83 or 序号 == 82 or 序号 == 81 or 序号==79 or 序号==78 or 序号 == 77 or 序号 == 76 or 序号 == 75 or 序号 == 75.1 or 序号 == 78.2 or 序号 == 78.3 then
    玩家数据[内容.数字id].助战:数据处理(序号,内容)
    elseif 序号 == 80 then
    玩家数据[内容.数字id].助战:数据处理(序号,内容)
    local id = 内容.数字id
    local 编号 = 内容.编号
    -- if 玩家数据[id].助战.数据[编号].助战修炼经验 == nil or 玩家数据[id].助战.数据[编号].助战修炼经验.攻击经验 >=0
    -- or 玩家数据[id].助战.数据[编号].助战修炼经验.法术经验 >=0 or 玩家数据[id].助战.数据[编号].助战修炼经验.防御经验 >=0
    -- or 玩家数据[id].助战.数据[编号].助战修炼经验.抗法经验 >=0 then
    -- 玩家数据[id].助战.数据[编号].助战修炼经验 = {攻击经验=0,法术经验=0,防御经验=0,抗法经验=0}
    -- 玩家数据[id].助战.数据[编号].修炼 = {攻击修炼=17,法术修炼=17,防御修炼=17,抗法修炼=17}
    -- end
  elseif 序号==88 then
    发送数据(玩家数据[内容.数字id].连接id,101,玩家数据[内容.数字id].助战:取数据())
  elseif 序号 == 89 then
    local 序列=内容.序列
    local id=内容.数字id
    if 玩家数据[id].角色.数据.坐骑列表[序列]==nil then
      常规提示(id,"#Y你没有这样的坐骑")
      return
    else
      玩家数据[id].角色.数据.坐骑列表[序列].名称 = 内容.名称
    end
  elseif 序号 == 89.1 then
    local 序列=内容.序列
    local id=内容.多开id
    local 主id=内容.数字id
    if 玩家数据[id].角色.数据.坐骑列表[序列]==nil then
      常规提示(主id,"#Y你没有这样的坐骑")
      return
    else
      玩家数据[id].角色.数据.坐骑列表[序列].名称 = 内容.名称
    end
  elseif 序号 == 90 then
    local 序列=内容.序列
    local id=内容.数字id
    if 玩家数据[id].角色.数据.坐骑列表[序列]==nil then
      常规提示(id,"#Y你没有这样的坐骑")
      return
    elseif 玩家数据[id].摊位数据 ~= nil then
      常规提示(id,"#Y摆摊情况下无法进行此操作")
      return
    else
      if 玩家数据[id].角色.数据.坐骑列表[序列].统御召唤兽 == nil then
        玩家数据[id].角色.数据.坐骑列表[序列].统御召唤兽= {}
      end
      if #玩家数据[id].角色.数据.坐骑列表[序列].统御召唤兽 >= 2 then
        常规提示(id,"#Y该坐骑已经无法统御更多的召唤兽了")
        return
      elseif 玩家数据[id].召唤兽.数据[内容.召唤兽编号] == nil then
        常规提示(id,"#Y该召唤兽不存在")
        return
      elseif 玩家数据[id].召唤兽.数据[内容.召唤兽编号].统御 ~= nil then
        local 坐骑编号 = 玩家数据[id].召唤兽.数据[内容.召唤兽编号].统御
        if 玩家数据[id].角色.数据.坐骑列表[坐骑编号] ~= nil and 玩家数据[id].角色.数据.坐骑列表[坐骑编号].统御召唤兽 ~= nil then
          if 玩家数据[id].角色.数据.坐骑列表[坐骑编号].统御召唤兽[1] ~= nil  and 玩家数据[id].角色.数据.坐骑列表[坐骑编号].统御召唤兽[1] == 内容.召唤兽编号 then
            常规提示(id,"#Y该召唤兽被"..玩家数据[id].角色.数据.坐骑列表[玩家数据[id].召唤兽.数据[内容.召唤兽编号].统御].名称.."统御中,请解除统御后再进行此操作")
            return
          elseif 玩家数据[id].角色.数据.坐骑列表[坐骑编号].统御召唤兽[2] ~= nil  and 玩家数据[id].角色.数据.坐骑列表[坐骑编号].统御召唤兽[2] == 内容.召唤兽编号 then
            常规提示(id,"#Y该召唤兽被"..玩家数据[id].角色.数据.坐骑列表[玩家数据[id].召唤兽.数据[内容.召唤兽编号].统御].名称.."统御中,请解除统御后再进行此操作")
            return
          end
        end
      end
      玩家数据[id].角色.数据.坐骑列表[序列].统御召唤兽[#玩家数据[id].角色.数据.坐骑列表[序列].统御召唤兽+1] = 内容.召唤兽编号
      玩家数据[id].召唤兽.数据[内容.召唤兽编号].统御 = 序列
      玩家数据[id].召唤兽.数据[内容.召唤兽编号].统御属性.力量 =math.ceil(玩家数据[id].角色.数据.坐骑列表[序列].力量*0.1)
      玩家数据[id].召唤兽.数据[内容.召唤兽编号].统御属性.魔力 =math.ceil(玩家数据[id].角色.数据.坐骑列表[序列].魔力*0.1)
      玩家数据[id].召唤兽.数据[内容.召唤兽编号].统御属性.体质 =math.ceil(玩家数据[id].角色.数据.坐骑列表[序列].体质*0.1)
      玩家数据[id].召唤兽.数据[内容.召唤兽编号].统御属性.敏捷 =math.ceil(玩家数据[id].角色.数据.坐骑列表[序列].敏捷*0.1)
      玩家数据[id].召唤兽.数据[内容.召唤兽编号].统御属性.耐力 =math.ceil(玩家数据[id].角色.数据.坐骑列表[序列].耐力*0.1)
      玩家数据[id].召唤兽:刷新信息(内容.召唤兽编号,"1")
      发送数据(玩家数据[id].连接id,20,玩家数据[id].召唤兽:取存档数据(内容.召唤兽编号))
      发送数据(玩家数据[id].连接id,61.1,{编号=序列,数据=玩家数据[id].角色.数据.坐骑列表[序列]})
      常规提示(id,"#Y统御该召唤兽成功")
    end
  elseif 序号 == 91 then
    local 序列=内容.序列
    local id=内容.数字id
    local 召唤兽编号 = 玩家数据[id].角色.数据.坐骑列表[序列].统御召唤兽[内容.编号]
    if 玩家数据[id].角色.数据.坐骑列表[序列]==nil then
      常规提示(id,"#Y你没有这样的坐骑")
      return
    elseif  玩家数据[id].角色.数据.坐骑列表[序列].统御召唤兽[内容.编号] == nil then
      常规提示(id,"#Y统御信息不存在")
    elseif 玩家数据[id].召唤兽.数据[召唤兽编号] == nil then
      table.remove(玩家数据[id].角色.数据.坐骑列表[序列].统御召唤兽,内容.编号)
      常规提示(id,"#Y已经结束对该召唤兽的统御")
    else
      玩家数据[id].召唤兽.数据[召唤兽编号].统御 = nil
      玩家数据[id].召唤兽.数据[召唤兽编号].统御属性.力量 = 0
      玩家数据[id].召唤兽.数据[召唤兽编号].统御属性.魔力 = 0
      玩家数据[id].召唤兽.数据[召唤兽编号].统御属性.体质 = 0
      玩家数据[id].召唤兽.数据[召唤兽编号].统御属性.敏捷 = 0
      玩家数据[id].召唤兽.数据[召唤兽编号].统御属性.耐力 = 0
      玩家数据[id].召唤兽:刷新信息(召唤兽编号,"1")
      发送数据(玩家数据[id].连接id,20,玩家数据[id].召唤兽:取存档数据(玩家数据[id].角色.数据.坐骑列表[序列].统御召唤兽[内容.编号]))
      table.remove(玩家数据[id].角色.数据.坐骑列表[序列].统御召唤兽,内容.编号)
      常规提示(id,"#Y已经结束对该召唤兽的统御")
    end
    发送数据(玩家数据[id].连接id,61.1,{编号=序列,数据=玩家数据[id].角色.数据.坐骑列表[序列]})
  elseif 序号 == 92 then
    local 序列=内容.编号
    local id=内容.数字id
    local 经验 = 100000*内容.次数
    local 银子 = 100000*内容.次数
    if 玩家数据[id].角色.数据.坐骑列表[序列]==nil then
      常规提示(id,"#Y你没有这样的坐骑")
      return
    else
      if 取银子(id)<银子 then
          常规提示(id,"#Y/你当前的银子好像不够哟!")
          return
      elseif 玩家数据[id].角色.数据.当前经验 < 经验 then
          常规提示(id,"#Y/你当前的经验好像不够哟!")
          return
      elseif 玩家数据[id].角色.数据.等级 <= 玩家数据[id].角色.数据.坐骑列表[序列].等级 then
          常规提示(id,"#Y/坐骑等级不能超过人物等级")
          return
      end
      玩家数据[id].角色.数据.当前经验=玩家数据[id].角色.数据.当前经验-经验
      玩家数据[id].角色:扣除银子(银子,0,0,"坐骑训养",1)
      玩家数据[id].角色:坐骑喂养(序列,经验)
    end
  elseif 序号 == 92.1 then
    local 序列=内容.编号
    local id=内容.多开id
    local 主id=内容.数字id
    local 经验 = 100000*内容.次数
    local 银子 = 100000*内容.次数
    if 玩家数据[id].角色.数据.坐骑列表[序列]==nil then
      常规提示(主id,"#Y你没有这样的坐骑")
      return
    else
      if 取银子(id)<银子 then
          常规提示(主id,"#Y/你当前的银子好像不够哟!")
          return
      elseif 玩家数据[id].角色.数据.当前经验 < 经验 then
          常规提示(主id,"#Y/你当前的经验好像不够哟!")
          return
      elseif 玩家数据[id].角色.数据.等级 <= 玩家数据[id].角色.数据.坐骑列表[序列].等级 then
          常规提示(主id,"#Y/坐骑等级不能超过人物等级")
          return
      end
      玩家数据[id].角色.数据.当前经验=玩家数据[id].角色.数据.当前经验-经验
      玩家数据[id].角色:扣除银子(银子,0,0,"多开坐骑训养",1)
      玩家数据[id].角色:坐骑喂养(序列,经验)
    end
  elseif 序号 == 93 then
    local 序列=内容.编号
    local id=内容.数字id
    if 玩家数据[id].角色.数据.坐骑列表[序列]==nil then
      常规提示(id,"#Y你没有这样的坐骑")
      return
    else
      玩家数据[id].角色:坐骑加点(序列,内容.加点)
    end
  elseif 序号 == 93.1 then
    local 序列=内容.编号
    local id=内容.多开id
    local 主id=内容.数字id
    if 玩家数据[id].角色.数据.坐骑列表[序列]==nil then
      常规提示(主id,"#Y你没有这样的坐骑")
      return
    else
      玩家数据[id].角色:坐骑加点(序列,内容.加点)
    end
  elseif 序号 == 94 then
    local 序列=内容.编号
    local id=内容.数字id
    if 玩家数据[id].角色.数据.坐骑列表[序列]==nil then
      常规提示(id,"#Y你没有这样的坐骑")
      return
    elseif 取银子(id)<100000 then
      常规提示(id,"#Y/你当前的银子好像不够哟!")
      return
    else
      玩家数据[id].角色:扣除银子(100000,0,0,"坐骑洗点",1)
      玩家数据[id].角色:坐骑洗点(序列)
    end
  elseif 序号 == 94.1 then
    local 序列=内容.编号
    local id=内容.多开id
    local 主id=内容.数字id
    if 玩家数据[id].角色.数据.坐骑列表[序列]==nil then
      常规提示(主id,"#Y你没有这样的坐骑")
      return
    elseif 取银子(id)<100000 then
      常规提示(主id,"#Y/你当前的银子好像不够哟!")
      return
    else
      玩家数据[id].角色:扣除银子(100000,0,0,"多开坐骑洗点",1)
      玩家数据[id].角色:坐骑洗点(序列)
    end
  elseif 序号 == 95 then
    local 序列=内容.编号
    local id=内容.数字id
    if 玩家数据[id].角色.数据.坐骑列表[序列]==nil then
      常规提示(id,"#Y你没有这样的坐骑")
      return
    else
      玩家数据[id].角色:坐骑放生(序列)
    end
  elseif 序号 == 95.1 then
    local 序列=内容.编号
    local id=内容.多开id
    local 主id=内容.数字id
    if 玩家数据[id].角色.数据.坐骑列表[序列]==nil then
      常规提示(主id,"#Y你没有这样的坐骑")
      return
    else
      玩家数据[id].角色:坐骑放生(序列)
    end
  elseif 序号 == 96 then
    local 序列=内容.编号
    local id=内容.数字id
    for i=1,#玩家数据[id].角色.数据.坐骑列表 do
      if 玩家数据[id].角色.数据.坐骑列表[i].技能点 == nil then
        玩家数据[id].角色.数据.坐骑列表[i].技能点 = 0
      end
    end
    发送数据(玩家数据[id].连接id,61.2,玩家数据[id].角色.数据.坐骑列表)
  elseif 序号 == 96.1 then
    local 序列=内容.编号
    local 主id=内容.数字id
    local id=内容.多开id
    for i=1,#玩家数据[id].角色.数据.坐骑列表 do
      if 玩家数据[id].角色.数据.坐骑列表[i].技能点 == nil then
        玩家数据[id].角色.数据.坐骑列表[i].技能点 = 0
      end
    end
    发送数据(玩家数据[主id].连接id,61.8,玩家数据[id].角色.数据.坐骑列表)
  elseif 序号 == 97 then
    local 序列=内容.编号
    local id=内容.数字id
    if 玩家数据[id].角色.数据.坐骑列表[序列]==nil then
      常规提示(id,"#Y你没有这样的坐骑")
      return
    elseif 取银子(id)<1000 then
      常规提示(id,"#Y/你当前的银子好像不够哟!")
      return
    else
      玩家数据[id].角色:扣除银子(1000,0,0,"坐骑喂养",1)
      if 玩家数据[id].角色.数据.坐骑列表[序列].忠诚 >= 50 then
        玩家数据[id].角色.数据.坐骑列表[序列].忠诚 = 玩家数据[id].角色.数据.坐骑列表[序列].忠诚 + 取随机数(3,6)
      else
        玩家数据[id].角色.数据.坐骑列表[序列].忠诚 = 玩家数据[id].角色.数据.坐骑列表[序列].忠诚 + 取随机数(6,10)
      end
      if 玩家数据[id].角色.数据.坐骑列表[序列].忠诚>= 100 then
        玩家数据[id].角色.数据.坐骑列表[序列].忠诚 = 100
      end
      玩家数据[id].角色:坐骑刷新(序列)
    end

  elseif 序号 == 97.1 then
    local 序列=内容.编号
    local id=内容.多开id
    local 主id=内容.数字id
    if 玩家数据[id].角色.数据.坐骑列表[序列]==nil then
      常规提示(主id,"#Y你没有这样的坐骑")
      return
    elseif 取银子(id)<1000 then
      常规提示(主id,"#Y/你当前的银子好像不够哟!")
      return
    else
      玩家数据[id].角色:扣除银子(1000,0,0,"多开坐骑喂养",1)
      if 玩家数据[id].角色.数据.坐骑列表[序列].忠诚 >= 50 then
        玩家数据[id].角色.数据.坐骑列表[序列].忠诚 = 玩家数据[id].角色.数据.坐骑列表[序列].忠诚 + 取随机数(3,6)
      else
        玩家数据[id].角色.数据.坐骑列表[序列].忠诚 = 玩家数据[id].角色.数据.坐骑列表[序列].忠诚 + 取随机数(6,10)
      end
      if 玩家数据[id].角色.数据.坐骑列表[序列].忠诚>= 100 then
        玩家数据[id].角色.数据.坐骑列表[序列].忠诚 = 100
      end
      玩家数据[id].角色:坐骑刷新(序列)
    end



  elseif 序号 == 98 then
    local 序列=内容.编号
    local id=内容.数字id
    if 玩家数据[id].角色.数据.坐骑列表[序列]==nil then
      常规提示(id,"#Y你没有这样的坐骑")
      return
    elseif 玩家数据[id].角色.数据.坐骑列表[序列].技能点<1 then
      常规提示(id,"#Y你没有足够的技能点")
      return
    else
      local 编号 = 内容.技能编号
      local 技能名称 = 内容.名称
      if 玩家数据[id].角色.数据.坐骑列表[序列].技能[编号] ~= nil  and 玩家数据[id].角色.数据.坐骑列表[序列].技能[编号] == 技能名称 then
        if 玩家数据[id].角色.数据.坐骑列表[序列].技能等级 == nil then
          玩家数据[id].角色.数据.坐骑列表[序列].技能等级 = {}
        end
        if 玩家数据[id].角色.数据.坐骑列表[序列].技能等级[编号] == nil then
          玩家数据[id].角色.数据.坐骑列表[序列].技能等级[编号] = 1
          玩家数据[id].角色.数据.坐骑列表[序列].技能点 = 玩家数据[id].角色.数据.坐骑列表[序列].技能点 -1
          发送数据(玩家数据[id].连接id,61.1,{编号=序列,数据=玩家数据[id].角色.数据.坐骑列表[序列]})
        elseif 玩家数据[id].角色.数据.坐骑列表[序列].技能等级[编号] >= 3 then
          常规提示(id,"#Y该技能以及升到顶级")
          return
        else
          玩家数据[id].角色.数据.坐骑列表[序列].技能等级[编号] = 玩家数据[id].角色.数据.坐骑列表[序列].技能等级[编号] + 1
          玩家数据[id].角色.数据.坐骑列表[序列].技能点 = 玩家数据[id].角色.数据.坐骑列表[序列].技能点 -1
          if  玩家数据[id].角色.数据.坐骑列表[序列].技能等级[编号] >= 3 then
            玩家数据[id].角色.数据.坐骑列表[序列].技能[编号] = "高级"..技能名称
          end
          发送数据(玩家数据[id].连接id,61.1,{编号=序列,数据=玩家数据[id].角色.数据.坐骑列表[序列]})
          常规提示(id,"#Y技能升级成功")
        end
      end
    end
  elseif 序号 == 98.1 then
    local 序列=内容.编号
    local id=内容.多开id
    local 主id=内容.数字id
    if 玩家数据[id].角色.数据.坐骑列表[序列]==nil then
      常规提示(主id,"#Y你没有这样的坐骑")
      return
    elseif 玩家数据[id].角色.数据.坐骑列表[序列].技能点<1 then
      常规提示(主id,"#Y你没有足够的技能点")
      return
    else
      local 编号 = 内容.技能编号
      local 技能名称 = 内容.名称
      if 玩家数据[id].角色.数据.坐骑列表[序列].技能[编号] ~= nil  and 玩家数据[id].角色.数据.坐骑列表[序列].技能[编号] == 技能名称 then
        if 玩家数据[id].角色.数据.坐骑列表[序列].技能等级 == nil then
          玩家数据[id].角色.数据.坐骑列表[序列].技能等级 = {}
        end
        if 玩家数据[id].角色.数据.坐骑列表[序列].技能等级[编号] == nil then
          玩家数据[id].角色.数据.坐骑列表[序列].技能等级[编号] = 1
          玩家数据[id].角色.数据.坐骑列表[序列].技能点 = 玩家数据[id].角色.数据.坐骑列表[序列].技能点 -1
          发送数据(玩家数据[id].连接id,61.7,{编号=序列,数据=玩家数据[id].角色.数据.坐骑列表[序列]})----------
        elseif 玩家数据[id].角色.数据.坐骑列表[序列].技能等级[编号] >= 3 then
          常规提示(主id,"#Y该技能以及升到顶级")
          return
        else
          玩家数据[id].角色.数据.坐骑列表[序列].技能等级[编号] = 玩家数据[id].角色.数据.坐骑列表[序列].技能等级[编号] + 1
          玩家数据[id].角色.数据.坐骑列表[序列].技能点 = 玩家数据[id].角色.数据.坐骑列表[序列].技能点 -1
          if  玩家数据[id].角色.数据.坐骑列表[序列].技能等级[编号] >= 3 then
            玩家数据[id].角色.数据.坐骑列表[序列].技能[编号] = "高级"..技能名称
          end
          发送数据(玩家数据[id].连接id,61.7,{编号=序列,数据=玩家数据[id].角色.数据.坐骑列表[序列]})
          常规提示(主id,"#Y技能升级成功")
        end
      end
    end
  elseif 序号 == 99 then
    炼丹查看[内容.数字id] = nil
  elseif 序号 == 99.1 then
    游戏活动类:炼丹下注(内容)
  elseif 序号 == 100 then
    local id = 内容.数字id
    if 内充开启 then
      local 充值回执 = 处理充值(内容.卡号)

      if 充值回执  == "0" then
        常规提示(id,"#Y该卡号不存在！")
        return
      elseif 充值回执 == "已使用" then
        常规提示(id,"#Y该卡号已被使用！")
        return
      elseif tonumber(充值回执) == nil then
        常规提示(id,"#Y该卡号面值异常请联系管理员处理！111")
        return
      elseif tonumber(充值回执) == 1 then
        local 经验 = 88800
        if VIP数据[id]==nil then
          VIP数据[id].VIP经验 = 0
          VIP数据[id].VIP1状态 = false
          VIP数据[id].VIP2状态 = false
          VIP数据[id].VIP3状态 = false
          VIP数据[id].VIP4状态 = false
          VIP数据[id].VIP5状态 = false
        end
        VIP数据[id].VIP经验= 经验
        常规提示(id,"#Y你获得了"..经验.."积分！请重新打开界面领取VIP")
      else
        常规提示(id,"#Y充值点卡成功！")
        local 点卡=f函数.读配置(程序目录..[[data\]]..玩家数据[id].账号..[[\账号信息.txt]],"账号配置","点卡") + 0
        点卡 = 点卡 + tonumber(充值回执)
        f函数.写配置(程序目录..[[data\]]..玩家数据[id].账号..[[\账号信息.txt]],"账号配置","点卡",点卡)
        local 日志=读入文件([[data\]]..玩家数据[id].账号..[[\消费记录.txt]])
        日志=日志.."\n"..时间转换(os.time())..format("。以下为具体信息：增加数额为%s点点卡，增加之后剩余点卡%s点。本次操作的角色id为%s#分割符\n",充值回执+0,点卡,id)
        写出文件([[data\]]..玩家数据[id].账号..[[\消费记录.txt]],日志)
        VIP数据[id].VIP经验 = 点卡
        常规提示(id,"#Y你获得了"..点卡.."积分！请重新打开界面领取VIP")
        发送数据(玩家数据[id].连接id,91.1,{点卡=点卡})
        __S服务:输出(玩家数据[id].账号.."使用充值卡【"..内容.卡号.."】充值"..充值回执.."点卡成功！")
      end
    else
      常规提示(id,"#Y内充系统异常,请联系管理员处理！")
    end
  elseif 序号 == 100.1 then
    local id = 内容.数字id
    local 消耗数额 = math.ceil(内容.数额/兑换比例)
    local 点卡=f函数.读配置(程序目录..[[data\]]..玩家数据[id].账号..[[\账号信息.txt]],"账号配置","点卡") + 0
    local 之前 = 点卡
    if 点卡 < 消耗数额 then
      常规提示(id,"#Y你没有这么多的点卡可以使用！")
      return
    else
      常规提示(id,"#Y兑换仙玉成功！")
      点卡 = 点卡 - 消耗数额
      f函数.写配置(程序目录..[[data\]]..玩家数据[id].账号..[[\账号信息.txt]],"账号配置","点卡",点卡)
      local 日志=读入文件([[data\]]..玩家数据[id].账号..[[\消费记录.txt]])
      日志=日志.."\n"..时间转换(os.time())..format("。以下为具体扣费信息：扣除数额为%s点点卡，扣除之前点卡数额为%s点，扣除之后剩余点卡%s点。本次操作的角色id为%s#分割符\n",消耗数额,之前,点卡,id)
      写出文件([[data\]]..玩家数据[id].账号..[[\消费记录.txt]],日志)
      添加仙玉(内容.数额,玩家数据[id].账号,id,"点卡兑换")
      发送数据(玩家数据[id].连接id,91.1,{点卡=点卡})
    end
  elseif 序号 == 100.2 then
    local id = 内容.数字id
    if 内充开启 then
      local 充值回执 = 处理充值(内容.卡号)
      if 充值回执  == "0" then
        常规提示(id,"#Y该卡号不存在！")
        return
      elseif 充值回执 == "已使用" then
        常规提示(id,"#Y该卡号已被使用！")
        return
      elseif tonumber(充值回执) == nil then
        常规提示(id,"#Y该卡号面值异常请联系管理员处理！222")
        return
      else
        常规提示(id,"#Y充值点卡成功！")
        local 点卡=f函数.读配置(程序目录..[[data\]]..玩家数据[id].账号..[[\账号信息.txt]],"账号配置","点卡") + 0
        点卡 = 点卡 + tonumber(充值回执)
        f函数.写配置(程序目录..[[data\]]..玩家数据[id].账号..[[\账号信息.txt]],"账号配置","点卡",点卡)
        local 日志=读入文件([[data\]]..玩家数据[id].账号..[[\消费记录.txt]])
        日志=日志.."\n"..时间转换(os.time())..format("。以下为具体信息：增加数额为%s点点卡，增加之后剩余点卡%s点。本次操作的角色id为%s#分割符\n",充值回执+0,点卡,id)
        写出文件([[data\]]..玩家数据[id].账号..[[\消费记录.txt]],日志)
        发送数据(玩家数据[id].连接id,92.1,{点卡=点卡})
        __S服务:输出(玩家数据[id].账号.."使用充值卡【"..内容.卡号.."】充值"..充值回执.."点卡成功！")
      end
    else
      常规提示(id,"#Y内充系统异常,请联系管理员处理！")
    end
  elseif 序号 == 100.3 then
    local id = 内容.数字id
    local 消耗数额 = math.ceil(内容.数额/兑换比例)
    local 点卡=f函数.读配置(程序目录..[[data\]]..玩家数据[id].账号..[[\账号信息.txt]],"账号配置","点卡") + 0
    local 之前 = 点卡
    if 点卡 < 消耗数额 then
      常规提示(id,"#Y你没有这么多的点卡可以使用！")
      return
    else
      常规提示(id,"#Y兑换仙玉成功！")
      点卡 = 点卡 - 消耗数额
      f函数.写配置(程序目录..[[data\]]..玩家数据[id].账号..[[\账号信息.txt]],"账号配置","点卡",点卡)
      local 日志=读入文件([[data\]]..玩家数据[id].账号..[[\消费记录.txt]])
      日志=日志.."\n"..时间转换(os.time())..format("。以下为具体扣费信息：扣除数额为%s点点卡，扣除之前点卡数额为%s点，扣除之后剩余点卡%s点。本次操作的角色id为%s#分割符\n",消耗数额,之前,点卡,id)
      写出文件([[data\]]..玩家数据[id].账号..[[\消费记录.txt]],日志)
      添加仙玉(内容.数额,玩家数据[id].账号,id,"点卡兑换")
      发送数据(玩家数据[id].连接id,92.1,{点卡=点卡})
    end
  elseif 序号 == 101 then
    local id = 内容.数字id
    local 任务id=玩家数据[id].角色:取任务(7758)
    if 任务id==0 then
      常规提示(id,"#Y/你没有这样的任务")
      return
    elseif 检查格子(id)==false then
      常规提示(id,"#Y/你身上没有足够的空间")
      return
    end
    local 类型 =内容.类型
    if 类型 == 1 or 类型 == 2 or 类型 == 3 then
      local 星级 = 任务数据[任务id].星级
      if 类型 == 3 then
        local a=1
        local 通用特技 = {"修罗咒","天衣无缝","气疗术","心疗术","命疗术","凝气诀","凝神诀","气归术","命归术","四海升平","回魂咒","起死回生","水清诀","冰清诀","玉清诀","晶清诀","弱点击破","冥王爆杀","放下屠刀","河东狮吼","碎甲术","破甲术","破血狂攻","罗汉金钟","慈航普渡","太极护法","光辉之甲","圣灵之甲","野兽之力","魔兽之印","流云诀","啸风诀","笑里藏刀","绝幻魔音","凝滞术","停陷术","破碎无双"}
        for i=1,#通用特技 do
          if 内容.数据 == 通用特技[i] then
            a=2
          end
        end
        if a == 1 then
          常规提示(id,"#Y/请检查输入的特技是否正确")
          return
        end
      elseif 类型 == 2 then
        if 内容.数据 == "愤怒" or 内容.数据 == "暴怒" then
          if 任务数据[任务id].序列 ~= 22 then
            常规提示(id,"#Y/暴怒和愤怒只能给腰带使用")
            return
          end
        end
      elseif 类型 == 1 then
        if 内容.双加1 == 内容.双加2  then
          常规提示(id,"#Y/双加属性不能相同")
          return
        elseif 任务数据[任务id].序列 ~= 21 and 任务数据[任务id].序列 > 18 then
          常规提示(id,"#Y/双加只有武器和衣服可以指定")
          return
        end
      end
      if 玩家数据[id].角色:扣除仙玉((星级+1)*10000,"指定系统",id) then
        if 类型 == 1 then
          任务数据[任务id].指定.双加 = {[1]=内容.双加1,[2]=内容.双加2}
        elseif 类型 == 2 then
          任务数据[任务id].指定.特效 = 内容.数据
        elseif 类型 == 3 then
          任务数据[任务id].指定.特技 = 内容.数据
        end
        常规提示(id,"#Y/指定数据成功")
      else
        常规提示(id,"#Y/你没有这么多的仙玉")
      end
    elseif 类型 == 4 then
      玩家数据[id].装备:添加熔合装备属性(id,任务id)
    end
  -- elseif 序号 == 102 then
  --   玩家数据[内容.数字id].孩子:数据处理(内容.数字id,内容)

---------------摩托修改新增功能回调数据-------飞行
    elseif 序号 == 103 then
  local id = 内容.数字id

  local 信息 = 取随机数(1,5)
   发送数据(玩家数据[id].连接id,132,信息)

 --  end

 -- end
  elseif 序号 == 103.1 then
    local id = 内容.数字id
    if 玩家数据[id].角色.数据.等级 < 1 then
      发送数据(玩家数据[id].连接id, 7, "#y/需要等级大于60")
      return 0
    end
    if 玩家数据[id].角色.数据.飞行时间限制 ==nil then
      玩家数据[id].角色.数据.飞行时间限制=os.time()
    end
    if 玩家数据[id].角色.数据.飞行时间限制> os.time() then
          日期提示=os.date("%Y", 玩家数据[id].角色.数据.飞行时间限制).."年"..os.date("%m", 玩家数据[id].角色.数据.飞行时间限制).."月"..os.date("%d", 玩家数据[id].角色.数据.飞行时间限制).."日 "
        时间提示=os.date("%X", 玩家数据[id].角色.数据.飞行时间限制)
        常规提示(id,"#Y/你的VIP状态#R"..日期提示..时间提示.."#Y前有效")
   -- if  月卡数据[id] ==true  then
    if 玩家数据[id].道具:取飞行限制(id)==false then
       地图处理类:跳转地图(id,内容[1],内容[2],内容[3])
       常规提示(id,"#Y/VIP月卡传送成功！")
       end
    else
        常规提示(id,"#Y/你不是尊贵的月卡用户，无法为您提供月卡传送服务哦！")
    end

     elseif 序号 == 104 then
     local id= 内容.数字id
    if 玩家数据[id].角色.数据.月卡激活 == nil then
       玩家数据[id].角色.数据.月卡激活 = 0
    end
    if 玩家数据[id].角色.数据.累计充值==nil or 玩家数据[id].角色.数据.累计充值 <0 then
    玩家数据[id].角色.数据.累计充值=0
    end
    if 玩家数据[id].角色.数据.累充奖励==nil then
    玩家数据[id].角色.数据.累充奖励={[1]=false,[2]=false,[3]=false,[4]=false,[5]=false,[6]=false,[7]=false,[8]=false,[9]=false,[10]=false,已领次数=0}
    end
    local 抓鬼天数=0
    if 自动抓鬼数据[id] then
     抓鬼天数=自动抓鬼数据[id].天数
    end

    发送数据(玩家数据[id].连接id,133,{累计金额 = 玩家数据[id].角色.数据.累计充值,累充奖励=玩家数据[id].角色.数据.累充奖励,月卡激活=玩家数据[id].角色.数据.月卡激活,自动抓鬼天数=抓鬼天数})

    elseif 序号 == 104.1 then
        local id= 内容.数字id
        if 活动次数查询(id,"每日月卡奖励")==false then
        return
        elseif 玩家数据[id].角色:取道具格子2()<=5 then
         常规提示(id,"您的道具栏物品已经满啦")
        return 0
        end
        if 玩家数据[id].角色.数据.飞行时间限制 ==nil then
        玩家数据[id].角色.数据.飞行时间限制=os.time()
        end

        if 玩家数据[id].角色.数据.飞行时间限制> os.time() then
        添加活动次数(id,"每日月卡奖励")
        玩家数据[id].角色:添加银子(5000000,"月卡",1)
        玩家数据[id].角色:添加经验(5000000,"月卡",1)
        local 书铁等级=math.random(10,15)
        local aa=取随机数(1,3)
        玩家数据[id].道具:给予书铁(id,{书铁等级,书铁等级},"精铁")
        玩家数据[id].道具:给予书铁(id,{书铁等级,书铁等级},"指南书")
        local 名称="灵饰指南书"
        玩家数据[id].道具:给予道具(id,"灵饰指南书",{10,14})
        常规提示(id,"#Y/你获得了"..名称)
        local 名称1="元灵晶石"
        玩家数据[id].道具:给予道具(id,"元灵晶石",{10,14})
        常规提示(id,"#Y/你获得了"..名称)
        玩家数据[id].道具:给予道具(id,"神兜兜",aa)
        玩家数据[id].角色.数据.自动开关.高级飞行棋=玩家数据[id].角色.数据.自动开关.高级飞行棋+200
        添加仙玉(math.random(100,200),玩家数据[id].账号,id,"月卡")
        常规提示(id,"#Y/你领取了每日月卡礼包奖励")
        else
        常规提示(id,"#Y/你不是尊贵的月卡用户，无法领取")
        end

        elseif 序号 == 105.1 then --一键师门
        local id= 内容.数字id
        if 活动次数查询(id,"月卡师门奖励")==false then
        return
        end
        if 玩家数据[id].角色.数据.飞行时间限制 ==nil then
        玩家数据[id].角色.数据.飞行时间限制=os.time()
        end
        if 玩家数据[id].角色.数据.飞行时间限制> os.time() then
        添加活动次数(id,"月卡师门奖励")
        玩家数据[id].角色:添加银子(100000,"月卡",1)
        玩家数据[id].角色:添加经验(100000,"月卡",1)
        玩家数据[id].道具:给予书铁(id,{10,11},"精铁")
        玩家数据[id].道具:给予书铁(id,{10,11},"指南书")
        常规提示(id,"#Y/你获得了#G[100-110级书铁]#")
        else
        常规提示(id,"#Y/你不是尊贵的月卡用户，无法领取")
        end

        elseif 序号 == 105.2 then --一键抓鬼
        local id= 内容.数字id
        if 活动次数查询(id,"月卡抓鬼奖励")==false then
        return
        end
        if 玩家数据[id].角色.数据.飞行时间限制 ==nil then
        玩家数据[id].角色.数据.飞行时间限制=os.time()
        end
        if 玩家数据[id].角色.数据.飞行时间限制> os.time() then
        添加活动次数(id,"月卡抓鬼奖励")
        玩家数据[id].角色:添加银子(100000,"月卡",1)
        玩家数据[id].角色:添加经验(100000,"月卡",1)
        玩家数据[id].道具:给予书铁(id,{10,11},"精铁")
        玩家数据[id].道具:给予书铁(id,{10,11},"指南书")
        常规提示(id,"#Y/你获得了#G[100-110级书铁]#")
        else
        常规提示(id,"#Y/你不是尊贵的月卡用户，无法领取")
        end

        elseif 序号 == 105.3 then --一键封妖
        local id= 内容.数字id
        if 活动次数查询(id,"月卡押镖奖励")==false then
        return
        end
        if 玩家数据[id].角色.数据.飞行时间限制 ==nil then
        玩家数据[id].角色.数据.飞行时间限制=os.time()
        end
        if 玩家数据[id].角色.数据.飞行时间限制> os.time() then
        添加活动次数(id,"月卡押镖奖励")
        玩家数据[id].角色:添加银子(100000,"月卡",1)
        玩家数据[id].角色:添加经验(100000,"月卡",1)
        玩家数据[id].道具:给予道具(id,"灵饰指南书",{8,10})
        玩家数据[id].道具:给予道具(id,"元灵晶石",{8,10})
        常规提示(id,"#Y/你获得了#G[80-100级灵饰书铁]#")
        else
        常规提示(id,"#Y/你不是尊贵的月卡用户，无法领取")
        end

        elseif 序号 == 105.4 then --一键官职
        local id= 内容.数字id
        if 活动次数查询(id,"月卡官职奖励")==false then
        return
        end
        if 玩家数据[id].角色.数据.飞行时间限制 ==nil then
        玩家数据[id].角色.数据.飞行时间限制=os.time()
        end
        if 玩家数据[id].角色.数据.飞行时间限制> os.time() then
        添加活动次数(id,"月卡官职奖励")
        玩家数据[id].角色:添加银子(100000,"月卡",1)
        玩家数据[id].角色:添加经验(100000,"月卡",1)
        玩家数据[id].道具:给予道具(id,"灵饰指南书",{8,10})
        玩家数据[id].道具:给予道具(id,"元灵晶石",{8,10})
        常规提示(id,"#Y/你获得了#G[80-100级灵饰书铁]#")
        else
        常规提示(id,"#Y/你不是尊贵的月卡用户，无法领取")
        end

     elseif 序号 == 104.2 then
      local id = 内容.数字id
      local 点卡 = f函数.读配置(程序目录..[[data\]]..玩家数据[id].账号..[[\账号信息.txt]],"账号配置","点卡")+0
      local 消耗点卡=75
           if 玩家数据[id].角色.数据.月卡领取 and 玩家数据[id].角色.数据.月卡领取>=1 then
              return 常规提示(id,"您当前的月卡还未过期")
           elseif 玩家数据[id].角色:扣除点卡(消耗点卡,"购买月卡",id)==false then
              return 常规提示(id,"激活月卡需要75点卡")
           elseif 玩家数据[id].角色.数据.月卡领取==nil or 玩家数据[id].角色.数据.月卡领取 < 1 then
              玩家数据[id].角色.数据.月卡激活=1
              玩家数据[id].角色.数据.月卡领取=30
              玩家数据[id].角色.数据.一键师门=30
              玩家数据[id].角色.数据.一键封妖=30
              玩家数据[id].角色.数据.一键抓鬼=30
              玩家数据[id].角色.数据.一键官职=30
              玩家数据[id].角色.数据.飞行时间限制=os.time()+2592000
              常规提示(id,"你扣除75点卡")
              return 常规提示(id,"恭喜您成功激活了月卡")
           end

elseif 序号 == 105 then
  local id=内容.数字id
  发送数据(玩家数据[id].连接id,134,玩家数据[id].角色.数据.银子)
  elseif 序号 == 115.1 then
  local id=内容.数字id
  local 充值比例=1

  if 玩家数据[id].角色.数据.银子 >= 300 then
    充值比例=1
    玩家数据[id].角色.数据.元宝.充值比例=充值比例
  elseif 玩家数据[id].角色.数据.银子 >= 500 then
    充值比例=1
    玩家数据[id].角色.数据.元宝.充值比例=充值比例
  elseif 玩家数据[id].角色.数据.银子 >= 800  then
    充值比例=1
    玩家数据[id].角色.数据.元宝.充值比例=充值比例
  elseif 玩家数据[id].角色.数据.银子 >= 1000  then
    充值比例=1
    玩家数据[id].角色.数据.元宝.充值比例=充值比例
  elseif 玩家数据[id].角色.数据.银子 >= 1200  then
    充值比例=1
    玩家数据[id].角色.数据.元宝.充值比例=充值比例
  elseif 玩家数据[id].角色.数据.银子 >= 1300  then
    充值比例=1
    玩家数据[id].角色.数据.元宝.充值比例=充值比例
  elseif 玩家数据[id].角色.数据.银子 >= 1400 then
    充值比例=1
    玩家数据[id].角色.数据.元宝.充值比例=充值比例
   elseif 玩家数据[id].角色.数据.银子 >= 1500 then
    充值比例=1
    玩家数据[id].角色.数据.元宝.充值比例=充值比例
  elseif 玩家数据[id].角色.数据.银子 >= 1600 then
    充值比例=1
    玩家数据[id].角色.数据.元宝.充值比例=充值比例
  elseif 玩家数据[id].角色.数据.银子 >= 1700 then
    充值比例=1
    玩家数据[id].角色.数据.元宝.充值比例=充值比例
  elseif 玩家数据[id].角色.数据.银子 >= 1800 then
    充值比例=1
    玩家数据[id].角色.数据.元宝.充值比例=充值比例
  elseif 玩家数据[id].角色.数据.银子 >= 1900 then
    充值比例=1
    玩家数据[id].角色.数据.元宝.充值比例=充值比例
  elseif 玩家数据[id].角色.数据.银子 >= 2000 then
    充值比例=1
    玩家数据[id].角色.数据.元宝.充值比例=充值比例
  elseif 玩家数据[id].角色.数据.银子 >= 2100 then
    充值比例=1
    玩家数据[id].角色.数据.元宝.充值比例=充值比例
  elseif 玩家数据[id].角色.数据.银子 >= 2200 then
    充值比例=1
    玩家数据[id].角色.数据.元宝.充值比例=充值比例
  elseif 玩家数据[id].角色.数据.银子 >= 2300 then
    充值比例=1
    玩家数据[id].角色.数据.元宝.充值比例=充值比例
  elseif 玩家数据[id].角色.数据.银子 >= 2400 then
    充值比例=1
    玩家数据[id].角色.数据.元宝.充值比例=充值比例
  elseif 玩家数据[id].角色.数据.银子 >= 2500 then
    充值比例=1
    玩家数据[id].角色.数据.元宝.充值比例=充值比例

  end
  发送数据(玩家数据[id].连接id,134.1,玩家数据[id].角色.数据.元宝)
----自动挂机
  elseif  序号 == 104.51 then
      local id=内容.数字id
         self:切换挂机任务类型(id,内容)
  elseif  序号 == 104.61 then
       local id=内容.数字id
      if 玩家数据[id].角色.数据.等级<15 then
         常规提示(id,"#Y/自动任务需要等级最少15级,请努力提升等级#37")
        return
      end
       玩家数据[id].角色.数据.自动开关.执行=true
       if 玩家数据[id].角色.数据.自动开关.是否挂机==nil then
          玩家数据[id].角色.数据.自动开关.是否挂机=false
       end
       玩家数据[id].角色.数据.自动开关.是否挂机=true
       发送数据(玩家数据[id].连接id,31,玩家数据[id].角色:取总数据())
       发送数据(玩家数据[id].连接id,164)
      自动挂机类:判断任务类型(id)
       常规提示(id,"#Y/你已经开启了自动挂机#37")
  elseif  序号 == 104.62 then
       local id=内容.数字id
       自动挂机类:判断任务类型(id)
       玩家数据[id].角色.数据.自动开关.执行=false
       发送数据(玩家数据[id].连接id,31,玩家数据[id].角色:取总数据())
       常规提示(id,"#Y/自动挂机已经取消#37")

------自动任务
  elseif  序号 == 105.51 then
      local id=内容.数字id
         self:切换自动任务类型(id,内容)
  elseif  序号 == 106.61 then
      local id=内容.数字id
      if 玩家数据[id].角色.数据.等级<15 then
         常规提示(id,"#Y/自动任务需要等级最少15级,请努力提升等级#37")
        return
      end
       玩家数据[id].角色.数据.自动开关.执行=true
       if 玩家数据[id].角色.数据.自动开关.是否挂机==nil then
          玩家数据[id].角色.数据.自动开关.是否挂机=false
       end
       玩家数据[id].角色.数据.自动开关.是否挂机=false
       发送数据(玩家数据[id].连接id,31,玩家数据[id].角色:取总数据())
       发送数据(玩家数据[id].连接id,164)
       常规提示(id,"#Y/你已经开启了自动任务#37")
  elseif  序号 == 106.62 then
       local id=内容.数字id
       玩家数据[id].角色.数据.自动开关.执行=false
       发送数据(玩家数据[id].连接id,31,玩家数据[id].角色:取总数据())
       常规提示(id,"#Y/自动执行已经取消#37")
  elseif  序号 == 106.71 then ---退出战斗按钮
      local id=内容.数字id
      if 玩家数据[id].观战~=nil then
        常规提示(id,"#Y/观战中不能使用该命令")
        return
      elseif 玩家数据[id].队伍~=0 and 玩家数据[id].队伍~=id then
        常规提示(id,"#Y/只有队长才可以使用该命令")
        return
      elseif 玩家数据[id].战斗==0 and 战斗准备类.战斗盒子[玩家数据[id].战斗]==nil then
        常规提示(id,"#Y/你并没有在战斗中,往哪退出战斗！")
        return
      elseif 战斗准备类.战斗盒子[玩家数据[id].战斗].战斗类型 == 100252 or 战斗准备类.战斗盒子[玩家数据[id].战斗].战斗类型 == 100253 or 战斗准备类.战斗盒子[玩家数据[id].战斗].战斗类型 == 300001 then
        常规提示(id,"#Y/特殊战斗没办法退出,必须打")
        return
      elseif 战斗准备类.战斗盒子[玩家数据[id].战斗].战斗类型 == 100228 or 战斗准备类.战斗盒子[玩家数据[id].战斗].战斗类型 == 100001
      or 战斗准备类.战斗盒子[玩家数据[id].战斗].战斗类型 == 100238 or 战斗准备类.战斗盒子[玩家数据[id].战斗].战斗类型 == 100019
      or 战斗准备类.战斗盒子[玩家数据[id].战斗].战斗类型 == 100012 or 战斗准备类.战斗盒子[玩家数据[id].战斗].战斗类型 == 100222
      or 战斗准备类.战斗盒子[玩家数据[id].战斗].战斗类型 == 200004 or 战斗准备类.战斗盒子[玩家数据[id].战斗].战斗类型 == 410005
      or 战斗准备类.战斗盒子[玩家数据[id].战斗].战斗类型 == 110001 then
        if os.time() - 战斗准备类.战斗盒子[玩家数据[id].战斗].战斗计时 < 20 then
          常规提示(id,"#Y/该场战斗未满#Y20秒，无法退出")
          return
        end
      end
      if 战斗准备类.战斗盒子[玩家数据[id].战斗]:取玩家战斗()==false  then
         战斗准备类.战斗盒子[玩家数据[id].战斗]:结束战斗(0,玩家数据[id].队伍)
      else
        if 玩家数据[id].角色:扣除银子(100000,0,0,"退出PK扣钱",1) then
          战斗准备类.战斗盒子[玩家数据[id].战斗]:结束战斗(0,玩家数据[id].队伍)
          常规提示(id,"#Y/扣你10W银子\n#R建议不是长时间卡战斗\n#G不要在PVP战斗中使用")
        end
      end











elseif 序号 == 116 then
  local id = 内容.数字id
     玩家数据[id].道具:一键出售处理(连接id,id)
elseif 序号 == 115.2 then
  local id=内容.数字id
  local 序列 = 内容.序列
  if 序列 == 1 then

    if 玩家数据[id].角色.数据.累计充值 < 100 then-- 领取条件修改处
      常规提示(id,"充值的金额不足以领取该奖励")
      return
    end
    if 玩家数据[id].角色.数据.累充奖励[1] == true then--判断是否领取处理
      常规提示(id,"您已经领取服此奖励，无法重复领取")
      return
    elseif 玩家数据[id].角色:取道具格子2()<=5 then
      常规提示(id,"您的道具栏物品已经满啦")
      return 0
    else
        玩家数据[id].角色.数据.累充奖励[1]=true
    end
      ----------以下为奖励填写处--------------
        玩家数据[id].道具:给予道具(id,"100级装备礼包")
        玩家数据[id].召唤兽:添加召唤兽1("泡泡",true,nil,nil,0,nil,nil,{"高级连击","高级必杀","高级偷袭","高级夜战","高级吸血","高级神佑复生"})


    常规提示(id,"恭喜你，获得了#R/100级装备礼包*1、累充攻泡泡*1")

  elseif 序列 == 2 then
        if 玩家数据[id].角色.数据.累计充值 < 300 then-- 领取条件修改处
      常规提示(id,"充值的金额不足以领取该奖励")
      return
    end
    if 玩家数据[id].角色.数据.累充奖励[2] == true then--判断是否领取处理
      常规提示(id,"您已经领取服此奖励，无法重复领取")
      return
    elseif 玩家数据[id].角色:取道具格子2()<=5 then
      常规提示(id,"您的道具栏物品已经满啦")
      return 0
    elseif #玩家数据[id].召唤兽.数据 >= 7 then  --大于数量不操作
        常规提示(数字id,"#y/您当前无法携带更多的召唤兽了")
        return

    else
        玩家数据[id].角色.数据.累充奖励[2]=true
    end
      ----------以下为奖励填写处--------------

        玩家数据[id].道具:给予道具(id,"100级装备礼包")
        玩家数据[id].道具:给予道具(id,"100级装备礼包")
        玩家数据[id].道具:给予道具(id,"80级灵饰礼包")
        玩家数据[id].召唤兽:添加召唤兽1("泡泡",true,nil,nil,0,nil,nil,{"高级连击","高级必杀","高级偷袭","高级夜战","高级吸血","高级神佑复生"})
        玩家数据[id].召唤兽:添加召唤兽1("泡泡",true,nil,nil,0,nil,nil,{"泰山压顶","高级法术暴击","高级法术波动","高级精神集中","高级法术连击","高级神佑复生"})
        常规提示(id,"恭喜你，获得了#R/100级装备礼包*2、累充攻法泡泡各*1、80灵饰套*1")
  elseif 序列 == 3 then
        if 玩家数据[id].角色.数据.累计充值 < 500 then-- 领取条件修改处
      常规提示(id,"充值的金额不足以领取该奖励")
      return
    end
    if 玩家数据[id].角色.数据.累充奖励[3] == true then--判断是否领取处理
      常规提示(id,"您已经领取服此奖励，无法重复领取")
      return
    else
        玩家数据[id].角色.数据.累充奖励[3]=true
    end
      ----------以下为奖励填写处--------------

        玩家数据[id].道具:给予道具(id,"100级装备礼包")
        玩家数据[id].道具:给予道具(id,"100级装备礼包")
        玩家数据[id].道具:给予道具(id,"80级灵饰礼包")
        玩家数据[id].召唤兽:添加召唤兽1("泡泡",true,nil,nil,0,nil,nil,{"高级连击","高级必杀","高级偷袭","高级夜战","高级吸血","高级神佑复生"})
        玩家数据[id].召唤兽:添加召唤兽1("泡泡",true,nil,nil,0,nil,nil,{"泰山压顶","高级法术暴击","高级法术波动","高级精神集中","高级法术连击","高级神佑复生"})
        常规提示(id,"恭喜你，获得了#R/100级装备礼包*2、累充攻法泡泡各*1、80灵饰套*1")
  elseif 序列 == 4 then
        if 玩家数据[id].角色.数据.累计充值 < 1000 then-- 领取条件修改处
      常规提示(id,"充值的金额不足以领取该奖励")
      return
    end
    if 玩家数据[id].角色.数据.累充奖励[4] == true then--判断是否领取处理
      常规提示(id,"您已经领取服此奖励，无法重复领取")
      return
    elseif 玩家数据[id].角色:取道具格子2()<=2 then
      常规提示(id,"您的道具栏物品已经满啦")
      return 0
    else
        玩家数据[id].角色.数据.累充奖励[4]=true
    end
      ----------以下为奖励填写处--------------
    --自动抓鬼数据[id]={天数=9999,永久=true}

          for i=7,11 do
        玩家数据[id].角色.数据.辅助技能[i].等级=160
      end

       玩家数据[id].道具:给予道具(id,"九转金丹",10,100)
       -- 添加仙玉(20000,玩家数据[id].账号,id,"累充奖励")
    常规提示(id,"恭喜你，获得了#R/九转金丹*10、打造、炼金、裁缝、养生、健身技能全满")

  elseif 序列 == 5 then
        if 玩家数据[id].角色.数据.累计充值 < 1500 then-- 领取条件修改处
      常规提示(id,"充值的金额不足以领取该奖励")
      return
    end
    if 玩家数据[id].角色.数据.累充奖励[5] == true then--判断是否领取处理
      常规提示(id,"您已经领取服此奖励，无法重复领取")
      return
    elseif 玩家数据[id].角色:取道具格子2()<=2 then
      常规提示(id,"您的道具栏物品已经满啦")
      return 0
    else
        玩家数据[id].角色.数据.累充奖励[5]=true
    end
      ----------以下为奖励填写处--------------
    玩家数据[id].道具:给予道具(id,"100级灵饰礼包")
    玩家数据[id].道具:给予道具(id,"100级灵饰礼包")
    玩家数据[id].道具:给予道具(id,"神兜兜",100)
    玩家数据[id].道具:给予道具(id,"九转金丹",10,100)
   -- 添加仙玉(80000,玩家数据[id].账号,id,"累充奖励")
    常规提示(id,"恭喜你，获得了#R100级灵饰礼包*2、100个神兜兜、九转金丹*10")
  elseif 序列 == 6 then
        if 玩家数据[id].角色.数据.累计充值 < 3000 then-- 领取条件修改处
      常规提示(id,"充值的金额不足以领取该奖励")
      return
    end
    if 玩家数据[id].角色.数据.累充奖励[6] == true then--判断是否领取处理
      常规提示(id,"您已经领取服此奖励，无法重复领取")
      return
    elseif 玩家数据[id].角色:取道具格子2()<=5 then
      常规提示(id,"请预留5个道具栏再领取奖励")
      return 0
    else
        玩家数据[id].角色.数据.累充奖励[6]=true
    end
      ----------以下为奖励填写处--------------
     玩家数据[id].道具:给予道具(id,"120级装备礼包")
     玩家数据[id].道具:给予道具(id,"神兜兜",200)
     玩家数据[id].道具:给予道具(id,"九转金丹",10,100)
     玩家数据[id].角色:添加银子(20000000,"累充奖励")
     常规提示(id,"恭喜你，获得了#R120装备礼包*1、200个神兜兜、九转金丹*10")

  elseif 序列 == 7 then
        if 玩家数据[id].角色.数据.累计充值 < 5000 then-- 领取条件修改处
      常规提示(id,"充值的金额不足以领取该奖励")
      return
    end
    if 玩家数据[id].角色.数据.累充奖励[7] == true then--判断是否领取处理
      常规提示(id,"您已经领取服此奖励，无法重复领取")
      return
    elseif 玩家数据[id].角色:取道具格子2()<=5 then
      常规提示(id,"您的道具栏物品已经满啦")
      return 0
    else
        玩家数据[id].角色.数据.累充奖励[7]=true
    end
      ----------以下为奖励填写处--------------

     玩家数据[id].道具:给予道具(id,"120级装备礼包")
     玩家数据[id].道具:给予道具(id,"120级装备礼包")
     玩家数据[id].道具:给予道具(id,"神兜兜",300)
     玩家数据[id].道具:给予道具(id,"九转金丹",20,100)
     玩家数据[id].角色:添加银子(30000000,"累充奖励")
     常规提示(id,"恭喜你，获得了#R120级装备礼包*2、300个神兜兜、九转金丹*20")

  elseif 序列 == 8 then
        if 玩家数据[id].角色.数据.累计充值 < 8000 then-- 领取条件修改处
      常规提示(id,"充值的金额不足以领取该奖励")
      return
    end
    if 玩家数据[id].角色.数据.累充奖励[8] == true then--判断是否领取处理
      常规提示(id,"您已经领取服此奖励，无法重复领取")
      return
    elseif 玩家数据[id].角色:取道具格子2()<=10 then
      常规提示(id,"您的道具栏物品已经满啦")
      return 0
    else
        玩家数据[id].角色.数据.累充奖励[8]=true
    end
      ----------以下为奖励填写处--------------

     玩家数据[id].道具:给予道具(id,"130级装备礼包")
     玩家数据[id].道具:给予道具(id,"130级装备礼包")
     玩家数据[id].道具:给予道具(id,"神兜兜",500)
     玩家数据[id].道具:给予道具(id,"九转金丹",30,100)
     玩家数据[id].角色:添加银子(50000000,"累充奖励")
     常规提示(id,"恭喜你，获得了#R130级装备礼包*2、300个神兜兜、九转金丹*30")

  elseif 序列 == 9 then
    if 玩家数据[id].角色.数据.累计充值 < 10000 then-- 领取条件修改处
      常规提示(id,"充值的金额不足以领取该奖励")
      return
    end
    if 玩家数据[id].角色.数据.累充奖励[9] == true then--判断是否领取处理
      常规提示(id,"您已经领取服此奖励，无法重复领取")
      return
    elseif 玩家数据[id].角色:取道具格子2()<=15 then
      常规提示(id,"您的道具栏物品已经满啦")
      return 0
    else
        玩家数据[id].角色.数据.累充奖励[9]=true
    end
      ----------以下为奖励填写处--------------

     玩家数据[id].道具:给予道具(id,"140级装备礼包")
     玩家数据[id].道具:给予道具(id,"神兜兜",500)
     玩家数据[id].道具:给予道具(id,"九转金丹",50,100)
     玩家数据[id].角色:添加银子(60000000,"累充奖励")
     常规提示(id,"恭喜你，获得了#R140级装备礼包*1、500个神兜兜、九转金丹*50")

  elseif 序列 == 10 then
    if 玩家数据[id].角色.数据.累计充值 < 15000 then-- 领取条件修改处
      常规提示(id,"充值的金额不足以领取该奖励")
      return
    end
    if 玩家数据[id].角色.数据.累充奖励[10] == true then--判断是否领取处理
      常规提示(id,"您已经领取服此奖励，无法重复领取")
      return
    elseif 玩家数据[id].角色:取道具格子2()<=5 then
      常规提示(id,"您的道具栏物品已经满啦")
      return 0
    else
        玩家数据[id].角色.数据.累充奖励[10]=true
    end
      ----------以下为奖励填写处--------------

     玩家数据[id].道具:给予道具(id,"150级装备礼包")
     玩家数据[id].道具:给予道具(id,"神兜兜",800)
     玩家数据[id].道具:给予道具(id,"九转金丹",100,100)
     玩家数据[id].角色:添加银子(50000000,"累充奖励")
     常规提示(id,"恭喜你，获得了#R150级装备套*1、800个神兜兜、九转金丹*100")

  end
  发送数据(玩家数据[id].连接id,133,{累计金额 = 玩家数据[id].角色.数据.累计充值,累充奖励=玩家数据[id].角色.数据.累充奖励,月卡激活=玩家数据[id].角色.数据.月卡激活})
  elseif 序号 == 106.2 then
    local id = 内容.数字id
    local 传送选中 = 0
    if 内容.选中==4 then
    地图处理类:跳转地图(id,1111,175,122)
    elseif 内容.选中==5 then
    地图处理类:跳转地图(id,1140,20,18)
    elseif 内容.选中==6 then
    地图处理类:跳转地图(id,1116,71,77)
    elseif 内容.选中==7 then
    地图处理类:跳转地图(id,1150,40,63)
    elseif 内容.选中==8 then
    地图处理类:跳转地图(id,1251,90,41)
  end


  elseif 序号 == 106.3 then
    local id = 内容.数字id
    local 传送选中 = 0
    if 内容.选中==4 then
    地图处理类:跳转地图(id,1131,111,79)
    elseif 内容.选中==5 then
    地图处理类:跳转地图(id,1512,77,29)
    elseif 内容.选中==6 then
    地图处理类:跳转地图(id,1122,102,98)
    elseif 内容.选中==7 then
    地图处理类:跳转地图(id,1139,68,124)
    elseif 内容.选中==8 then
    地图处理类:跳转地图(id,1249,74,37)
  end

  elseif 序号 == 106.4 then
    local id = 内容.数字id
    local 传送选中 = 0
    if 内容.选中==4 then
    地图处理类:跳转地图(id,1198,130,83)
    elseif 内容.选中==5 then
    地图处理类:跳转地图(id,1002,9,88)
    elseif 内容.选中==6 then
    地图处理类:跳转地图(id,1135,72,63)
    elseif 内容.选中==7 then
    地图处理类:跳转地图(id,1138,46,121)
    elseif 内容.选中==8 then
    地图处理类:跳转地图(id,1250,70,93)
  end
    elseif 序号 == 107.1 then-------摩托修改增加防官传音
    local id = 内容.数字id
    local 仙玉 = f函数.读配置(程序目录..[[data\]]..玩家数据[id].账号..[[\账号信息.txt]],"账号配置","仙玉")
    发送数据(玩家数据[id].连接id,59.2,仙玉)
          elseif 序号==111 then

      local id= 内容.数字id
      local 仙玉 = f函数.读配置(程序目录..[[data\]]..玩家数据[id].账号..[[\账号信息.txt]],"账号配置","仙玉")+0
      local 消耗仙玉=50
      if 仙玉 <消耗仙玉 then
        常规提示(id,"#Y/你没有那么多的仙玉")
      else
      玩家数据[id].角色:扣除仙玉(消耗仙玉,"购买传音",id)
      local 名称="传音纸鹤"
      玩家数据[id].道具:给予道具(id,名称,1)
      常规提示(id,"#Y/你获得了"..名称)
      end

    elseif 序号==108 then
    self:封号处理(id,序号,内容)

    elseif 序号==109 then

      if  npc位置信息[内容.npc] then
          -- table.print(npc位置信息[内容.npc])
          发送数据(玩家数据[内容.数字id].连接id,1050,{x=npc位置信息[内容.npc].X,y=npc位置信息[内容.npc].Y,地图=npc位置信息[内容.npc].地图})
       --   地图处理类:移动请求(内容.数字id,{x=npc位置信息[内容.npc].x,y=npc位置信息[内容.npc].y,距离=0},内容.数字id)

      end

    elseif 序号==121.1 then
      local id=内容.数字id
      充值礼包类:获取礼包(id,内容)
    elseif  序号 == 121.2 then
      local id=内容.数字id
      充值礼包类:领取礼包(id,内容)
    elseif  序号 == 121.21 then
      local id=内容.数字id
      充值礼包类:领取礼包1(id,内容)
    elseif  序号 == 121.3 then
      local id=内容.数字id
      充值礼包类:购买VIP(id,内容)
    elseif  序号 == 121.4 then
      local id=内容.数字id
      充值礼包类:领取七日礼包(id,内容)
    elseif  序号 == 121.5 then
      local id=内容.数字id
      充值礼包类:领取等级礼包(id,内容)
---嘎嘎



--------------------------------------------------------------上面可以写新的序号
    elseif 序号 == 200 then
    local id=内容.数字id+0
    if 图鉴系统[id]==nil then
       图鉴系统[id]={东海湾={大海龟=0,巨蛙=0,海毛虫=0,章鱼=0,海星=0,激活=100}
                    ,江南野外={树怪=0,野猪=0,浣熊=0,激活=100}
                    ,大雁塔={赌徒=0,强盗=0,骷髅怪=0,羊头怪=0,蛤蟆精=0,狐狸精=0,花妖=0,大蝙蝠=0,激活=100}
                    ,大唐国境={赌徒=0,强盗=0,山贼=0,护卫=0,激活=100}
                    ,大唐境外={老虎=0,黑熊=0,花妖=0,激活=100}
                    ,魔王寨={牛妖=0,蛤蟆精=0,激活=100}
                    ,普陀山={黑熊精=0,蜘蛛精=0,激活=100}
                    ,盘丝岭={蜘蛛精=0,狐狸精=0,花妖=0,激活=100}
                    ,狮驼岭={雷鸟人=0,蝴蝶仙子=0,激活=100}
                    ,西牛贺州={小龙女=0,狼=0,激活=100}
                    ,花果山={小龙女=0,老虎=0,黑熊=0,激活=100}
                    ,海底迷宫={虾兵=0,蟹将=0,龟丞相=0,激活=100}
                    ,地狱迷宫={野鬼=0,骷髅怪=0,僵尸=0,牛头=0,马面=0,激活=100}
                    ,北俱芦洲={古代瑞兽=0,白熊=0,天将=0,激活=100}
                    ,龙窟={古代瑞兽=0,黑山老妖=0,天兵=0,风伯=0,蛟龙=0,雨师=0,地狱战神=0,巡游天神=0,星灵仙子=0,激活=100}
                    ,凤巢={黑山老妖=0,天将=0,天兵=0,雷鸟人=0,地狱战神=0,风伯=0,凤凰=0,如意仙子=0,芙蓉仙子=0,激活=100}
                    ,无名鬼蜮={幽灵=0,吸血鬼=0,鬼将=0,阴阳伞=0,画魂=0,幽萤娃娃=0,激活=100}
                    ,小西天={夜罗刹=0,炎魔神=0,噬天虎=0,阴阳伞=0,金铙僧=0,激活=100}
                    ,女娲神迹={律法女娲=0,灵符女娲=0,净瓶女娲=0,阴阳伞=0,激活=100}
                    ,小雷音寺={大力金刚=0,雾中仙=0,灵鹤=0,阴阳伞=0,激活=100}
                    ,蓬莱仙岛={龙龟=0,红萼仙子=0,踏云兽=0,琴仙=0,阴阳伞=0,激活=100}
                    ,月宫={兔子怪=0,蜘蛛精=0,激活=100}
                    ,蟠桃园={巨力神猿=0,长眉灵猴=0,混沌兽=0,激活=100}
                    ,墨家禁地={连弩车=0,巴蛇=0,机关鸟=0,机关兽=0,机关人=0,阴阳伞=0,激活=100}
                    ,解阳山={犀牛将军人形=0,犀牛将军兽形=0,锦毛貂精=0,千年蛇魅=0,激活=100}
                    ,子母河底={蚌精=0,碧水夜叉=0,鲛人=0,激活=100}
                    ,麒麟山={泪妖=0,镜妖=0,鼠先锋=0,百足将军=0,野猪精=0,激活=100}
                    ,碗子山={蝎子精=0,葫芦宝贝=0,激活=100}
                    ,波月洞={猫灵人形=0,狂豹人形=0,猫灵兽形=0,狂豹兽形=0,混沌兽=0,激活=100}
                    ,柳林坡={修罗傀儡鬼=0,蜃气妖=0,蔓藤妖花=0,激活=100}
                    ,比丘国={金身罗汉=0,修罗傀儡妖=0,曼珠沙华=0,激活=100}
                    ,须弥东界={持国巡守=0,毗舍童子=0,真陀护法=0,增长巡守=0,灵灯侍者=0,般若天女=0,激活=100}
                    }
      end
      发送数据(玩家数据[id].连接id,3529.1,{图鉴系统[id]})
elseif 序号 == 201 then
  local id=内容.数字id+0
  local 选项={}
  玩家数据[id].角色.图鉴提交={地图=内容.地图,名称=内容.名称}
  local 对话="提交宠物对话自行修改"
  for n=1,#玩家数据[id].召唤兽.数据 do
      选项[#选项+1]=玩家数据[id].召唤兽.数据[n].名称
  end
  发送数据(玩家数据[id].连接id,1501,{名称=玩家数据[id].角色.数据.名称,模型=玩家数据[id].角色.数据.模型,对话=对话,选项=选项})
elseif 序号 == 202 then
  local id=内容.数字id +0
  if 图鉴系统[id]==nil then
    图鉴系统[id]={东海湾={大海龟=0,巨蛙=0,海毛虫=0,章鱼=0,海星=0,激活=100}
                  ,江南野外={树怪=0,野猪=0,浣熊=0,激活=100}
                  ,大雁塔={赌徒=0,强盗=0,骷髅怪=0,羊头怪=0,蛤蟆精=0,狐狸精=0,花妖=0,大蝙蝠=0,激活=100}
                  ,大唐国境={赌徒=0,强盗=0,山贼=0,护卫=0,激活=100}
                  ,大唐境外={老虎=0,黑熊=0,花妖=0,激活=100}
                  ,魔王寨={牛妖=0,蛤蟆精=0,激活=100}
                  ,普陀山={黑熊精=0,蜘蛛精=0,激活=100}
                  ,盘丝岭={蜘蛛精=0,狐狸精=0,花妖=0,激活=100}
                  ,狮驼岭={雷鸟人=0,蝴蝶仙子=0,激活=100}
                  ,西牛贺州={小龙女=0,狼=0,激活=100}
                  ,花果山={小龙女=0,老虎=0,黑熊=0,激活=100}
                  ,海底迷宫={虾兵=0,蟹将=0,龟丞相=0,激活=100}
                  ,地狱迷宫={野鬼=0,骷髅怪=0,僵尸=0,牛头=0,马面=0,激活=100}
                  ,北俱芦洲={古代瑞兽=0,白熊=0,天将=0,激活=100}
                  ,龙窟={古代瑞兽=0,黑山老妖=0,天兵=0,风伯=0,蛟龙=0,雨师=0,地狱战神=0,巡游天神=0,星灵仙子=0,激活=100}
                  ,凤巢={黑山老妖=0,天将=0,天兵=0,雷鸟人=0,地狱战神=0,风伯=0,凤凰=0,如意仙子=0,芙蓉仙子=0,激活=100}
                  ,无名鬼蜮={幽灵=0,吸血鬼=0,鬼将=0,阴阳伞=0,画魂=0,幽萤娃娃=0,激活=100}
                  ,小西天={夜罗刹=0,炎魔神=0,噬天虎=0,阴阳伞=0,金铙僧=0,激活=100}
                  ,女娲神迹={律法女娲=0,灵符女娲=0,净瓶女娲=0,阴阳伞=0,激活=100}
                  ,小雷音寺={大力金刚=0,雾中仙=0,灵鹤=0,阴阳伞=0,激活=100}
                  ,蓬莱仙岛={龙龟=0,红萼仙子=0,踏云兽=0,琴仙=0,阴阳伞=0,激活=100}
                  ,月宫={兔子怪=0,蜘蛛精=0,激活=100}
                  ,蟠桃园={巨力神猿=0,长眉灵猴=0,混沌兽=0,激活=100}
                  ,墨家禁地={连弩车=0,巴蛇=0,机关鸟=0,机关兽=0,机关人=0,阴阳伞=0,激活=100}
                  ,解阳山={犀牛将军人形=0,犀牛将军兽形=0,锦毛貂精=0,千年蛇魅=0,激活=100}
                  ,子母河底={蚌精=0,碧水夜叉=0,鲛人=0,激活=100}
                  ,麒麟山={泪妖=0,镜妖=0,鼠先锋=0,百足将军=0,野猪精=0,激活=100}
                  ,碗子山={蝎子精=0,葫芦宝贝=0,激活=100}
                  ,波月洞={猫灵人形=0,狂豹人形=0,猫灵兽形=0,狂豹兽形=0,混沌兽=0,激活=100}
                  ,柳林坡={修罗傀儡鬼=0,蜃气妖=0,蔓藤妖花=0,激活=100}
                  ,比丘国={金身罗汉=0,修罗傀儡妖=0,曼珠沙华=0,激活=100}
                  ,须弥东界={持国巡守=0,毗舍童子=0,真陀护法=0,增长巡守=0,灵灯侍者=0,般若天女=0,激活=100}
                  }
  end
  if  图鉴系统[id][内容.地图].激活== 103 then
    常规提示(id,"#Y当前地图图策已全部激活，无法重复激活")
    return
  else
    if 内容.区分==1 then
      for n,v in pairs(图鉴系统[id][内容.地图]) do
        if 图鉴系统[id][内容.地图][n]< 1 or 图鉴系统[id][内容.地图][n]== 2 then
           常规提示(id,"#Y您的#R"..n.."#Y宝宝没有激活，不能进行总激活")
           return
        end
      end
      图鉴系统[id][内容.地图].激活=图鉴系统[id][内容.地图].激活+内容.区分
      图鉴系统[id]=table.loadstring(table.tostring(图鉴系统[id]))
      常规提示(id,"#Y恭喜你成功激活了"..内容.地图.."#R宝宝#Y图策")
    elseif 内容.区分==2 then
      for n,v in pairs(图鉴系统[id][内容.地图]) do
        if 图鉴系统[id][内容.地图][n]< 2  then
           常规提示(id,"#Y您的#R"..n.."#Y变异宝宝没有激活，不能进行总激活")
           return
        end
      end
      图鉴系统[id][内容.地图].激活=图鉴系统[id][内容.地图].激活+内容.区分
      常规提示(id,"#Y恭喜你成功激活了"..内容.地图.."#R变异#Y图策")
      图鉴系统[id]=table.loadstring(table.tostring(图鉴系统[id]))
    end
    发送数据(玩家数据[id].连接id,3529.2,图鉴系统[id])
  end
elseif 序号 == 203 then
  local id=内容.数字id
  local 图鉴宠物=图鉴系统[id][内容.地图][内容.名称]+0
  if 内容.激活类型==101 then
    图鉴系统[id]=table.loadstring(table.tostring(图鉴系统[id]))
    if 图鉴系统[id][内容.地图].激活==101 then
       常规提示(id,"#Y当前地图图策已激活无法重复激活")
       return
    elseif 图鉴系统[id][内容.地图][内容.名称]== 1 or 图鉴系统[id][内容.地图][内容.名称]== 3 then
        常规提示(id,"#Y当前地图图策"..内容.名称.."已激活无法重复收集")
        return
    elseif 玩家数据[id].召唤兽.数据[内容.宠物]==nil then
       常规提示(id,"#Y当前收集的宠物数据错误无法收集\n如果没读取成功,重新打开图鉴和读取下宠物面板再试")
       return
    elseif 玩家数据[id].召唤兽.数据[内容.宠物].模型~=内容.名称 then
       常规提示(id,"#Y当前收集的宠物数据错误无法收集\n如果没读取成功,重新打开图鉴和读取下宠物面板再试")
       return
    elseif 玩家数据[id].角色.数据.参战宝宝.认证码~=nil and  玩家数据[id].角色.数据.参战宝宝.认证码==玩家数据[id].召唤兽.数据[内容.宠物].认证码 then
        常规提示(id,"#Y参战宠物无法进行收集,请先取消参战")
       return
    else
      table.remove(玩家数据[id].召唤兽.数据, 内容.宠物)
      常规提示(id,"#Y恭喜你完成了对"..内容.地图..内容.名称.."的收集")
      图鉴系统[id][内容.地图][内容.名称]=图鉴宠物+1
      图鉴系统[id]=table.loadstring(table.tostring(图鉴系统[id]))
      发送数据(玩家数据[id].连接id,3529.2,图鉴系统[id])
    end
  elseif 内容.激活类型==102 then
    if 图鉴系统[id][内容.地图].激活==102 then
       常规提示(id,"#Y当前地图图策已激活无法重复激活")
       return
    elseif 图鉴系统[id][内容.地图][内容.名称]== 2 or 图鉴系统[id][内容.地图][内容.名称]== 3 then
        常规提示(id,"#Y当前地图图策"..内容.名称.."已激活无法重复收集")
        return
    elseif 玩家数据[id].召唤兽.数据[内容.宠物]==nil then
       常规提示(id,"#Y当前收集的宠物数据错误无法收集\n如果没读取成功,重新打开图鉴和读取下宠物面板再试")
       return
    elseif 玩家数据[id].召唤兽.数据[内容.宠物].模型~=内容.名称 then
       常规提示(id,"#Y当前收集的宠物数据错误无法收集\n如果没读取成功,重新打开图鉴和读取下宠物面板再试")
       return
    elseif 玩家数据[id].角色.数据.参战宝宝.认证码~=nil and  玩家数据[id].角色.数据.参战宝宝.认证码==玩家数据[id].召唤兽.数据[内容.宠物].认证码 then
        常规提示(id,"#Y参战宠物无法进行收集,请先取消参战")
       return
    else
      table.remove(玩家数据[id].召唤兽.数据, 内容.宠物)
      常规提示(id,"#Y恭喜你完成了对"..内容.地图..内容.名称.."的收集")
      图鉴系统[id][内容.地图][内容.名称]=图鉴宠物+2
      图鉴系统[id]=table.loadstring(table.tostring(图鉴系统[id]))
      发送数据(玩家数据[id].连接id,3529.2,图鉴系统[id])
    end
  end

  elseif 序号 == 113 then
   local id = 内容.数字id
   local 编号 = 内容.编号
   -- if 玩家数据[id].助战.数据[编号].助战修炼经验 == nil or 玩家数据[id].助战.数据[编号].助战修炼经验.攻击经验 >=1
   --  or 玩家数据[id].助战.数据[编号].助战修炼经验.法术经验 >=1 or 玩家数据[id].助战.数据[编号].助战修炼经验.防御经验 >=1
   --  or 玩家数据[id].助战.数据[编号].助战修炼经验.抗法经验 >=1 then
   -- 玩家数据[id].助战.数据[编号].助战修炼经验 = {攻击经验=0,法术经验=0,防御经验=0,抗法经验=0}
   -- 玩家数据[id].助战.数据[编号].修炼 = {攻击修炼=17,法术修炼=17,防御修炼=17,抗法修炼=17}
   -- end
  发送数据(玩家数据[id].连接id,7001,{编号 = 编号,助战修炼 = 玩家数据[id].助战.数据[编号].修炼,助战修炼经验 = 玩家数据[id].助战.数据[编号].助战修炼经验})
  elseif 序号 == 113.1 then
   local id = 内容.数字id
   常规提示(id,"目前助战修炼最高上限为9")
elseif 序号 == 114 then
  local id = 内容.数字id
  local 编号 = 内容.编号
  if 玩家数据[id].助战.数据[编号].门派 == nil then
    常规提示(id,"未加入门派")
    return 0
  end
  if 玩家数据[id].助战.数据[编号].门派 ~= "无门派" and 玩家数据[id].助战.数据[编号].师门技能 == nil then
    玩家数据[id].助战.数据[编号].师门技能={}
    local 列表 = 玩家数据[id].角色:取门派技能(玩家数据[id].助战.数据[编号].门派)
    for n=1,#列表 do
    玩家数据[id].助战.数据[编号].师门技能[n] = jnzb()
    玩家数据[id].助战.数据[编号].师门技能[n]:置对象(列表[n])
    玩家数据[id].助战.数据[编号].师门技能[n].包含技能 = {}
    玩家数据[id].助战.数据[编号].师门技能[n].等级=0
    local w = 玩家数据[id].角色:取包含技能助战(玩家数据[id].助战.数据[编号].师门技能[n].名称)
      for s=1,#w do
          玩家数据[id].助战.数据[编号].师门技能[n].包含技能[s] = jnzb()
          玩家数据[id].助战.数据[编号].师门技能[n].包含技能[s]:置对象(w[s])
          玩家数据[id].助战.数据[编号].师门技能[n].包含技能[s].等级=0
        玩家数据[id].助战.数据[编号].师门技能[n].包含技能[s].学会 = true
        玩家数据[id].助战.数据[编号].技能[#玩家数据[id].助战.数据[编号].技能+1] = 玩家数据[id].助战.数据[编号].师门技能[n].包含技能[s].名称
      end
    end
  end
  发送数据(玩家数据[id].连接id,7003,{等级 = 玩家数据[id].助战.数据[编号].等级,编号 = 编号 ,师门技能 = 玩家数据[id].助战.数据[编号].师门技能,门派 = 玩家数据[id].助战.数据[编号].门派})
elseif 序号 == 114.1 then
  local id = 内容.数字id
  local 编号 = 内容.编号
  local 序号 = 内容.序列
  local 临时消耗={经验=技能消耗.经验[玩家数据[id].助战.数据[编号].师门技能[序号].等级+1],金钱=技能消耗.金钱[玩家数据[id].助战.数据[编号].师门技能[序号].等级+1]}
  if 玩家数据[id].助战.数据[编号].技能属性 == nil then
    玩家数据[id].助战.数据[编号].技能属性 = {气血=0,魔法=0,命中=0,伤害=0,防御=0,速度=0,躲避=0,灵力=0,体质=0,魔力=0,力量=0,耐力=0,敏捷=0}
  end
  if 玩家数据[id].助战.数据[编号].师门技能[序号]==nil then
    常规提示(id,"你没有这样的技能")
    return
  elseif 玩家数据[id].助战.数据[编号].师门技能[序号].等级>=玩家数据[id].助战.数据[编号].等级+10 then
    常规提示(id,"门派技能不能超过角色等级+10")
    return
  elseif 玩家数据[id].助战.数据[编号].当前经验<临时消耗.经验 then
    常规提示(id,"你的没有那么多的经验")
    return
  else

    -- if 玩家数据[id].角色.数据.储备<0 then
      if 玩家数据[id].角色.数据.储备>=临时消耗.金钱 then
          玩家数据[id].角色.数据.储备=玩家数据[id].角色.数据.储备-临时消耗.金钱
        elseif 玩家数据[id].角色.数据.银子>=临时消耗.金钱 then
          玩家数据[id].角色.数据.银子=玩家数据[id].角色.数据.银子-临时消耗.金钱
        elseif 玩家数据[id].角色.数据.储备+玩家数据[id].角色.数据.银子>=临时消耗.金钱 then
          local x临时消耗=临时消耗.金钱-玩家数据[id].角色.数据.储备
          玩家数据[id].角色:银子记录()
          玩家数据[id].角色.数据.银子=玩家数据[id].角色.数据.银子-x临时消耗
          玩家数据[id].角色.数据.储备=0
        elseif 玩家数据[id].角色.数据.储备+玩家数据[id].角色.数据.银子+玩家数据[id].角色.数据.存银>=临时消耗.金钱 then
          local x临时消耗=临时消耗.金钱-(玩家数据[id].角色.数据.储备+玩家数据[id].角色.数据.银子)
          玩家数据[id].角色.数据.银子=0
          玩家数据[id].角色.数据.储备=0
          玩家数据[id].角色:银子记录()
          玩家数据[id].角色.数据.存银=玩家数据[id].角色.数据.存银- x临时消耗
        -- end
      else
      常规提示(id,"你没有那么多的银子")
      return
      end

    玩家数据[id].助战.数据[编号].当前经验=玩家数据[id].助战.数据[编号].当前经验-临时消耗.经验
    发送数据(玩家数据[id].连接id,38,{内容="你消耗"..临时消耗.金钱.."点银两".."\n你的助战消耗了"..临时消耗.经验.."点经验",金钱=临时消耗.金钱,经验=临时消耗.经验})
    玩家数据[id].角色:日志记录("学习师门技能["..玩家数据[id].助战.数据[编号].师门技能[序号].名称.."]消耗"..临时消耗.金钱.."点金钱和 "..临时消耗.经验.."点经验")
    玩家数据[id].角色:银子记录()
    玩家数据[id].助战.数据[编号].师门技能[序号].等级= 玩家数据[id].助战.数据[编号].师门技能[序号].等级 + 1
    self:升级技能(玩家数据[id].助战.数据[编号].师门技能[序号],内容.编号,id)
    发送数据(玩家数据[id].连接id,7004,{师门技能 = 玩家数据[id].助战.数据[编号].师门技能})
    -- 发送数据(连接id,7004,{等级 = 玩家数据[id].助战.数据[编号].等级,编号 = 编号 ,师门技能 = 玩家数据[id].助战.数据[编号].师门技能,门派 = 玩家数据[id].助战.数据[编号].门派})
    刷新货币(连接id,id)
  玩家数据[id].助战:刷新信息(编号)
  发送数据(玩家数据[id].连接id,100,{编号=编号,数据=玩家数据[id].助战:取指定数据(编号)})
  end

  elseif 序号 == 116.1 then
  local id = 内容.数字id
  local 编号 = 内容.编号
  local 序号 = 内容.序列
  local 临时消耗={经验=技能消耗.经验[玩家数据[id].助战.数据[编号].师门技能[序号].等级+10],金钱=技能消耗.金钱[玩家数据[id].助战.数据[编号].师门技能[序号].等级+10]}
  if 玩家数据[id].助战.数据[编号].技能属性 == nil then
    玩家数据[id].助战.数据[编号].技能属性 = {气血=0,魔法=0,命中=0,伤害=0,防御=0,速度=0,躲避=0,灵力=0,体质=0,魔力=0,力量=0,耐力=0,敏捷=0}
  end
  if 玩家数据[id].助战.数据[编号].师门技能[序号]==nil then
    常规提示(id,"你没有这样的技能")
    return
  elseif 玩家数据[id].助战.数据[编号].师门技能[序号].等级>=玩家数据[id].助战.数据[编号].等级+10 then
    常规提示(id,"门派技能不能超过角色等级+10")
    return
  elseif 玩家数据[id].角色.数据.当前经验<临时消耗.经验 then
    常规提示(id,"你的没有那么多的经验")
    return

  else

    -- if 玩家数据[id].角色.数据.储备<0 then
      if 玩家数据[id].角色.数据.储备>=临时消耗.金钱 then
          玩家数据[id].角色.数据.储备=玩家数据[id].角色.数据.储备-临时消耗.金钱
        elseif 玩家数据[id].角色.数据.银子>=临时消耗.金钱 then
          玩家数据[id].角色.数据.银子=玩家数据[id].角色.数据.银子-临时消耗.金钱
        elseif 玩家数据[id].角色.数据.储备+玩家数据[id].角色.数据.银子>=临时消耗.金钱 then
          local x临时消耗=临时消耗.金钱-玩家数据[id].角色.数据.储备
          玩家数据[id].角色:银子记录()
          玩家数据[id].角色.数据.银子=玩家数据[id].角色.数据.银子-x临时消耗
          玩家数据[id].角色.数据.储备=0
        elseif 玩家数据[id].角色.数据.储备+玩家数据[id].角色.数据.银子+玩家数据[id].角色.数据.存银>=临时消耗.金钱 then
          local x临时消耗=临时消耗.金钱-(玩家数据[id].角色.数据.储备+玩家数据[id].角色.数据.银子)
          玩家数据[id].角色.数据.银子=0
          玩家数据[id].角色.数据.储备=0
          玩家数据[id].角色:银子记录()
          玩家数据[id].角色.数据.存银=玩家数据[id].角色.数据.存银- x临时消耗
        -- end
      else
      常规提示(id,"你没有那么多的银子")
      return
      end

    玩家数据[id].角色.数据.当前经验=玩家数据[id].角色.数据.当前经验-临时消耗.经验
    发送数据(玩家数据[id].连接id,38,{内容="你消耗"..临时消耗.金钱.."点银两".."\n你的助战消耗了"..临时消耗.经验.."点经验",金钱=临时消耗.金钱,经验=临时消耗.经验})
    玩家数据[id].角色:日志记录("学习师门技能["..玩家数据[id].助战.数据[编号].师门技能[序号].名称.."]消耗"..临时消耗.金钱.."点金钱和 "..临时消耗.经验.."点经验")
    玩家数据[id].角色:银子记录()
    玩家数据[id].助战.数据[编号].师门技能[序号].等级= 玩家数据[id].助战.数据[编号].师门技能[序号].等级 + 10
    self:升级技能(玩家数据[id].助战.数据[编号].师门技能[序号],内容.编号,id)
    发送数据(玩家数据[id].连接id,7004,{师门技能 = 玩家数据[id].助战.数据[编号].师门技能})
    -- 发送数据(连接id,7004,{等级 = 玩家数据[id].助战.数据[编号].等级,编号 = 编号 ,师门技能 = 玩家数据[id].助战.数据[编号].师门技能,门派 = 玩家数据[id].助战.数据[编号].门派})
    刷新货币(连接id,id)
  玩家数据[id].助战:刷新信息(编号)
  发送数据(玩家数据[id].连接id,100,{编号=编号,数据=玩家数据[id].助战:取指定数据(编号)})
  end


    elseif 序号 == 114.2 then
   local id = 内容.数字id
   local 编号 = 内容.编号
   发送数据(玩家数据[id].连接id,7005,{编号=编号,辅助技能=玩家数据[id].助战.数据[编号].辅助技能,强化技能=玩家数据[id].助战.数据[编号].强化技能})
  elseif 序号 == 114.3 then
   local id = 内容.数字id
   local 编号 = 内容.编号
   local 学习号 = 内容.学习号 + 0 - 1

   if 学习号 < 5 then
   local 技能名称 = 0
   if 学习号 ==1 then
   技能名称 = "冥想"
   elseif 学习号==2 then
   技能名称 = "暗器技巧"
   elseif 学习号==3 then
   技能名称 = "强壮"
   elseif 学习号==4 then
   技能名称 = "强身"
   end
local 临时消耗=玩家数据[id].角色:生活技能消耗(玩家数据[id].助战.数据[编号].辅助技能[技能名称]+1)
  if 玩家数据[id].助战.数据[编号].当前经验<临时消耗.经验 then
    常规提示(id,"你没有那么多的经验")
    return
  elseif 玩家数据[id].助战.数据[编号].辅助技能[技能名称]>=玩家数据[id].助战.数据[编号].等级+10 then
    常规提示(id,"该技能最多不超过助战等级的10级")
    return
  end
  local 提示=""
  if 玩家数据[id].角色.数据.储备>=临时消耗.金钱 then
    玩家数据[id].角色.数据.储备=玩家数据[id].角色.数据.储备-临时消耗.金钱
    玩家数据[id].角色:日志记录("学习生活技能["..技能名称.."]消耗"..玩家数据[id].角色.数据.储备.."点储备")
    玩家数据[id].角色:银子记录()
  elseif 玩家数据[id].角色.数据.储备+玩家数据[id].角色.数据.银子>=临时消耗.金钱 then
    临时消耗.金钱=临时消耗.金钱-玩家数据[id].角色.数据.储备
    玩家数据[id].角色:日志记录("学习生活技能["..技能名称.."]消耗"..玩家数据[id].角色.数据.储备.."点储备、"..临时消耗.金钱.."两银子")
    玩家数据[id].角色:银子记录()
    玩家数据[id].角色.数据.银子=玩家数据[id].角色.数据.银子-临时消耗.金钱
    玩家数据[id].角色.数据.储备=0
  else
    常规提示(id,"你没有那么多的银子")
    return
  end
  玩家数据[id].助战.数据[编号].当前经验=玩家数据[id].助战.数据[编号].当前经验-临时消耗.经验
  玩家数据[id].角色:日志记录("学习生活技能["..技能名称.."]消耗"..临时消耗.经验.."点经验")
  玩家数据[id].角色:银子记录()
  刷新货币(玩家数据[id].连接id,id)
   ----------------------------------------

  玩家数据[id].助战.数据[编号].辅助技能[技能名称]=玩家数据[id].助战.数据[编号].辅助技能[技能名称]+1
  --常规提示(id,"辅助技能40级前免费学习")
  玩家数据[id].助战:刷新信息(编号)
  发送数据(玩家数据[id].连接id,7006,{编号=编号,辅助技能=玩家数据[id].助战.数据[编号].辅助技能,强化技能=玩家数据[id].助战.数据[编号].强化技能,是否=1})
  发送数据(玩家数据[id].连接id,100,{编号=编号,数据=玩家数据[id].助战:取指定数据(编号)})

end

    elseif 序号 == 114.4 then
     local id = 内容.数字id
   local 编号 = 内容.编号
  if 玩家数据[id].助战.数据[编号].等级>=69 then
      玩家数据[id].助战.数据[编号].装备属性.可换乾元丹=3
  end
  if 玩家数据[id].助战.数据[编号].等级>=89 then
      玩家数据[id].助战.数据[编号].装备属性.可换乾元丹=4
  end
  if 玩家数据[id].助战.数据[编号].等级>=109 then
      玩家数据[id].助战.数据[编号].装备属性.可换乾元丹=5
  end
  if 玩家数据[id].助战.数据[编号].等级>=129 then
      玩家数据[id].助战.数据[编号].装备属性.可换乾元丹=5
  end
  if 玩家数据[id].助战.数据[编号].等级>=155 then
      玩家数据[id].助战.数据[编号].装备属性.可换乾元丹=5
  end
  if 玩家数据[id].助战.数据[编号].等级>=159 then
      玩家数据[id].助战.数据[编号].装备属性.可换乾元丹=6
  end
  if 玩家数据[id].助战.数据[编号].等级>=164 then
      玩家数据[id].助战.数据[编号].装备属性.可换乾元丹=7
  end
  if 玩家数据[id].助战.数据[编号].等级>=168 then
      玩家数据[id].助战.数据[编号].装备属性.可换乾元丹=7
  end
  if 玩家数据[id].助战.数据[编号].等级>=171 then
      玩家数据[id].助战.数据[编号].装备属性.可换乾元丹=7
  end
   发送数据(玩家数据[id].连接id,7007,{编号=编号,模型=玩家数据[id].助战.数据[编号].模型,门派=玩家数据[id].助战.数据[编号].门派,奇经八脉=玩家数据[id].助战.数据[编号].奇经八脉,装备属性=玩家数据[id].助战.数据[编号].装备属性})
      elseif 序号 == 114.5 then
     local id = 内容.数字id
   local 编号 = 内容.编号
   local 位置 = 内容.序列
   self:增加奇经八脉(id,位置,编号)
   elseif 序号 == 114.6 then
     local id = 内容.数字id
   local 编号 = 内容.编号
   self:清空奇经八脉(id,编号)
   elseif 序号 == 114.7 then
     local id = 内容.数字id
   local 编号 = 内容.编号
   self:兑换乾元丹(id,编号)
   elseif 序号 == 114.8 then
     local id = 内容.数字id
   local 编号 = 内容.编号
    锦衣数据 = {}
  if 玩家数据[id].助战.数据[编号].锦衣[1]~=nil then
    锦衣数据[1]=table.loadstring(table.tostring(玩家数据[id].道具.数据[玩家数据[id].助战.数据[编号].锦衣[1]]))
  end
  if 玩家数据[id].助战.数据[编号].锦衣[2]~=nil then
    锦衣数据[2]=table.loadstring(table.tostring(玩家数据[id].道具.数据[玩家数据[id].助战.数据[编号].锦衣[2]]))
  end
  if 玩家数据[id].助战.数据[编号].锦衣[3]~=nil then
    锦衣数据[3]=table.loadstring(table.tostring(玩家数据[id].道具.数据[玩家数据[id].助战.数据[编号].锦衣[3]]))
  end
  if 玩家数据[id].助战.数据[编号].锦衣[4]~=nil then
    锦衣数据[4]=table.loadstring(table.tostring(玩家数据[id].道具.数据[玩家数据[id].助战.数据[编号].锦衣[4]]))
  end
    发送数据(玩家数据[id].连接id,7009,{编号=编号,锦衣=锦衣数据})
   elseif 序号 == 114.9 then
        local id = 内容.数字id
   local 编号 = 内容.编号
     self.发送数据 = {法宝={}}
     for n=1,3 do
    if 玩家数据[id].助战.数据[编号].法宝佩戴[n]~=nil then
      self.发送数据.法宝[n]=table.loadstring(table.tostring(玩家数据[id].道具.数据[玩家数据[id].助战.数据[编号].法宝佩戴[n]]))
    end
  end
  发送数据(玩家数据[id].连接id,7011,{法宝 = self.发送数据,编号 = 编号})
  elseif 序号 == 114.91 then
    local id = 内容.数字id
    local 助战编号 = 内容.编号
    local 物品编号 = 内容.物品编号
    玩家数据[id].助战:佩戴法宝(玩家数据[id].连接id,id,"道具",物品编号,助战编号)
    elseif 序号 == 114.92 then
    local id = 内容.数字id
    local 助战编号 = 内容.编号
    local 物品编号 = 内容.物品编号
    玩家数据[id].助战:卸下法宝(玩家数据[id].连接id,id,物品编号,助战编号)
  elseif 序号 == 114.93 then
    local id = 内容.数字id
    local 编号 = 内容.编号
   -----获取坐骑条件自行添加
    玩家数据[id].助战.数据[编号].坐骑 = {坐骑拥有=true}
    玩家数据[id].助战:刷新信息(编号)
    发送数据(玩家数据[id].连接id,100,{编号=编号,数据=玩家数据[id].助战:取指定数据(编号)})

  elseif 序号 == 117.1 then
    local id = 内容.数字id

    if 玩家数据[id].角色.数据.转盘次数 == nil  then
       玩家数据[id].角色.数据.转盘次数 =0
       玩家数据[id].角色.数据.转盘开奖 =0
    end
   --  if 玩家数据[id].角色.数据.累积活跃.当前积分 < 500 then
   --     return
   --     else

   --    玩家数据[id].角色.数据.累积活跃.当前积分 = 玩家数据[id].角色.数据.累积活跃.当前积分 -500
   --    玩家数据[id].角色.数据.转盘开奖 = 玩家数据[id].角色.数据.转盘开奖 + 1
   -- end

  elseif 序号 == 117.2 then
    local id = 内容.数字id

    if 玩家数据[id].角色.数据.转盘开奖 < 1  then
       常规提示(id,"#Y/你当日活跃度不足！")
    return
    else
      玩家数据[id].角色.数据.转盘开奖 = 玩家数据[id].角色.数据.转盘开奖 -1
       local 奖励参数=取随机数(1,100)
      if 奖励参数<=10 then
       local 名称="怪物卡片"
      玩家数据[id].道具:给予道具(id,名称,取随机数(5,8))
      常规提示(id,"#Y/获得了"..名称)
      elseif 奖励参数<=20 then
      local 名称=玩家数据[id].道具:取五宝()
      玩家数据[id].道具:给予道具(id,名称)
      常规提示(id,"#Y/你获得了"..名称)
      elseif 奖励参数<=30 then
      local 名称=取宝石()
      玩家数据[id].道具:给予道具(id,名称,取随机数(1,2))
      常规提示(id,"#Y/你获得了"..名称)
      elseif 奖励参数<=35 then
      local 名称="摇钱树苗"
      玩家数据[id].道具:给予道具(id,名称)
      常规提示(id,"#Y/你获得了"..名称)
      elseif 奖励参数<=50 then
      local 名称="金柳露"
      玩家数据[id].道具:给予道具(id,名称,1)
      常规提示(id,"#Y/你获得了"..名称)
      elseif 奖励参数<=60 then
      local 名称="彩果"
      玩家数据[id].道具:给予道具(id,名称,1)
      常规提示(id,"#Y/你获得了"..名称)
      elseif 奖励参数<=70 then
      local 名称=取宝石()
      玩家数据[id].道具:给予道具(id,名称,取随机数(2,2))
      常规提示(id,"#Y/你获得了"..名称)
      else
      玩家数据[id].角色:添加经验(50000,"转盘开奖",1)
       end
     end

  elseif 序号 == 118 then
    local id = 内容.数字id
    if not 玩家数据[id].角色.数据.接受给予 then
      玩家数据[id].角色.数据.接受给予 = true
    else
      玩家数据[id].角色.数据.接受给予 = false
    end
    if 玩家数据[id].角色.数据.接受给予 then
      常规提示(id,"#Y您已开启给予接受开关！")
    else
      常规提示(id,"#Y您已关闭给予接受开关！")
    end
    发送数据(玩家数据[id].连接id,150,{接受给予 = 玩家数据[id].角色.数据.接受给予})

  elseif 序号 == 118.1 then
    local id = 内容.数字id
    if not 玩家数据[id].角色.数据.装备查看 then
      玩家数据[id].角色.数据.装备查看 = true
    else
      玩家数据[id].角色.数据.装备查看 = false
    end
    if 玩家数据[id].角色.数据.装备查看 then
      常规提示(id,"#Y您已开启允许查看装备！")
    else
      常规提示(id,"#Y您已关闭允许查看装备！")
    end
    发送数据(玩家数据[id].连接id,150.1,{装备查看 = 玩家数据[id].角色.数据.装备查看})









    elseif 序号 == 119 then
      self:内充处理(内容)
--     local id = 内容.数字id
--     运行时间 = "[" .. os.date("%Y", 时间) .. "年" .. os.date("%m", 时间) .. "月" .. os.date("%d", 时间) .. "日 " .. os.date("%X", 时间) .. "]"
--     if 玩家数据[id].角色.数据.累计充值 == nil then
--     玩家数据[id].角色.数据.累计充值 = 0
--     end
--     if f函数.文件是否存在("充值卡密/惩罚/".. 内容.卡号..".txt")== true  and 内容.卡号~="" then
--     扣除银子(99999999999999,0,0,"惩罚",1)
--     --扣除元宝(99999999999999,"惩罚",id)
--     扣除仙玉(99999999999999,"惩罚",id)
--      local 日志 = 读入文件([[充值卡密/充值记录.txt]]) ..运行时间 .. "惩罚9999999999999，账号：" .. 玩家数据[id].账号 .."，角色："..玩家数据[id].角色.数据.名称.."卡密：" ..内容.卡号
--      写出文件("充值卡密/充值记录.txt",日志.."\n")
--      常规提示(id,"恶意刷BUG，滚蛋！")
--      广播消息({内容=format( "#G/玩家 #R/#R/" .. 玩家数据[id].角色.数据.名称 .. " #G/通过在线充值获得了#R/" .. "#R/1000点点卡".."#G/感谢大佬的支持！#119" ),频道="xt"})
--      __S服务:输出("充值：空白字符惩罚，账号：" .. 玩家数据[id].角色.数据.账号 .."，名称：" .. 玩家数据[id].角色.数据.名称 .. "，卡密：" ..内容)

--   elseif f函数.文件是否存在("充值卡密/月卡-100-月卡/"..内容.卡号..".txt")== true  and 内容.卡号~=""  then
--           if 玩家数据[id].角色.数据.月卡领取 and 玩家数据[id].角色.数据.月卡领取>=1 then
--               return 常规提示(id,"您当前的月卡还未过期")
--            elseif 玩家数据[id].角色.数据.月卡领取==nil or 玩家数据[id].角色.数据.月卡领取 < 1 then
--               玩家数据[id].角色.数据.月卡激活=1
--               玩家数据[id].角色.数据.月卡领取=30
--               玩家数据[id].角色.数据.飞行时间限制=os.time()+2592000
--               常规提示(id,"恭喜您成功激活了月卡")
--           end
--           os.remove(程序目录.."充值卡密/月卡-100-月卡/".. 内容.卡号..".txt")--删除使用卡密
--           累冲金额总计(100,玩家数据[id].账号,id,"cdk充值")
--       local 日志 = 读入文件([[充值卡密/充值记录.txt]]) ..运行时间 .. "月卡，账号：" .. 玩家数据[id].账号 .."，角色："..玩家数据[id].角色.数据.名称.."卡密：" ..内容.卡号
--       写出文件("充值卡密/充值记录.txt",日志.."\n")--充值日志
--       广播消息({内容=format( "#G/玩家 #R/#R/" .. 玩家数据[id].角色.数据.名称 .. " #G/激活了#R/" .. "#R/月卡！".."#G/感谢大佬的支持！#119" ),频道="xt"})
-- --道具处理类:给予道具(id,名称,数量,参数,附加,专用,工具)--给予道具函数
--   ----礼包98
--     elseif f函数.文件是否存在("充值卡密/礼包-98/"..内容.卡号..".txt")== true  and 内容.卡号~=""  then
--          os.remove(程序目录.."充值卡密/礼包-98/".. 内容.卡号..".txt")--删除使用卡密
--          玩家数据[id].道具:给予道具(id,"120级装备礼包")
--          玩家数据[id].道具:给予道具(id,"80级灵饰礼包")
--          玩家数据[id].道具:给予道具(id,"九转金丹",300,100)
--          玩家数据[id].道具:给予道具(id,"神兜兜",50)
--          添加点卡(100,玩家数据[id].账号,id,"礼包-98")
--          累冲金额总计(98,玩家数据[id].账号,id,"cdk充值")
--       local 日志 = 读入文件([[充值卡密/充值记录.txt]]) ..运行时间 .. "礼包-98，账号：" .. 玩家数据[id].账号 .."，角色："..玩家数据[id].角色.数据.名称.."卡密：" ..内容.卡号
--       写出文件("充值卡密/充值记录.txt",日志.."\n")--充值日志
--       常规提示(id,"#Y恭喜您充值成功！")

--   ----礼包198
--     elseif f函数.文件是否存在("充值卡密/礼包-198/"..内容.卡号..".txt")== true  and 内容.卡号~=""  then
--          os.remove(程序目录.."充值卡密/礼包-198/".. 内容.卡号..".txt")--删除使用卡密
--          玩家数据[id].道具:给予道具(id,"130级装备礼包")
--          玩家数据[id].道具:给予道具(id,"100级灵饰礼包")
--          玩家数据[id].道具:给予道具(id,"九转金丹",400,100)
--          玩家数据[id].道具:给予道具(id,"神兜兜",99)
--          添加点卡(300,玩家数据[id].账号,id,"礼包-198")
--          累冲金额总计(198,玩家数据[id].账号,id,"cdk充值")
--       local 日志 = 读入文件([[充值卡密/充值记录.txt]]) ..运行时间 .. "礼包-198，账号：" .. 玩家数据[id].账号 .."，角色："..玩家数据[id].角色.数据.名称.."卡密：" ..内容.卡号
--       写出文件("充值卡密/充值记录.txt",日志.."\n")--充值日志
--       常规提示(id,"#Y恭喜您充值成功！")

--     ----礼包648
--     elseif f函数.文件是否存在("充值卡密/礼包-648/"..内容.卡号..".txt")== true  and 内容.卡号~=""  then
--          os.remove(程序目录.."充值卡密/礼包-648/".. 内容.卡号..".txt")--删除使用卡密
--          玩家数据[id].道具:给予道具(id,"140级装备礼包")
--          玩家数据[id].道具:给予道具(id,"100级灵饰礼包")
--          玩家数据[id].道具:给予道具(id,"九转金丹",500,100)
--          玩家数据[id].道具:给予道具(id,"神兜兜",200)
--          玩家数据[id].道具:给予道具(id,"召唤兽祈愿卡",1)
--          添加点卡(1000,玩家数据[id].账号,id,"礼包-648")
--          累冲金额总计(648,玩家数据[id].账号,id,"cdk充值")
--       local 日志 = 读入文件([[充值卡密/充值记录.txt]]) ..运行时间 .. "礼包-648，账号：" .. 玩家数据[id].账号 .."，角色："..玩家数据[id].角色.数据.名称.."卡密：" ..内容.卡号
--       写出文件("充值卡密/充值记录.txt",日志.."\n")--充值日志
--       常规提示(id,"#Y恭喜您充值成功！")

--     ----自动次数-1000
--     elseif f函数.文件是否存在("充值卡密/自动次数-10000/"..内容.卡号..".txt")== true  and 内容.卡号~=""  then
--          os.remove(程序目录.."充值卡密/自动次数-10000/".. 内容.卡号..".txt")--删除使用卡密
--          玩家数据[id].角色.数据.自动开关.高级飞行棋=玩家数据[id].角色.数据.自动开关.高级飞行棋+10000
--       local 日志 = 读入文件([[充值卡密/充值记录.txt]]) ..运行时间 .. "自动次数-10000，账号：" .. 玩家数据[id].账号 .."，角色："..玩家数据[id].角色.数据.名称.."卡密：" ..内容.卡号
--       写出文件("充值卡密/充值记录.txt",日志.."\n")--充值日志
--       常规提示(id,"#Y恭喜您充值成功！")

--     ----自动次数-1000
--     elseif f函数.文件是否存在("充值卡密/自动次数-10000/"..内容.卡号..".txt")== true  and 内容.卡号~=""  then
--          os.remove(程序目录.."充值卡密/自动次数-10000/".. 内容.卡号..".txt")--删除使用卡密
--          玩家数据[id].角色.数据.自动开关.高级飞行棋=玩家数据[id].角色.数据.自动开关.高级飞行棋+10000
--       local 日志 = 读入文件([[充值卡密/充值记录.txt]]) ..运行时间 .. "自动次数-10000，账号：" .. 玩家数据[id].账号 .."，角色："..玩家数据[id].角色.数据.名称.."卡密：" ..内容.卡号
--       写出文件("充值卡密/充值记录.txt",日志.."\n")--充值日志
--       常规提示(id,"#Y恭喜您充值成功！")
--     ----5面值
--     elseif f函数.文件是否存在("充值卡密/5面值/"..内容.卡号..".txt")== true  and 内容.卡号~=""  then
--          os.remove(程序目录.."充值卡密/5面值/".. 内容.卡号..".txt")--删除使用卡密
--          添加点卡(5,玩家数据[id].账号,id,"5点卡")
--          累冲金额总计(5,玩家数据[id].账号,id,"cdk充值")
--       local 日志 = 读入文件([[充值卡密/充值记录.txt]]) ..运行时间 .. "5面值，账号：" .. 玩家数据[id].账号 .."，角色："..玩家数据[id].角色.数据.名称.."卡密：" ..内容.卡号
--       写出文件("充值卡密/充值记录.txt",日志.."\n")--充值日志
--       常规提示(id,"#Y恭喜您充值成功！")

--     elseif f函数.文件是否存在("充值卡密/36面值/"..内容.卡号..".txt")== true  and 内容.卡号~=""  then
--          os.remove(程序目录.."充值卡密/36面值/".. 内容.卡号..".txt")--删除使用卡密
--          添加点卡(36,玩家数据[id].账号,id,"36点卡")
--          累冲金额总计(36,玩家数据[id].账号,id,"cdk充值")
--       local 日志 = 读入文件([[充值卡密/充值记录.txt]]) ..运行时间 .. "36面值，账号：" .. 玩家数据[id].账号 .."，角色："..玩家数据[id].角色.数据.名称.."卡密：" ..内容.卡号
--       写出文件("充值卡密/充值记录.txt",日志.."\n")--充值日志
--       常规提示(id,"#Y恭喜您充值成功！")


--     elseif f函数.文件是否存在("充值卡密/120面值/"..内容.卡号..".txt")== true  and 内容.卡号~=""  then
--          os.remove(程序目录.."充值卡密/120面值/".. 内容.卡号..".txt")--删除使用卡密
--          添加点卡(120,玩家数据[id].账号,id,"128点卡")
--           累冲金额总计(120,玩家数据[id].账号,id,"cdk充值")
--       local 日志 = 读入文件([[充值卡密/充值记录.txt]]) ..运行时间 .. "120面值，账号：" .. 玩家数据[id].账号 .."，角色："..玩家数据[id].角色.数据.名称.."卡密：" ..内容.卡号
--       写出文件("充值卡密/充值记录.txt",日志.."\n")--充值日志
--       常规提示(id,"#Y恭喜您充值成功！")

--      elseif f函数.文件是否存在("充值卡密/300面值/"..内容.卡号..".txt")== true  and 内容.卡号~=""  then
--          os.remove(程序目录.."充值卡密/300面值/".. 内容.卡号..".txt")--删除使用卡密
--          添加点卡(300,玩家数据[id].账号,id,"300点卡")
--           累冲金额总计(300,玩家数据[id].账号,id,"cdk充值")
--       local 日志 = 读入文件([[充值卡密/充值记录.txt]]) ..运行时间 .. "300面值，账号：" .. 玩家数据[id].账号 .."，角色："..玩家数据[id].角色.数据.名称.."卡密：" ..内容.卡号
--       写出文件("充值卡密/充值记录.txt",日志.."\n")--充值日志
--       常规提示(id,"#Y恭喜您充值成功！")

--       elseif f函数.文件是否存在("充值卡密/500面值/"..内容.卡号..".txt")== true  and 内容.卡号~=""  then
--          os.remove(程序目录.."充值卡密/500面值/".. 内容.卡号..".txt")--删除使用卡密
--          添加点卡(500,玩家数据[id].账号,id,"500点卡")
--          累冲金额总计(500,玩家数据[id].账号,id,"cdk充值")
--       local 日志 = 读入文件([[充值卡密/充值记录.txt]]) ..运行时间 .. "500面值，账号：" .. 玩家数据[id].账号 .."，角色："..玩家数据[id].角色.数据.名称.."卡密：" ..内容.卡号
--       写出文件("充值卡密/充值记录.txt",日志.."\n")--充值日志
--       常规提示(id,"#Y恭喜您充值成功！")
--       ----面值1000
--       elseif f函数.文件是否存在("充值卡密/1000面值/"..内容.卡号..".txt")== true  and 内容.卡号~=""  then
--          os.remove(程序目录.."充值卡密/1000面值/".. 内容.卡号..".txt")--删除使用卡密
--          添加点卡(1000,玩家数据[id].账号,id,"1000点卡")
--          累冲金额总计(1000,玩家数据[id].账号,id,"cdk充值")
--       local 日志 = 读入文件([[充值卡密/充值记录.txt]]) ..运行时间 .. "1000面值，账号：" .. 玩家数据[id].账号 .."，角色："..玩家数据[id].角色.数据.名称.."卡密：" ..内容.卡号
--       写出文件("充值卡密/充值记录.txt",日志.."\n")--充值日志
--       常规提示(id,"#Y恭喜您充值成功！")

--       ----面值3000
--       elseif f函数.文件是否存在("充值卡密/3000面值/"..内容.卡号..".txt")== true  and 内容.卡号~=""  then
--          os.remove(程序目录.."充值卡密/3000面值/".. 内容.卡号..".txt")--删除使用卡密
--          添加点卡(3000,玩家数据[id].账号,id,"3000点卡")
--          累冲金额总计(3000,玩家数据[id].账号,id,"cdk充值")
--       local 日志 = 读入文件([[充值卡密/充值记录.txt]]) ..运行时间 .. "3000面值，账号：" .. 玩家数据[id].账号 .."，角色："..玩家数据[id].角色.数据.名称.."卡密：" ..内容.卡号
--       写出文件("充值卡密/充值记录.txt",日志.."\n")--充值日志
--       常规提示(id,"#Y恭喜您充值成功！")


--      ----打造-150书铁
--     elseif f函数.文件是否存在("充值卡密/打造礼包-150书铁/"..内容.卡号..".txt")== true  and 内容.卡号~=""  then
--          os.remove(程序目录.."充值卡密/打造礼包-150书铁/".. 内容.卡号..".txt")--删除使用卡密
--          local 书铁种类=取随机数(1,#书铁范围)
--          玩家数据[id].道具:给予道具(id,"制造指南书",150,书铁种类)
--          玩家数据[id].道具:给予道具(id,"百炼精铁",150,书铁种类)
--       local 日志 = 读入文件([[充值卡密/充值记录.txt]]) ..运行时间 .. "打造礼包-150书铁，账号：" .. 玩家数据[id].账号 .."，角色："..玩家数据[id].角色.数据.名称.."卡密：" ..内容.卡号
--       写出文件("充值卡密/充值记录.txt",日志.."\n")--充值日志
--       常规提示(id,"#Y恭喜您充值成功！")

--      ----灵饰礼包-100
--     elseif f函数.文件是否存在("充值卡密/灵饰礼包-100/"..内容.卡号..".txt")== true  and 内容.卡号~=""  then
--          os.remove(程序目录.."充值卡密/灵饰礼包-100/".. 内容.卡号..".txt")--删除使用卡密
--          玩家数据[id].道具:给予道具(id,"100级灵饰礼包")
--       local 日志 = 读入文件([[充值卡密/充值记录.txt]]) ..运行时间 .. "灵饰礼包-100，账号：" .. 玩家数据[id].账号 .."，角色："..玩家数据[id].角色.数据.名称.."卡密：" ..内容.卡号
--       写出文件("充值卡密/充值记录.txt",日志.."\n")--充值日志
--       常规提示(id,"#Y恭喜您充值成功！")

--     ----路费礼包
--     elseif f函数.文件是否存在("充值卡密/路费礼包/"..内容.卡号..".txt")== true  and 内容.卡号~=""  then
--          os.remove(程序目录.."充值卡密/路费礼包/".. 内容.卡号..".txt")--删除使用卡密
--          添加点卡(100,玩家数据[id].账号,id,"路费礼包")
--          玩家数据[id].角色.数据.自动开关.高级飞行棋=玩家数据[id].角色.数据.自动开关.高级飞行棋+1000
--          玩家数据[id].道具:给予道具(id,"60级装备礼包")
--          玩家数据[id].道具:给予道具(id,"60级装备礼包")
--          玩家数据[id].道具:给予道具(id,"60级装备礼包")
--       local 日志 = 读入文件([[充值卡密/充值记录.txt]]) ..运行时间 .. "路费礼包，账号：" .. 玩家数据[id].账号 .."，角色："..玩家数据[id].角色.数据.名称.."卡密：" ..内容.卡号
--       写出文件("充值卡密/充值记录.txt",日志.."\n")--充值日志
--       常规提示(id,"#Y恭喜您充值成功！")














--   elseif f函数.文件是否存在("充值卡密/仙玉-100-仙玉/"..内容.卡号..".txt")== true  and 内容.卡号~=""  then
--       os.remove(程序目录.."充值卡密/仙玉-100-仙玉/".. 内容.卡号..".txt")--删除使用卡密
--       添加仙玉(10000,玩家数据[id].账号,id,"cdk充值")
--       累冲金额总计(100,玩家数据[id].账号,id,"cdk充值")
--       local 日志 = 读入文件([[充值卡密/充值记录.txt]]) ..运行时间 .. "仙玉，账号：" .. 玩家数据[id].账号 .."，角色："..玩家数据[id].角色.数据.名称.."卡密：" ..内容.卡号
--       写出文件("充值卡密/充值记录.txt",日志.."\n")--充值日志
--       常规提示(id,"#Y恭喜您充值成功！")
--   elseif f函数.文件是否存在("充值卡密/仙玉-300-仙玉/"..内容.卡号..".txt")== true  and 内容.卡号~=""  then
--       os.remove(程序目录.."充值卡密/仙玉-300-仙玉/".. 内容.卡号..".txt")--删除使用卡密
--       添加仙玉(30000,玩家数据[id].账号,id,"cdk充值")
--       累冲金额总计(300,玩家数据[id].账号,id,"cdk充值")
--       local 日志 = 读入文件([[充值卡密/充值记录.txt]]) ..运行时间 .. "仙玉，账号：" .. 玩家数据[id].账号 .."，角色："..玩家数据[id].角色.数据.名称.."卡密：" ..内容.卡号
--       写出文件("充值卡密/充值记录.txt",日志.."\n")--充值日志
--       常规提示(id,"#Y恭喜您充值成功！")

--   elseif f函数.文件是否存在("充值卡密/仙玉-500-仙玉/"..内容.卡号..".txt")== true  and 内容.卡号~=""  then
--       os.remove(程序目录.."充值卡密/仙玉-500-仙玉/".. 内容.卡号..".txt")--删除使用卡密
--       添加仙玉(50000,玩家数据[id].账号,id,"cdk充值")
--       累冲金额总计(500,玩家数据[id].账号,id,"cdk充值")
--       local 日志 = 读入文件([[充值卡密/充值记录.txt]]) ..运行时间 .. "仙玉，账号：" .. 玩家数据[id].账号 .."，角色："..玩家数据[id].角色.数据.名称.."卡密：" ..内容.卡号
--       写出文件("充值卡密/充值记录.txt",日志.."\n")--充值日志
--       常规提示(id,"#Y恭喜您充值成功！")
--   elseif f函数.文件是否存在("充值卡密/仙玉-1000-仙玉/"..内容.卡号..".txt")== true  and 内容.卡号~=""  then
--       os.remove(程序目录.."充值卡密/仙玉-1000-仙玉/".. 内容.卡号..".txt")--删除使用卡密
--       添加仙玉(100000,玩家数据[id].账号,id,"cdk充值")
--       累冲金额总计(1000,玩家数据[id].账号,id,"cdk充值")
--       local 日志 = 读入文件([[充值卡密/充值记录.txt]]) ..运行时间 .. "仙玉，账号：" .. 玩家数据[id].账号 .."，角色："..玩家数据[id].角色.数据.名称.."卡密：" ..内容.卡号
--       写出文件("充值卡密/充值记录.txt",日志.."\n")--充值日志
--       常规提示(id,"#Y恭喜您充值成功！")
--   elseif f函数.文件是否存在("充值卡密/仙玉-2000-仙玉/"..内容.卡号..".txt")== true  and 内容.卡号~=""  then
--       os.remove(程序目录.."充值卡密/仙玉-2000-仙玉/".. 内容.卡号..".txt")--删除使用卡密
--       添加仙玉(200000,玩家数据[id].账号,id,"cdk充值")
--       累冲金额总计(2000,玩家数据[id].账号,id,"cdk充值")
--       local 日志 = 读入文件([[充值卡密/充值记录.txt]]) ..运行时间 .. "仙玉，账号：" .. 玩家数据[id].账号 .."，角色："..玩家数据[id].角色.数据.名称.."卡密：" ..内容.卡号
--       写出文件("充值卡密/充值记录.txt",日志.."\n")--充值日志
--       常规提示(id,"#Y恭喜您充值成功！")
--   elseif f函数.文件是否存在("充值卡密/仙玉-5000-仙玉/"..内容.卡号..".txt")== true  and 内容.卡号~=""  then
--       os.remove(程序目录.."充值卡密/仙玉-5000-仙玉/".. 内容.卡号..".txt")--删除使用卡密
--       添加仙玉(500000,玩家数据[id].账号,id,"cdk充值")
--       累冲金额总计(5000,玩家数据[id].账号,id,"cdk充值")
--       local 日志 = 读入文件([[充值卡密/充值记录.txt]]) ..运行时间 .. "仙玉，账号：" .. 玩家数据[id].账号 .."，角色："..玩家数据[id].角色.数据.名称.."卡密：" ..内容.卡号
--       写出文件("充值卡密/充值记录.txt",日志.."\n")--充值日志
--       常规提示(id,"#Y恭喜您充值成功！")
--   elseif f函数.文件是否存在("充值卡密/仙玉-10000-仙玉/"..内容.卡号..".txt")== true  and 内容.卡号~=""  then
--       os.remove(程序目录.."充值卡密/仙玉-10000-仙玉/".. 内容.卡号..".txt")--删除使用卡密
--       添加仙玉(1000000,玩家数据[id].账号,id,"cdk充值")
--       累冲金额总计(10000,玩家数据[id].账号,id,"cdk充值")
--       local 日志 = 读入文件([[充值卡密/充值记录.txt]]) ..运行时间 .. "仙玉，账号：" .. 玩家数据[id].账号 .."，角色："..玩家数据[id].角色.数据.名称.."卡密：" ..内容.卡号
--       写出文件("充值卡密/充值记录.txt",日志.."\n")--充值日志
--       常规提示(id,"#Y恭喜您充值成功！")

--   elseif f函数.文件是否存在("充值卡密/自动抓鬼30元周卡/"..内容.卡号..".txt")== true  and 内容.卡号~=""  then

--       os.remove(程序目录.."充值卡密/自动抓鬼30元周卡/".. 内容.卡号..".txt")--删除使用卡密
--       累冲金额总计(30,玩家数据[id].账号,id,"cdk充值")
--       local 日志 = 读入文件([[充值卡密/充值记录.txt]]) ..运行时间 .. "自动抓鬼周卡，账号：" .. 玩家数据[id].账号 .."，角色："..玩家数据[id].角色.数据.名称.."卡密：" ..内容.卡号
--       写出文件("充值卡密/充值记录.txt",日志.."\n")--充值日志
--       if 自动抓鬼数据[id]==nil or 自动抓鬼数据[id].天数<0 then
--         自动抓鬼数据[id]={天数=0}
--       end
--       自动抓鬼数据[id].天数=自动抓鬼数据[id].天数+7
--       常规提示(id,"#Y恭喜您自动抓鬼周卡激活成功！")
--        广播消息({内容=format( "#G/玩家 #R/#R/" .. 玩家数据[id].角色.数据.名称 .. " #G/激活了#R/" .. "#R/自动抓鬼".."#G/从此解放双手，畅快西游！#112" ),频道="xt"})

--   elseif f函数.文件是否存在("充值卡密/自动抓鬼100元月卡/"..内容.卡号..".txt")== true  and 内容.卡号~=""  then

--       os.remove(程序目录.."充值卡密/自动抓鬼100元月卡/".. 内容.卡号..".txt")--删除使用卡密
--       累冲金额总计(100,玩家数据[id].账号,id,"cdk充值")
--       local 日志 = 读入文件([[充值卡密/充值记录.txt]]) ..运行时间 .. "自动抓鬼月卡，账号：" .. 玩家数据[id].账号 .."，角色："..玩家数据[id].角色.数据.名称.."卡密：" ..内容.卡号
--       写出文件("充值卡密/充值记录.txt",日志.."\n")--充值日志
--       if 自动抓鬼数据[id]==nil or 自动抓鬼数据[id].天数<0 then
--         自动抓鬼数据[id]={天数=0}
--       end
--       自动抓鬼数据[id].天数=自动抓鬼数据[id].天数+30
--       常规提示(id,"#Y恭喜您自动抓鬼月卡激活成功！")
--        广播消息({内容=format( "#G/玩家 #R/#R/" .. 玩家数据[id].角色.数据.名称 .. " #G/激活了#R/" .. "#R/自动抓鬼".."#G/从此解放双手，畅快西游！#112" ),频道="xt"})

--   elseif f函数.文件是否存在("充值卡密/自动抓鬼永久卡/"..内容.卡号..".txt")== true  and 内容.卡号~=""  then
--       os.remove(程序目录.."充值卡密/自动抓鬼永久卡/".. 内容.卡号..".txt")--删除使用卡密
--       local 日志 = 读入文件([[充值卡密/充值记录.txt]]) ..运行时间 .. "自动抓鬼永久卡，账号：" .. 玩家数据[id].账号 .."，角色："..玩家数据[id].角色.数据.名称.."卡密：" ..内容.卡号
--       写出文件("充值卡密/充值记录.txt",日志.."\n")--充值日志
--       if 自动抓鬼数据[id]==nil or 自动抓鬼数据[id].天数<0 then
--         自动抓鬼数据[id]={天数=0}
--       end
--       自动抓鬼数据[id].天数=9999
--       自动抓鬼数据[id].永久=true
--       常规提示(id,"#Y恭喜您自动抓鬼永久卡激活成功！")
--     end
  elseif 序号 == 119.1 then
 self:自动抓鬼处理(内容.数字id)
  elseif 序号 == 119.2 then
    local id=内容.数字id
    if 自动抓鬼数据[id]==nil then
      玩家数据[id].角色.数据.自动抓鬼=false
      常规提示(id,"#Y您尚未激活自动抓鬼,请联系GM购买自动抓鬼卡")
    end
    if 玩家数据[id].队伍==0 or 玩家数据[id].队长==false then
        常规提示(id,"#Y/该任务必须组队完成且由队长领取")
        return
      elseif 取队伍最低等级(玩家数据[id].队伍,25) then
        常规提示(id,"#Y/等级小于25级的玩家无法领取此任务")
        return
      -- elseif 活动次数查询(id,"抓鬼任务")==false then
      --   常规提示(id,"#Y/剩余抓鬼次数不足")
      -- return
      elseif 自动抓鬼数据[id].天数<0 then
      玩家数据[id].角色.数据.自动抓鬼.开关=false
      常规提示(id,"#Y自动抓鬼剩余天数小于0无法开启")
      return
    end
    if 自动抓鬼数据[id] and 自动抓鬼数据[id].天数>0 then
    玩家数据[id].角色.数据.自动抓鬼=true
    常规提示(id,"#Y已开启自动抓鬼功能")
    发送数据(玩家数据[id].连接id,154,{开关=玩家数据[id].角色.数据.自动抓鬼})
    end
  elseif 序号 == 119.3 then

  if 玩家数据[内容.数字id].角色.数据.自动抓鬼 then
    玩家数据[内容.数字id].角色.数据.自动抓鬼=false
    常规提示(内容.数字id,"#Y已关闭自动抓鬼功能")
    发送数据(玩家数据[内容.数字id].连接id,154,{开关=玩家数据[内容.数字id].角色.数据.自动抓鬼})
  end

 elseif 序号 == 300 then
   多开系统类:切换角色(内容.数字id+0,内容)








  elseif 序号 == 901 then
    local id = 内容.数字id
    self:刷新交易数据(id,内容)
  elseif 序号 == 902 then
    local id = 内容.数字id
    self:购买交易中心商品(id,内容)
  elseif 序号 == 903 then
    local id = 内容.数字id
    self:出售交易中心商品(id,内容)
  end
end


function 系统处理类:内充处理(内容)--嘎嘎内充
  local id = 内容.数字id
  if 内充开启 then

    local 充值回执 = 处理充值(内容.卡号,id)
  print(充值回执,"充值回执走到这里了")
    if 充值回执  == "未找到" then
      常规提示(id,"#Y该卡号不存在！")
      return
    elseif 充值回执 == "已使用" then
      常规提示(id,"#Y该卡号已被使用！")
      return
    elseif 充值回执 == "非本机CDK" then
      常规提示(id,"#Y非法卡号，再用封号！")
      print(id.."使用错误的CDK进行充值，已被强制下线！",充值回执)
      if 累计错误 == nil then
        累计错误 = {}
      end
      累计错误[id] = (累计错误[id] or 0) + 1
      if 累计错误[id] >= 10 then
        f函数.写配置(程序目录..[[data/]]..玩家数据[id].账号.."/账号信息.txt", "账号配置", "封禁", "1")
      end
      --发送数据(玩家数据[id].连接id,998,"非法断开！")
      --self:断开游戏(id)
      return
    --elseif 充值回执 == "zgyk" then
      -- local 日志=读入文件([[自动充值记录.txt]])
      -- if string.len(日志)>102400 then
      --   写出文件([[数据存档\]]..时间转换2(os.time()).."自动充值记录.txt",日志)
      --   日志=""
      -- end
      -- 日志=日志..时间转换(os.time())..format("具体信息：数字id(%s)使用%s充值成功[%s]\n",id,充值回执,内容.卡号)
      -- 写出文件([[自动充值记录.txt]],日志)
      -- if 充值回执 == "zgyk" then
      --   if 自动抓鬼[id] == nil then
      --     自动抓鬼[id] = {状态="已激活",月卡时间=os.time()+2592000,今日剩余=0,开启=false}
      --   else
      --     自动抓鬼[id].状态 = "已激活"
      --     if os.time() > 自动抓鬼[id].月卡时间 then
      --       自动抓鬼[id].月卡时间=os.time()+2592000
      --     else
      --       自动抓鬼[id].月卡时间=自动抓鬼[id].月卡时间+2592000
      --     end
      --   end
      --   常规提示(id,"#Y激活抓鬼月卡成功,月卡到期日前,每日可领取自动抓鬼时间5小时！")
      -- end
      -- 日志=读入文件([[data\]]..玩家数据[id].账号..[[\消费记录.txt]])
      -- if string.len(日志)>102400 then
      --   写出文件([[data\]]..玩家数据[id].账号..[[\]]..取年月日(os.time()).."消费记录.txt",日志)
      --   日志=""
      -- end
      -- 日志=日志..时间转换(os.time())..format("具体信息：数字id(%s)使用%s充值成功[%s]\n",id,充值回执,内容.卡号)
      -- 写出文件([[data\]]..玩家数据[id].账号..[[\消费记录.txt]],日志)
      -- __S服务:输出(玩家数据[id].账号.."使用充值卡【"..内容.卡号.."】充值"..充值回执.."成功！")
    elseif 充值回执 == "月卡" then
      if 玩家数据[id].角色.数据.月卡领取 and 玩家数据[id].角色.数据.月卡领取>=1 then
          玩家数据[id].角色.数据.月卡激活=1
          玩家数据[id].角色.数据.月卡领取 = 玩家数据[id].角色.数据.月卡领取 + 30
          玩家数据[id].角色.数据.飞行时间限制=玩家数据[id].角色.数据.飞行时间限制+2592000
          常规提示(id,"恭喜您续费月卡成功")
      elseif 玩家数据[id].角色.数据.月卡领取==nil or 玩家数据[id].角色.数据.月卡领取 < 1 then
              玩家数据[id].角色.数据.月卡激活=1
              玩家数据[id].角色.数据.月卡领取=30
              玩家数据[id].角色.数据.飞行时间限制=os.time()+2592000
              常规提示(id,"恭喜您成功激活了月卡")
      end
      累冲金额总计(100,玩家数据[id].账号,id,"月卡充值")
      local 日志=读入文件([[自动充值记录.txt]])
      if string.len(日志)>102400 then
        写出文件([[数据存档\]]..时间转换2(os.time()).."自动充值记录.txt",日志)
        日志=""
      end
      日志=日志..时间转换(os.time())..format("具体信息：数字id(%s)使用%s充值成功[%s]\n",id,充值回执,内容.卡号)
      写出文件([[自动充值记录.txt]],日志)

      常规提示(id,"#Y激活月卡成功,月卡到期日前,每日可领取相应奖励！")
      日志=读入文件([[data\]]..玩家数据[id].账号..[[\消费记录.txt]])
      if string.len(日志)>102400 then
        写出文件([[data\]]..玩家数据[id].账号..[[\]]..取年月日(os.time()).."消费记录.txt",日志)
        日志=""
      end
      日志=日志..时间转换(os.time())..format("具体信息：数字id(%s)使用%s充值成功[%s]\n",id,充值回执,内容.卡号)
      写出文件([[data\]]..玩家数据[id].账号..[[\消费记录.txt]],日志)
      __S服务:输出(玩家数据[id].账号.."使用充值卡【"..内容.卡号.."】充值"..充值回执.."成功！")

    elseif 充值回执 == "路费礼包" then
          添加点卡(50,玩家数据[id].账号,id,"路费礼包")
          玩家数据[id].角色.数据.自动开关.高级飞行棋=玩家数据[id].角色.数据.自动开关.高级飞行棋+500


      local 日志=读入文件([[自动充值记录.txt]])
      if string.len(日志)>102400 then
        写出文件([[数据存档\]]..时间转换2(os.time()).."自动充值记录.txt",日志)
        日志=""
      end
      日志=日志..时间转换(os.time())..format("具体信息：数字id(%s)使用%s充值成功[%s]\n",id,充值回执,内容.卡号)
      写出文件([[自动充值记录.txt]],日志)

      常规提示(id,"#Y兑换成功！")
      日志=读入文件([[data\]]..玩家数据[id].账号..[[\消费记录.txt]])
      if string.len(日志)>102400 then
        写出文件([[data\]]..玩家数据[id].账号..[[\]]..取年月日(os.time()).."消费记录.txt",日志)
        日志=""
      end
      日志=日志..时间转换(os.time())..format("具体信息：数字id(%s)使用%s充值成功[%s]\n",id,充值回执,内容.卡号)
      写出文件([[data\]]..玩家数据[id].账号..[[\消费记录.txt]],日志)
      __S服务:输出(玩家数据[id].账号.."使用充值卡【"..内容.卡号.."】充值"..充值回执.."成功！")

    elseif 充值回执 == "礼包98" then
          玩家数据[id].道具:给予道具(id,"120级装备礼包")
         玩家数据[id].道具:给予道具(id,"80级灵饰礼包")
         玩家数据[id].道具:给予道具(id,"九转金丹",300,100)
         玩家数据[id].道具:给予道具(id,"神兜兜",50)
         添加点卡(100,玩家数据[id].账号,id,"礼包-98")
         累冲金额总计(98,玩家数据[id].账号,id,"cdk充值")

      local 日志=读入文件([[自动充值记录.txt]])
      if string.len(日志)>102400 then
        写出文件([[数据存档\]]..时间转换2(os.time()).."自动充值记录.txt",日志)
        日志=""
      end
      日志=日志..时间转换(os.time())..format("具体信息：数字id(%s)使用%s充值成功[%s]\n",id,充值回执,内容.卡号)
      写出文件([[自动充值记录.txt]],日志)

      常规提示(id,"#Y兑换成功！")
      日志=读入文件([[data\]]..玩家数据[id].账号..[[\消费记录.txt]])
      if string.len(日志)>102400 then
        写出文件([[data\]]..玩家数据[id].账号..[[\]]..取年月日(os.time()).."消费记录.txt",日志)
        日志=""
      end
      日志=日志..时间转换(os.time())..format("具体信息：数字id(%s)使用%s充值成功[%s]\n",id,充值回执,内容.卡号)
      写出文件([[data\]]..玩家数据[id].账号..[[\消费记录.txt]],日志)
      __S服务:输出(玩家数据[id].账号.."使用充值卡【"..内容.卡号.."】充值"..充值回执.."成功！")

    elseif 充值回执 == "礼包198" then
          玩家数据[id].道具:给予道具(id,"130级装备礼包")
         玩家数据[id].道具:给予道具(id,"100级灵饰礼包")
         玩家数据[id].道具:给予道具(id,"九转金丹",400,100)
         玩家数据[id].道具:给予道具(id,"神兜兜",99)
         添加点卡(300,玩家数据[id].账号,id,"礼包-198")
         累冲金额总计(198,玩家数据[id].账号,id,"cdk充值")

      local 日志=读入文件([[自动充值记录.txt]])
      if string.len(日志)>102400 then
        写出文件([[数据存档\]]..时间转换2(os.time()).."自动充值记录.txt",日志)
        日志=""
      end
      日志=日志..时间转换(os.time())..format("具体信息：数字id(%s)使用%s充值成功[%s]\n",id,充值回执,内容.卡号)
      写出文件([[自动充值记录.txt]],日志)

      常规提示(id,"#Y兑换成功！")
      日志=读入文件([[data\]]..玩家数据[id].账号..[[\消费记录.txt]])
      if string.len(日志)>102400 then
        写出文件([[data\]]..玩家数据[id].账号..[[\]]..取年月日(os.time()).."消费记录.txt",日志)
        日志=""
      end
      日志=日志..时间转换(os.time())..format("具体信息：数字id(%s)使用%s充值成功[%s]\n",id,充值回执,内容.卡号)
      写出文件([[data\]]..玩家数据[id].账号..[[\消费记录.txt]],日志)
      __S服务:输出(玩家数据[id].账号.."使用充值卡【"..内容.卡号.."】充值"..充值回执.."成功！")

    elseif 充值回执 == "礼包648" then
          玩家数据[id].道具:给予道具(id,"140级装备礼包")
         玩家数据[id].道具:给予道具(id,"100级灵饰礼包")
         玩家数据[id].道具:给予道具(id,"九转金丹",500,100)
         玩家数据[id].道具:给予道具(id,"神兜兜",200)
         玩家数据[id].道具:给予道具(id,"召唤兽祈愿卡",1)
         添加点卡(1000,玩家数据[id].账号,id,"礼包-648")
         累冲金额总计(648,玩家数据[id].账号,id,"cdk充值")

      local 日志=读入文件([[自动充值记录.txt]])
      if string.len(日志)>102400 then
        写出文件([[数据存档\]]..时间转换2(os.time()).."自动充值记录.txt",日志)
        日志=""
      end
      日志=日志..时间转换(os.time())..format("具体信息：数字id(%s)使用%s充值成功[%s]\n",id,充值回执,内容.卡号)
      写出文件([[自动充值记录.txt]],日志)

      常规提示(id,"#Y兑换成功！")
      日志=读入文件([[data\]]..玩家数据[id].账号..[[\消费记录.txt]])
      if string.len(日志)>102400 then
        写出文件([[data\]]..玩家数据[id].账号..[[\]]..取年月日(os.time()).."消费记录.txt",日志)
        日志=""
      end
      日志=日志..时间转换(os.time())..format("具体信息：数字id(%s)使用%s充值成功[%s]\n",id,充值回执,内容.卡号)
      写出文件([[data\]]..玩家数据[id].账号..[[\消费记录.txt]],日志)
      __S服务:输出(玩家数据[id].账号.."使用充值卡【"..内容.卡号.."】充值"..充值回执.."成功！")


    elseif string.find(充值回执,"*") then
      local 道具信息 = 分割文本(充值回执,"*")
      local 名称
      local 数量
      local 参数

      if 道具信息[1]=="低兽" then
         道具信息[1]="魔兽要诀"
      elseif 道具信息[1]=="高兽" then
         道具信息[1]="高级魔兽要诀"
      end

      if 取物品数据(道具信息[1])[2] then
        名称 = 道具信息[1]
        数量 = (道具信息[2]+0) or 1
        参数 = 道具信息[3]
      elseif 道具信息[1]=="自动次数" or 道具信息[1]=="打造礼包" or 道具信息[1]=="灵饰礼包" or 道具信息[1]=="仙玉" then
        名称 = 道具信息[1]
        数量 = (道具信息[2]+0) or 1
      end
      if 名称=="自动次数" then
      玩家数据[id].角色.数据.自动开关.高级飞行棋=玩家数据[id].角色.数据.自动开关.高级飞行棋+数量
      常规提示(id,"#Y你的自动次数补充了"..数量.."点")
      累冲金额总计(数量/100,玩家数据[id].账号,id,"cdk充值")

      elseif 名称=="打造礼包" then
          local 书铁范围 = {"枪矛","斧钺","剑","双短剑","飘带","爪刺","扇","魔棒","锤","鞭","环圈","刀","法杖","弓弩","宝珠","巨剑","伞","灯笼","头盔","发钗","项链","女衣","男衣","腰带","鞋子"}
          local 书铁种类=取随机数(1,#书铁范围)
          玩家数据[id].道具:给予道具(id,"制造指南书",数量,书铁种类)
          玩家数据[id].道具:给予道具(id,"百炼精铁",数量,书铁种类)

      elseif 名称=="灵饰礼包" then
          local 灵饰礼包嘎嘎=数量.."级灵饰礼包"
          玩家数据[id].道具:给予道具(id,灵饰礼包嘎嘎)

      elseif 名称=="仙玉" then
       添加仙玉(数量,玩家数据[id].账号,id,"cdk充值")
       累冲金额总计(数量/100,玩家数据[id].账号,id,"cdk充值")



      else

      玩家数据[id].道具:给予道具(id,名称,数量,参数)
      end
      __S服务:输出(玩家数据[id].账号.."使用充值卡【"..内容.卡号.."】兑换"..充值回执.."成功！")
      常规提示(id,"#Y兑换成功！")
      local 日志=读入文件([[自动充值记录.txt]])
      if string.len(日志)>102400 then
        写出文件([[数据存档\]]..时间转换2(os.time()).."自动充值记录.txt",日志)
        日志=""
      end
      日志=日志..时间转换(os.time())..format("具体信息：数字id(%s)使用%s充值成功[%s]\n",id,充值回执,内容.卡号)
      写出文件([[自动充值记录.txt]],日志)

      日志=读入文件([[data\]]..玩家数据[id].账号..[[\消费记录.txt]])
      if string.len(日志)>102400 then
        写出文件([[data\]]..玩家数据[id].账号..[[\]]..取年月日(os.time()).."消费记录.txt",日志)
        日志=""
      end
      日志=日志..时间转换(os.time())..format("具体信息：数字id(%s)使用%s充值成功[%s]\n",id,充值回执,内容.卡号)
      写出文件([[data\]]..玩家数据[id].账号..[[\消费记录.txt]],日志)
      -- if 名称=="孔雀明王礼盒" then
      --   玩家数据[id].角色.钞能力=玩家数据[id].角色.钞能力+数量*10
      --   添加钞能力称谓(id)
      -- elseif 名称=="金击子" then
      --   玩家数据[id].角色.钞能力=玩家数据[id].角色.钞能力+数量*10
      --   添加钞能力称谓(id)
      -- elseif 名称=="新手礼包" and 服务端参数.机器码 == "EBED001BAB981F8BFBFF00050655" then
      --   玩家数据[id].角色.钞能力=玩家数据[id].角色.钞能力+数量*38
      --   添加钞能力称谓(id)
      -- elseif 名称=="地藏王礼盒" and 服务端参数.机器码 == "EBED001BAB981F8BFBFF00050655" then
      --   玩家数据[id].角色.钞能力=玩家数据[id].角色.钞能力+数量*10
      --   添加钞能力称谓(id)
      -- end
    elseif tonumber(充值回执) == nil then
      print(id.."使用错误的CDK进行充值，已被强制下线！",充值回执)
      常规提示(id,"#Y该卡号面值异常请联系管理员处理！333")
      if 累计错误 == nil then
        累计错误 = {}
      end
      累计错误[id] = (累计错误[id] or 0) + 1
      if 累计错误[id] >= 10 then
        f函数.写配置(程序目录..[[data/]]..玩家数据[id].账号.."/账号信息.txt", "账号配置", "封禁", "1")
      end
      --发送数据(玩家数据[id].连接id,998,"非法断开！")
      --self:断开游戏(id)
      return
    else

      local 本次充值 = tonumber(充值回执)--/10

      添加点卡(本次充值,玩家数据[id].账号,id,"cdk点卡充值")
      累冲金额总计(本次充值,玩家数据[id].账号,id,"cdk点卡充值")
      常规提示(id,"#Y充值点卡成功！")

      local 日志=读入文件([[自动充值记录.txt]])
      if string.len(日志) >102400 then
        写出文件([[数据存档\]]..时间转换2(os.time()).."自动充值记录.txt",日志)
        日志=""
      end
      日志=日志..时间转换(os.time())..format("具体信息：数字id(%s)使用%s充值点卡成功[%s],充值后点卡:%s\n",id,充值回执,内容.卡号,点卡)
      写出文件([[自动充值记录.txt]],日志)
      日志=读入文件([[data\]]..玩家数据[id].账号..[[\消费记录.txt]])
      if string.len(日志) >102400 then
        写出文件([[data\]]..玩家数据[id].账号..[[\]]..取年月日(os.time()).."消费记录.txt",日志)
        日志=""
      end
      日志=日志..时间转换(os.time())..format("具体信息：使用%s充值点卡成功[%s],充值后点卡:%s本次操作角色id:%s\n",充值回执,内容.卡号,点卡,id)
      写出文件([[data\]]..玩家数据[id].账号..[[\消费记录.txt]],日志)
      __S服务:输出(玩家数据[id].账号.."使用【"..内容.卡号.."】充值"..充值回执.."点卡成功！")
    end
    self:获取点卡数据(id)
  else
    常规提示(id,"#Y内充系统异常,请联系管理员处理！")
  end
end




function 系统处理类:刷新助战灵饰(id,编号)
   锦衣数据 = {}
  if 玩家数据[id].助战.数据[编号].锦衣[1]~=nil then
         锦衣数据[1]=table.loadstring(table.tostring(玩家数据[id].道具.数据[玩家数据[id].助战.数据[编号].锦衣[1]]))
  end
  if 玩家数据[id].助战.数据[编号].锦衣[2]~=nil then
    锦衣数据[2]=table.loadstring(table.tostring(玩家数据[id].道具.数据[玩家数据[id].助战.数据[编号].锦衣[2]]))
  end
  if 玩家数据[id].助战.数据[编号].锦衣[3]~=nil then
    锦衣数据[3]=table.loadstring(table.tostring(玩家数据[id].道具.数据[玩家数据[id].助战.数据[编号].锦衣[3]]))
  end
  if 玩家数据[id].助战.数据[编号].锦衣[4]~=nil then
    锦衣数据[4]=table.loadstring(table.tostring(玩家数据[id].道具.数据[玩家数据[id].助战.数据[编号].锦衣[4]]))
  end
   发送数据(玩家数据[id].连接id,107.1,{编号=编号,锦衣=锦衣数据})
   end
function 系统处理类:增加奇经八脉(id,位置,编号)
  if 玩家数据[id].助战.数据[编号].门派~=nil and 玩家数据[id].助战.数据[编号].门派~="无门派" then
    local x读取 = self:提取奇经八脉(玩家数据[id].助战.数据[编号].门派)
    if x读取~=nil and x读取[位置]~=nil and x读取[位置]~=1 then
      if 玩家数据[id].助战.数据[编号].装备属性.剩余乾元丹~=nil and 玩家数据[id].助战.数据[编号].装备属性.剩余乾元丹>0 then
        if 玩家数据[id].助战.数据[编号].奇经八脉==nil then
            玩家数据[id].助战.数据[编号].奇经八脉={}
        end
        玩家数据[id].助战.数据[编号].装备属性.剩余乾元丹=玩家数据[id].助战.数据[编号].装备属性.剩余乾元丹-1
        玩家数据[id].助战.数据[编号].装备属性.乾元丹=玩家数据[id].助战.数据[编号].装备属性.乾元丹+1
        玩家数据[id].助战.数据[编号].奇经八脉[x读取[位置]]=1
        if 位置 >= 19 then
          玩家数据[id].助战.数据[编号].奇经八脉[x读取[20]]=1
        end
        玩家数据[id].助战.数据[编号].奇经八脉.开启奇经八脉=true
        玩家数据[id].助战.数据[编号].奇经八脉.技能树 = self:技能树(位置) or 1
        常规提示(id,"#Y/恭喜你又学会了一种经脉!")
    发送数据(玩家数据[id].连接id,7008,{编号=编号,门派=玩家数据[id].助战.数据[编号].门派,奇经八脉=玩家数据[id].助战.数据[编号].奇经八脉,装备属性=玩家数据[id].助战.数据[编号].装备属性})
      else
        常规提示(id,"#Y/对不起!奇经八脉学习失败!因为剩余乾元丹不够本次学习")
      end
      return
    end
  end
  常规提示(id,"#Y/对不起!奇经八脉学习失败")
  return
end

function 系统处理类:提取奇经八脉(mp)
  if mp == "方寸山" then
    return {"苦缠","雷动","奔雷","黄粱","不舍","鬼惧","补缺","不倦","不灭","化身","调息","批亢","斗法","吐纳","飞符炼魂","鬼念","碎甲","摧心","顺势而为","额外能力方寸山","钟馗论道"}
  elseif mp == "女儿村" then
    return {"自矜","暗伤","杏花","花舞","倩影","淬芒","傲娇","花护","天香","国色","鸿影","轻霜","机巧","毒引","毒雾","嫣然","磐石","花殇","碎玉弄影","额外能力女儿村","鸿渐于陆"}
  elseif mp == "神木林" then
    return {"风灵","法身","咒术","灵压","咒法","蔓延","鞭挞","月影","不侵","风魂","冰锥","血契","滋养","纯净","破杀","追击","灵能","寄生","风卷残云","额外能力神木林","凋零之歌"}
  elseif mp == "化生寺" then
    return {"止戈","销武","佛屠","佛誉","仁心","聚气","佛显","心韧","归气","天照","舍利","感念","慈针","佛性","妙悟","慈心","映法","流刚","渡劫金身","额外能力化生寺","诸天看护"}
  elseif mp == "大唐官府" then
    return {"目空","风刃","扶阵","翩鸿一击","勇武","长驱直入","杀意","念心","静岳","干将","勇念","神凝","狂狷","不惊","突进","破空","历战","连破","无敌","额外能力大唐官府","破军"}
  elseif mp == "阴曹地府" then
    return {"判官","回旋","夜行","入骨","聚魂","六道无量","索魂","伤魂","百炼","黄泉","毒印","百爪狂杀","幽光","泉爆","鬼火","魂飞","汲魂","击破","魑魅缠身","额外能力阴曹地府","夜之王者"}
  elseif mp == "盘丝洞" then
    return {"鼓乐","妖气","怜心","迷瘴","粘附","意乱","绝殇","安抚","忘忧","忘川","迷梦","倾情","情劫","脱壳","迷意","结阵","媚态","利刃","落花成泥","额外能力盘丝洞","偷龙转凤"}
  elseif mp == "无底洞" then
    return {"金莲","追魂","回敬","由己渡人","自愈","陷阱","化莲","风墙","御兽","精进","救人","灵身","持戒","内伤","反先","忍辱","暗潮","噬魂","同舟共济","额外能力无底洞","妖风四起"}
  elseif mp == "魔王寨" then
    return {"充沛","炙烤","震怒","蚀天","敛恨","赤暖","火神","震天","神焰","神炎","返火","崩摧","魔冥","燃魂","狂月","威吓","连营","魔心","魔焰滔天","额外能力魔王寨","烈焰真诀"}
  elseif mp == "狮驼岭" then
    return {"爪印","翼展","驭兽","化血","宁息","兽王","狮吼","怒象","鹰啸","乱破","魔息","威慑","狂袭","失心","羁绊","死地","乱击","悲恸","背水","额外能力狮驼岭","肝胆"}
  elseif mp == "天宫" then
    return {"威赫","疾雷","轰鸣","趁虚","余韵","驭意","震慑","神念","伏魔","苏醒","护佑","电芒","月桂","怒火","灵光","神律","洞察","雷波","画地为牢","额外能力天宫","风雷韵动"}
  elseif mp == "普陀山" then
    return {"化戈","推衍","借灵","莲花心音","生克","默诵","劳心","普渡","化怨","甘露","法印","秘术","灵动","雨润","莲心剑意","玉帛","道衍","法咒","波澜不惊","额外能力普陀山","五行制化"}
  elseif mp == "凌波城" then
    return {"山破","战诀","抗击","聚气","神诀","魂聚","神躯","斩魔","不动","力战","破击","怒涛","海沸","怒火","煞气","强袭","雷附","再战","天神怒斩","额外能力凌波城","真君显灵"}
  elseif mp == "五庄观" then
    return {"体恤","锤炼","神附","心浪","养生","强击","归本","修心","混元","修身","同辉","雨杀","乾坤","意境","傲视","陌宝","心随意动","致命","清风望月","额外能力五庄观","天命剑法"}
  elseif mp == "龙宫" then
    return {"波涛","破浪","云霄","逐浪","踏涛","清吟","天龙","龙珠","龙骇","龙慑","傲翔","飞龙","戏珠","回魔","月魂","汹涌","龙魄","摧意","亢龙归海","额外能力龙宫","雷浪穿云"}
  elseif mp == "女魃墓" then
    return {"腐蚀","引魂","咒怨","不共戴天","灵诅","噬魔","异兆","不灭","灵威","余烬","遗世","怒火","凋零","血泉","俱灭","焕然","伤蚀","狂焰","觉醒","额外能力女魃墓","无相诛戮"}
  elseif mp == "天机城" then
    return {"锐志","精奇","善工","玄机","催锋","巧偃","连枷","断矶","纯青","无痕","奇肱","攻云","造化","天匠","穷变","鲸甲","天机神迹","不厌","铜山铁壁","额外能力天机城","所向披靡"}
  elseif mp == "花果山" then
    return {"顽心","逐胜","愈勇","斗志","忘形","贪天","显圣","锤炼","火眼","闹天","铁骨","搅海","伏妖","豪胆","压邪","战魄","不坏","荡魔","战神","额外能力花果山","齐天神通"}
  end
end

function 系统处理类:技能树(a)
  if a == 1 or a == 4 or a == 7 or a == 10 or a == 13 or a == 16 then
    if a == 16 then
      return {a+3}
    else
      return {a+1,a+2}
    end
  elseif a == 2 or a == 5 or a == 8 or a == 11 or a == 14 or a == 17 then
    if a == 17 then
      return {a+2,a+4}
    else
      return {a+2,a+3,a+4}
    end
  elseif a == 3 or a == 6 or a == 9 or a == 12 or a == 15 or a == 18 then
    if a == 18 then
      return {a+3}
    else
      return {a+2,a+3}
    end
  end
end


function 系统处理类:清空奇经八脉(id,编号)
  local 清空奇经八脉费用 = 500000
  if 取银子(id) < 清空奇经八脉费用 then
      常规提示(id,"#Y/你当前的银两不够清空奇经八脉哦，清空奇经八脉需要"..清空奇经八脉费用.."两银子！")
      return
  end
  if 玩家数据[id].助战.数据[编号].装备属性.乾元丹~=nil and 玩家数据[id].助战.数据[编号].装备属性.乾元丹==0 then
      常规提示(id,"#Y/你当前没有可清空的奇经八脉！")
      return
  end
  玩家数据[id].角色:扣除银子(清空奇经八脉费用,0,0,"清空奇经八脉费用",1)
  玩家数据[id].助战.数据[编号].奇经八脉 = {}
  玩家数据[id].助战.数据[编号].开启奇经八脉 = nil
  玩家数据[id].助战.数据[编号].技能树 = nil
  玩家数据[id].助战.数据[编号].装备属性.剩余乾元丹=玩家数据[id].助战.数据[编号].装备属性.剩余乾元丹+玩家数据[id].助战.数据[编号].装备属性.乾元丹
  玩家数据[id].助战.数据[编号].装备属性.乾元丹=0
  常规提示(id,"#Y/恭喜你，经脉重置成功！")
  发送数据(玩家数据[id].连接id,7008,{编号=编号,门派=玩家数据[id].助战.数据[编号].门派,奇经八脉=玩家数据[id].助战.数据[编号].奇经八脉,装备属性=玩家数据[id].助战.数据[编号].装备属性})
end
function 系统处理类:兑换乾元丹(id,编号)
  local 附加乾元丹=玩家数据[id].助战.数据[编号].装备属性.附加乾元丹
  local 乾元丹消耗=取乾元丹消耗(附加乾元丹+1)
  if 取银子(id) < 乾元丹消耗.金钱 then
      常规提示(id,"#Y/你当前的银两不够兑换乾元丹哦！")
      return
  end
  if 玩家数据[id].助战.数据[编号].当前经验 < 乾元丹消耗.经验 then
      常规提示(id,"#Y/你当前的经验不够兑换乾元丹哦！")
      return
  end
  if 玩家数据[id].助战.数据[编号].装备属性.附加乾元丹 >= 玩家数据[id].助战.数据[编号].装备属性.可换乾元丹 then
      常规提示(id,"#Y/你当前不满足兑换乾元丹的条件哦！")
      return
  end
  玩家数据[id].角色:扣除银子(乾元丹消耗.金钱,0,0,"乾元丹消耗",1)
  玩家数据[id].助战.数据[编号].当前经验=玩家数据[id].助战.数据[编号].当前经验-乾元丹消耗.经验
  玩家数据[id].助战.数据[编号].装备属性.附加乾元丹=玩家数据[id].助战.数据[编号].装备属性.附加乾元丹+1
  玩家数据[id].助战.数据[编号].装备属性.剩余乾元丹=玩家数据[id].助战.数据[编号].装备属性.剩余乾元丹+1
  添加最后对话(id,"兑换乾元丹成功！")
  发送数据(玩家数据[id].连接id,7008,{编号=编号,门派=玩家数据[id].助战.数据[编号].门派,奇经八脉=玩家数据[id].助战.数据[编号].奇经八脉,装备属性=玩家数据[id].助战.数据[编号].装备属性})
end
function 系统处理类:升级技能(jn,编号,id) -- 升级获得技能
  -- 化生
  local 编号 = 编号 + 0
  local id = id + 0
  if jn.等级 == nil then
    jn.等级 = 1
  end
  local floor = math.floor
  if jn.名称 == "小乘佛法" then
    玩家数据[id].助战.数据[编号].技能属性.灵力 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "金刚伏魔" then
    玩家数据[id].助战.数据[编号].技能属性.伤害 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "大慈大悲" then
    玩家数据[id].助战.数据[编号].技能属性.防御 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "渡世步" then
    玩家数据[id].助战.数据[编号].技能属性.躲避 = floor(jn.等级 * 2.5)
  -- 大唐
  elseif jn.名称 == "无双一击" then
    玩家数据[id].助战.数据[编号].技能属性.命中 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "神兵鉴赏" then
    玩家数据[id].助战.数据[编号].技能属性.躲避 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "十方无敌" then
    玩家数据[id].助战.数据[编号].技能属性.伤害 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "紫薇之术" then
    玩家数据[id].助战.数据[编号].技能属性.灵力 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "文韬武略" then
    玩家数据[id].助战.数据[编号].技能属性.防御 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "九龙诀" then
    玩家数据[id].助战.数据[编号].技能属性.灵力 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "破浪诀" then
    玩家数据[id].助战.数据[编号].技能属性.伤害 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "逆鳞术" then
    玩家数据[id].助战.数据[编号].技能属性.防御 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "游龙术" then
    玩家数据[id].助战.数据[编号].技能属性.躲避 = floor(jn.等级 * 2.5)
  -- 方寸
  elseif jn.名称 == "磐龙灭法" then
    玩家数据[id].助战.数据[编号].技能属性.伤害 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "归元心法" then
    玩家数据[id].助战.数据[编号].技能属性.防御 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "神道无念" then
    玩家数据[id].助战.数据[编号].技能属性.灵力 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "斜月步" then
    玩家数据[id].助战.数据[编号].技能属性.躲避 = floor(jn.等级 * 2.5)
  -- 地府
  elseif jn.名称 == "六道轮回" then
    玩家数据[id].助战.数据[编号].技能属性.伤害 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "九幽阴魂" then
    玩家数据[id].助战.数据[编号].技能属性.灵力 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "尸腐恶" then
    玩家数据[id].助战.数据[编号].技能属性.防御 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "无常步" then
    玩家数据[id].助战.数据[编号].技能属性.速度 = floor(jn.等级 * 2.5)
  -- 天宫
  elseif jn.名称 == "天罡气" then
    玩家数据[id].助战.数据[编号].技能属性.伤害 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "宁气诀" then
    玩家数据[id].助战.数据[编号].技能属性.灵力 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "清明自在" then
    玩家数据[id].助战.数据[编号].技能属性.气血 = floor(jn.等级 * 3)
  elseif jn.名称 == "乾坤塔" then
    玩家数据[id].助战.数据[编号].技能属性.防御 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "云霄步" then
    玩家数据[id].助战.数据[编号].技能属性.躲避 = floor(jn.等级 * 2.5)
  -- 魔王
  elseif jn.名称 == "裂石步" then
    玩家数据[id].助战.数据[编号].技能属性.躲避 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "震天诀" then
    玩家数据[id].助战.数据[编号].技能属性.伤害 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "火牛阵" then
    玩家数据[id].助战.数据[编号].技能属性.灵力 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "回身击" then
    玩家数据[id].助战.数据[编号].技能属性.防御 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "裂石步" then
    玩家数据[id].助战.数据[编号].技能属性.速度 = floor(jn.等级 * 2.5)
  --普陀
  elseif jn.名称 == "灵性" then
    玩家数据[id].助战.数据[编号].技能属性.灵力 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "护法金刚" then
    玩家数据[id].助战.数据[编号].技能属性.伤害 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "五行扭转" then
    玩家数据[id].助战.数据[编号].技能属性.防御 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "莲花宝座" then
    玩家数据[id].助战.数据[编号].技能属性.躲避 = floor(jn.等级 * 2.5)
  -- 五庄观
  elseif jn.名称 == "周易学" then
    玩家数据[id].助战.数据[编号].技能属性.魔法 = floor(jn.等级 * 3)
  elseif jn.名称 == "潇湘仙雨" then
    玩家数据[id].助战.数据[编号].技能属性.伤害 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "混元道果" then
    玩家数据[id].助战.数据[编号].技能属性.灵力 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "明性修身" then
    玩家数据[id].助战.数据[编号].技能属性.防御 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "七星遁" then
    玩家数据[id].助战.数据[编号].技能属性.躲避 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "生死搏" then
    玩家数据[id].助战.数据[编号].技能属性.伤害 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "训兽诀" then
    玩家数据[id].助战.数据[编号].技能属性.灵力 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "大鹏展翅" then
    玩家数据[id].助战.数据[编号].技能属性.躲避 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "魔兽反噬" then
    玩家数据[id].助战.数据[编号].技能属性.防御 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "秋波暗送" then
    玩家数据[id].助战.数据[编号].技能属性.命中 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "蛛丝阵法" then
    玩家数据[id].助战.数据[编号].技能属性.防御 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "盘丝大法" then
    玩家数据[id].助战.数据[编号].技能属性.伤害 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "盘丝步" then
    玩家数据[id].助战.数据[编号].技能属性.躲避 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "气吞山河" then
    玩家数据[id].助战.数据[编号].技能属性.伤害 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "啸傲" then
    玩家数据[id].助战.数据[编号].技能属性.灵力 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "诛魔" then
    玩家数据[id].助战.数据[编号].技能属性.防御 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "法天象地" then
    玩家数据[id].助战.数据[编号].技能属性.命中 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "万灵诸念" then
    玩家数据[id].助战.数据[编号].技能属性.灵力 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "巫咒" then
    玩家数据[id].助战.数据[编号].技能属性.伤害 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "万物轮转" then
    玩家数据[id].助战.数据[编号].技能属性.防御 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "天人庇护" then
    玩家数据[id].助战.数据[编号].技能属性.躲避 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "驭灵咒" then
    玩家数据[id].助战.数据[编号].技能属性.魔法 = floor(jn.等级 * 3)
  elseif jn.名称 == "鬼蛊灵蕴" then
    玩家数据[id].助战.数据[编号].技能属性.灵力 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "燃灯灵宝" then
    玩家数据[id].助战.数据[编号].技能属性.防御 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "混元神功" then
    玩家数据[id].助战.数据[编号].技能属性.伤害 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "秘影迷踪" then
    玩家数据[id].助战.数据[编号].技能属性.速度 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "毒经" then
    玩家数据[id].助战.数据[编号].技能属性.伤害 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "香飘兰麝" then
    玩家数据[id].助战.数据[编号].技能属性.灵力 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "玉质冰肌" then
    玩家数据[id].助战.数据[编号].技能属性.防御 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "清歌妙舞" then
    玩家数据[id].助战.数据[编号].技能属性.速度 = floor(jn.等级 * 2.5)
  --女魃墓
  elseif jn.名称 == "天罚之焰" then
    玩家数据[id].助战.数据[编号].技能属性.灵力 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "煌火无明"  then
    玩家数据[id].助战.数据[编号].技能属性.伤害 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "弹指成烬" then
    玩家数据[id].助战.数据[编号].技能属性.防御 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "藻光灵狱" then
    玩家数据[id].助战.数据[编号].技能属性.防御 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "离魂" then
    玩家数据[id].助战.数据[编号].技能属性.速度 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "千机奇巧"  then
    玩家数据[id].助战.数据[编号].技能属性.防御 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "匠心不移" then
    玩家数据[id].助战.数据[编号].技能属性.伤害 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "运思如电" then
    玩家数据[id].助战.数据[编号].技能属性.躲避 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "探奥索隐" then
    玩家数据[id].助战.数据[编号].技能属性.灵力 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "如意金箍" then
    玩家数据[id].助战.数据[编号].技能属性.伤害 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "金刚之躯" then
    玩家数据[id].助战.数据[编号].技能属性.防御 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "灵猴九窍" then
    玩家数据[id].助战.数据[编号].技能属性.命中 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "七十二变" then
    玩家数据[id].助战.数据[编号].技能属性.灵力 = floor(jn.等级 * 2.5)
  elseif jn.名称 == "腾云驾霧" then
    玩家数据[id].助战.数据[编号].技能属性.灵力 = floor(jn.等级 * 2.5)
  end
end

function 系统处理类:剑会天下单人匹配处理()
  --("开始单人对战处理")
  if 判断是否为空表(剑会天下单人匹配) then
    return
  end
  --进行一次积分排序
  table.sort(剑会天下单人匹配,积分排序)
  --排队分组 安排队友计算
  for n,v in pairs(剑会天下单人匹配) do
    if 玩家数据[v.id] ~= nil and v.匹配 and 玩家数据[v.id].战斗 ==0 and 玩家数据[v.id].观战 == nil then
      local 红方玩家id = v.id
      v.匹配=false
      local 蓝方玩家id = 0
      if n%2 == 1 then
        if n~=#剑会天下单人匹配 then
          蓝方玩家id=剑会天下单人匹配[n+1].id or 0
          剑会天下单人匹配[n+1].匹配=false
        else
          local 剑会假人属性 = {}
          local 武器伤害 = 0
          if 玩家数据[红方玩家id].角色.数据.装备[3]~=nil then
            local 临时武器=table.loadstring(table.tostring(玩家数据[红方玩家id].道具.数据[玩家数据[红方玩家id].角色.数据.装备[3]]))
            武器伤害=qz(临时武器.伤害+临时武器.命中*0.3)
          end
          剑会假人属性[#剑会假人属性+1]={
            名称=取随机中文姓名(取随机数(2,5)),
            模型=玩家数据[红方玩家id].角色.数据.模型,
            等级=玩家数据[红方玩家id].角色.数据.等级,
            气血=玩家数据[红方玩家id].角色.数据.最大气血,
            魔法=玩家数据[红方玩家id].角色.数据.最大魔法,
            伤害=玩家数据[红方玩家id].角色.数据.伤害,
            灵力=玩家数据[红方玩家id].角色.数据.灵力+玩家数据[红方玩家id].角色.数据.法术伤害,
            速度=玩家数据[红方玩家id].角色.数据.速度,
            防御=玩家数据[红方玩家id].角色.数据.防御,
            法防=玩家数据[红方玩家id].角色.数据.灵力+玩家数据[红方玩家id].角色.数据.法术防御,
            攻击修炼=玩家数据[红方玩家id].角色.数据.修炼.攻击修炼[1],
            法术修炼=玩家数据[红方玩家id].角色.数据.修炼.法术修炼[1],
            防御修炼=玩家数据[红方玩家id].角色.数据.修炼.防御修炼[1],
            抗法修炼=玩家数据[红方玩家id].角色.数据.修炼.抗法修炼[1],
            角色分类="角色",
            门派=玩家数据[红方玩家id].角色.数据.门派,
            五维属性={体质=玩家数据[红方玩家id].角色.数据.体质,魔力=玩家数据[红方玩家id].角色.数据.魔力,力量=玩家数据[红方玩家id].角色.数据.力量,耐力=玩家数据[红方玩家id].角色.数据.耐力,敏捷=玩家数据[红方玩家id].角色.数据.敏捷},
            武器伤害=武器伤害,
            位置=1,
          }
          -- table.print(玩家数据[红方玩家id].角色.数据)
          if not 判断是否为空表(玩家数据[红方玩家id].角色.数据.参战宝宝) then
            剑会假人属性[#剑会假人属性+1]={
              名称=玩家数据[红方玩家id].角色.数据.参战宝宝.模型,
              模型=玩家数据[红方玩家id].角色.数据.参战宝宝.模型,
              等级=玩家数据[红方玩家id].角色.数据.参战宝宝.等级,
              气血=玩家数据[红方玩家id].角色.数据.参战宝宝.最大气血,
              魔法=玩家数据[红方玩家id].角色.数据.参战宝宝.最大魔法,
              伤害=玩家数据[红方玩家id].角色.数据.参战宝宝.伤害,
              灵力=玩家数据[红方玩家id].角色.数据.参战宝宝.灵力,
              速度=玩家数据[红方玩家id].角色.数据.参战宝宝.速度,
              防御=玩家数据[红方玩家id].角色.数据.参战宝宝.防御,
              法防=玩家数据[红方玩家id].角色.数据.参战宝宝.灵力*0.7,
              攻击修炼=玩家数据[红方玩家id].角色.数据.bb修炼.攻击控制力[1],
              法术修炼=玩家数据[红方玩家id].角色.数据.bb修炼.法术控制力[1],
              防御修炼=玩家数据[红方玩家id].角色.数据.bb修炼.防御控制力[1],
              抗法修炼=玩家数据[红方玩家id].角色.数据.bb修炼.抗法控制力[1],
              技能=玩家数据[红方玩家id].角色.数据.参战宝宝.技能,
              参战等级=玩家数据[红方玩家id].角色.数据.参战宝宝.参战等级,
              五维属性={体质=玩家数据[红方玩家id].角色.数据.参战宝宝.体质,魔力=玩家数据[红方玩家id].角色.数据.参战宝宝.魔力,力量=玩家数据[红方玩家id].角色.数据.参战宝宝.力量,耐力=玩家数据[红方玩家id].角色.数据.参战宝宝.耐力,敏捷=玩家数据[红方玩家id].角色.数据.参战宝宝.敏捷},
              内丹数据=玩家数据[红方玩家id].角色.数据.参战宝宝.内丹数据,
              位置=6
            }
          end
          发送数据(玩家数据[红方玩家id].连接id,128)
          常规提示(红方玩家id,"#Y/进入剑会天下PK战斗")
          战斗准备类:创建战斗(红方玩家id,110001,0,nil,剑会假人属性)
        end
      end
      if 红方玩家id~=0 and 蓝方玩家id~=0 then
        local 玩家表 = {[1]=红方玩家id,[2]=蓝方玩家id}
        --table.print(玩家表)
        for i=1,#玩家表 do
          发送数据(玩家数据[玩家表[i]].连接id,128)
          常规提示(玩家表[i],"#Y/进入剑会天下PK战斗")
        end
        -- 战斗准备类:pk战斗(红方玩家id,蓝方玩家id,410005)
        战斗准备类:创建玩家战斗(红方玩家id, 410005, 蓝方玩家id, 1501)
      end
    end
  end
  剑会天下单人匹配={}
end

function 系统处理类:剑会天下三人匹配处理()
  --print("开始三人对战处理")
  if 判断是否为空表(剑会天下三人匹配) then
    return
  end
  --进行一次积分排序
  table.sort(剑会天下三人匹配,积分排序)
  --排队分组 安排队友计算
  for n,v in pairs(剑会天下三人匹配) do
    if 玩家数据[v.id] ~= nil and v.匹配 and 玩家数据[v.id].战斗 ==0 and 玩家数据[v.id].观战 == nil then
      local 红方玩家id = v.id
      v.匹配=false
      local 蓝方玩家id = 0
      if n%2 == 1 then
        if n~=#剑会天下三人匹配 then
          蓝方玩家id=剑会天下三人匹配[n+1].id or 0
          剑会天下三人匹配[n+1].匹配=false
        else
          local 剑会假人属性 = {}
          if 玩家数据[红方玩家id].队伍~=0 then
            local 队伍id=玩家数据[红方玩家id].队伍
            for n=1,#队伍数据[队伍id].成员数据 do
              local 队员id=队伍数据[队伍id].成员数据[n]
              if 玩家数据[队员id]~=nil then
                local 武器伤害 = 0
                if 玩家数据[队员id].角色.数据.装备[3]~=nil then
                  local 临时武器=table.loadstring(table.tostring(玩家数据[队员id].道具.数据[玩家数据[队员id].角色.数据.装备[3]]))
                  武器伤害=qz(临时武器.伤害+临时武器.命中*0.3)
                end
                剑会假人属性[#剑会假人属性+1]={
                  名称=取随机中文姓名(取随机数(2,5)),
                  模型=玩家数据[队员id].角色.数据.模型,
                  等级=玩家数据[队员id].角色.数据.等级,
                  气血=玩家数据[队员id].角色.数据.最大气血,
                  魔法=玩家数据[队员id].角色.数据.最大魔法,
                  伤害=玩家数据[队员id].角色.数据.伤害,
                  灵力=玩家数据[队员id].角色.数据.灵力+玩家数据[队员id].角色.数据.法术伤害,
                  速度=玩家数据[队员id].角色.数据.速度,
                  防御=玩家数据[队员id].角色.数据.防御,
                  法防=玩家数据[队员id].角色.数据.灵力+玩家数据[队员id].角色.数据.法术防御,
                  攻击修炼=玩家数据[队员id].角色.数据.修炼.攻击修炼[1],
                  法术修炼=玩家数据[队员id].角色.数据.修炼.法术修炼[1],
                  防御修炼=玩家数据[队员id].角色.数据.修炼.防御修炼[1],
                  抗法修炼=玩家数据[队员id].角色.数据.修炼.抗法修炼[1],
                  角色分类="角色",
                  门派=玩家数据[队员id].角色.数据.门派,
                  五维属性={体质=玩家数据[队员id].角色.数据.体质,魔力=玩家数据[队员id].角色.数据.魔力,力量=玩家数据[队员id].角色.数据.力量,耐力=玩家数据[队员id].角色.数据.耐力,敏捷=玩家数据[队员id].角色.数据.敏捷},
                  武器伤害=武器伤害,
                  位置=n,
                }
                if not 判断是否为空表(玩家数据[队员id].角色.数据.参战宝宝) then
                  剑会假人属性[#剑会假人属性+1]={
                    名称=玩家数据[队员id].角色.数据.参战宝宝.模型,
                    模型=玩家数据[队员id].角色.数据.参战宝宝.模型,
                    等级=玩家数据[队员id].角色.数据.参战宝宝.等级,
                    气血=玩家数据[队员id].角色.数据.参战宝宝.最大气血,
                    魔法=玩家数据[队员id].角色.数据.参战宝宝.最大魔法,
                    伤害=玩家数据[队员id].角色.数据.参战宝宝.伤害,
                    灵力=玩家数据[队员id].角色.数据.参战宝宝.灵力,
                    速度=玩家数据[队员id].角色.数据.参战宝宝.速度,
                    防御=玩家数据[队员id].角色.数据.参战宝宝.防御,
                    法防=玩家数据[队员id].角色.数据.参战宝宝.灵力*0.7,
                    攻击修炼=玩家数据[队员id].角色.数据.bb修炼.攻击控制力[1],
                    法术修炼=玩家数据[队员id].角色.数据.bb修炼.法术控制力[1],
                    防御修炼=玩家数据[队员id].角色.数据.bb修炼.防御控制力[1],
                    抗法修炼=玩家数据[队员id].角色.数据.bb修炼.抗法控制力[1],
                    技能=玩家数据[队员id].角色.数据.参战宝宝.技能,
                    参战等级=玩家数据[队员id].角色.数据.参战宝宝.参战等级,
                    五维属性={体质=玩家数据[队员id].角色.数据.参战宝宝.体质,魔力=玩家数据[队员id].角色.数据.参战宝宝.魔力,力量=玩家数据[队员id].角色.数据.参战宝宝.力量,耐力=玩家数据[队员id].角色.数据.参战宝宝.耐力,敏捷=玩家数据[队员id].角色.数据.参战宝宝.敏捷},
                    位置=n+5
                  }
                end
                发送数据(玩家数据[队员id].连接id,128)
                常规提示(队员id,"#Y/进入剑会天下PK战斗")
              end
            end
            战斗准备类:创建战斗(红方玩家id,110001,0,nil,剑会假人属性)
          end
        end
      end
      if 红方玩家id~=0 and 蓝方玩家id~=0 then
        local 队伍组 = {[1]=红方玩家id,[2]=蓝方玩家id}
        for i=1,#队伍组 do
          if 玩家数据[队伍组[i]].队伍~=0 then
            for n=1,#队伍数据[玩家数据[队伍组[i]].队伍].成员数据 do
              if 玩家数据[队伍数据[玩家数据[队伍组[i]].队伍].成员数据[n]]~=nil then
                发送数据(玩家数据[队伍数据[玩家数据[队伍组[i]].队伍].成员数据[n]].连接id,128)
                常规提示(队伍数据[玩家数据[队伍组[i]].队伍].成员数据[n],"#Y/进入剑会天下PK战斗")
              end
            end
          end
        end
        -- 战斗准备类:pk战斗(红方玩家id,蓝方玩家id,410005)
        战斗准备类:创建玩家战斗(红方玩家id, 410005, 蓝方玩家id, 1501)
      end
    end
  end
  剑会天下三人匹配={}
end

function 系统处理类:剑会天下五人匹配处理()
  --print("开始五人对战处理")
  if 判断是否为空表(剑会天下五人匹配) then
    return
  end
  --进行一次积分排序
  table.sort(剑会天下五人匹配,积分排序)
  --排队分组 安排队友计算
  for n,v in pairs(剑会天下五人匹配) do
    if 玩家数据[v.id] ~= nil and v.匹配 and 玩家数据[v.id].战斗 ==0 and 玩家数据[v.id].观战 == nil then
      local 红方玩家id = v.id
      v.匹配=false
      local 蓝方玩家id = 0
      if n%2 == 1 then
        if n~=#剑会天下五人匹配 then
          蓝方玩家id=剑会天下五人匹配[n+1].id or 0
          剑会天下五人匹配[n+1].匹配=false
        else
          local 剑会假人属性 = {}
          if 玩家数据[红方玩家id].队伍~=0 then
            local 队伍id=玩家数据[红方玩家id].队伍
            for n=1,#队伍数据[队伍id].成员数据 do
              local 队员id=队伍数据[队伍id].成员数据[n]
              if 玩家数据[队员id]~=nil then
                local 武器伤害 = 0
                if 玩家数据[队员id].角色.数据.装备[3]~=nil then
                  local 临时武器=table.loadstring(table.tostring(玩家数据[队员id].道具.数据[玩家数据[队员id].角色.数据.装备[3]]))
                  武器伤害=qz(临时武器.伤害+临时武器.命中*0.3)
                end
                剑会假人属性[#剑会假人属性+1]={
                  名称=取随机中文姓名(取随机数(2,5)),
                  模型=玩家数据[队员id].角色.数据.模型,
                  等级=玩家数据[队员id].角色.数据.等级,
                  气血=玩家数据[队员id].角色.数据.最大气血,
                  魔法=玩家数据[队员id].角色.数据.最大魔法,
                  伤害=玩家数据[队员id].角色.数据.伤害,
                  灵力=玩家数据[队员id].角色.数据.灵力+玩家数据[队员id].角色.数据.法术伤害,
                  速度=玩家数据[队员id].角色.数据.速度,
                  防御=玩家数据[队员id].角色.数据.防御,
                  法防=玩家数据[队员id].角色.数据.灵力+玩家数据[队员id].角色.数据.法术防御,
                  攻击修炼=玩家数据[队员id].角色.数据.修炼.攻击修炼[1],
                  法术修炼=玩家数据[队员id].角色.数据.修炼.法术修炼[1],
                  防御修炼=玩家数据[队员id].角色.数据.修炼.防御修炼[1],
                  抗法修炼=玩家数据[队员id].角色.数据.修炼.抗法修炼[1],
                  角色分类="角色",
                  门派=玩家数据[队员id].角色.数据.门派,
                  五维属性={体质=玩家数据[队员id].角色.数据.体质,魔力=玩家数据[队员id].角色.数据.魔力,力量=玩家数据[队员id].角色.数据.力量,耐力=玩家数据[队员id].角色.数据.耐力,敏捷=玩家数据[队员id].角色.数据.敏捷},
                  武器伤害=武器伤害,
                  位置=n,
                }
                if not 判断是否为空表(玩家数据[队员id].角色.数据.参战宝宝) then
                  剑会假人属性[#剑会假人属性+1]={
                    名称=玩家数据[队员id].角色.数据.参战宝宝.模型,
                    模型=玩家数据[队员id].角色.数据.参战宝宝.模型,
                    等级=玩家数据[队员id].角色.数据.参战宝宝.等级,
                    气血=玩家数据[队员id].角色.数据.参战宝宝.最大气血,
                    魔法=玩家数据[队员id].角色.数据.参战宝宝.最大魔法,
                    伤害=玩家数据[队员id].角色.数据.参战宝宝.伤害,
                    灵力=玩家数据[队员id].角色.数据.参战宝宝.灵力,
                    速度=玩家数据[队员id].角色.数据.参战宝宝.速度,
                    防御=玩家数据[队员id].角色.数据.参战宝宝.防御,
                    法防=玩家数据[队员id].角色.数据.参战宝宝.灵力*0.7,
                    攻击修炼=玩家数据[队员id].角色.数据.bb修炼.攻击控制力[1],
                    法术修炼=玩家数据[队员id].角色.数据.bb修炼.法术控制力[1],
                    防御修炼=玩家数据[队员id].角色.数据.bb修炼.防御控制力[1],
                    抗法修炼=玩家数据[队员id].角色.数据.bb修炼.抗法控制力[1],
                    技能=玩家数据[队员id].角色.数据.参战宝宝.技能,
                    参战等级=玩家数据[队员id].角色.数据.参战宝宝.参战等级,
                    五维属性={体质=玩家数据[队员id].角色.数据.参战宝宝.体质,魔力=玩家数据[队员id].角色.数据.参战宝宝.魔力,力量=玩家数据[队员id].角色.数据.参战宝宝.力量,耐力=玩家数据[队员id].角色.数据.参战宝宝.耐力,敏捷=玩家数据[队员id].角色.数据.参战宝宝.敏捷},
                    位置=n+5
                  }
                end
                发送数据(玩家数据[队员id].连接id,128)
                常规提示(队员id,"#Y/进入剑会天下PK战斗")
              end
            end
            战斗准备类:创建战斗(红方玩家id,110001,0,nil,剑会假人属性)
          end
        end
      end
      if 红方玩家id~=0 and 蓝方玩家id~=0 then
        local 队伍组 = {[1]=红方玩家id,[2]=蓝方玩家id}
        for i=1,#队伍组 do
          if 玩家数据[队伍组[i]].队伍~=0 then
            for n=1,#队伍数据[玩家数据[队伍组[i]].队伍].成员数据 do
              if 玩家数据[队伍数据[玩家数据[队伍组[i]].队伍].成员数据[n]]~=nil then
                发送数据(玩家数据[队伍数据[玩家数据[队伍组[i]].队伍].成员数据[n]].连接id,128)
                常规提示(队伍数据[玩家数据[队伍组[i]].队伍].成员数据[n],"#Y/进入剑会天下PK战斗")
              end
            end
          end
        end
        -- 战斗准备类:pk战斗(红方玩家id,蓝方玩家id,410005)
        战斗准备类:创建玩家战斗(红方玩家id, 410005, 蓝方玩家id, 1501)
      end
    end
  end
  剑会天下五人匹配={}
end










function 系统处理类:切换自动任务类型(id,内容)
    local 任务名称=内容.名称
    if 玩家数据[id].角色.数据.自动开关.高级飞行棋<=2 then
      常规提示(id,"你没有高级飞行棋了,做任务可以补充")
      return
    end
    local 是否重复=false
    for k,v in pairs(玩家数据[id].角色.数据.自动开关.自动类型) do
      if v==任务名称 then
        table.remove(玩家数据[id].角色.数据.自动开关.自动类型,k)
        是否重复=true
      end
    end
    if 是否重复==false then
    table.insert(玩家数据[id].角色.数据.自动开关.自动类型,任务名称)
    end
   发送数据(玩家数据[id].连接id,31,玩家数据[id].角色:取总数据())
end

function 系统处理类:切换挂机任务类型(id,内容)
    local 任务名称=内容.名称
    if 玩家数据[id].角色.数据.自动开关.高级飞行棋<=2 then
      常规提示(id,"你没有高级飞行棋了,做任务可以补充")
      return
    end
    local 是否重复=false
    for k,v in pairs(玩家数据[id].角色.数据.自动开关.挂机类型) do
      if v==任务名称 then
        table.remove(玩家数据[id].角色.数据.自动开关.挂机类型,k)
        是否重复=true
      end
    end
    if 是否重复==false then
    table.insert(玩家数据[id].角色.数据.自动开关.挂机类型,任务名称)
    end
   -- table.print(玩家数据[id].角色.数据.自动开关.挂机类型)
   发送数据(玩家数据[id].连接id,31,玩家数据[id].角色:取总数据())
end


function 系统处理类:藏宝阁取回处理(id,编号,类型)
  local 关键字 = "其他"
  if 类型 == 1 then
    关键字 = "装备"
  elseif 类型 == 3 then
    关键字 = "灵饰"
  elseif 类型 == 4 then
    关键字 = "召唤兽"
  elseif 类型 == 5 then
    关键字 = "银两"
  elseif 类型 == 6 then
    关键字 = "其他"
  end
  if 类型 == 7 then
    发送数据(玩家数据[id].连接id, 7, "#y/取回角色请前往XXXX取回")
    return 0
  elseif 藏宝阁数据[关键字][编号] == nil then
    发送数据(玩家数据[id].连接id, 7, "#y/数据已经刷新请重新打开藏宝阁")
    return 0
  elseif 藏宝阁数据[关键字][编号].结束时间 - os.time() <= 30 then
    发送数据(玩家数据[id].连接id, 7, "#y/该物品即将超时下架,无法进行取回处理")
    return 0
  elseif 藏宝阁数据[关键字][编号].所有者 ~= id then
    发送数据(玩家数据[id].连接id, 7, "#y/这不是你的商品你无法取回")
    return 0
  else
    if 关键字 ~= "银两" and 关键字 ~= "召唤兽" then
      self.临时格子=玩家数据[id].角色:取道具格子()
      if self.临时格子==0 then
       发送数据(玩家数据[id].连接id,7,"#y/您当前的包裹空间已满，无法取回")
        return 0
      end
      self.可用id = 玩家数据[id].道具:取新编号()
      玩家数据[id].道具.数据[self.可用id] = 藏宝阁数据[关键字][编号].物品
      玩家数据[id].角色.数据.道具[self.临时格子] = self.可用id
      table.remove(藏宝阁数据[关键字],编号)
      发送数据(玩家数据[id].连接id,7,"#y/取回物品成功")
    elseif 关键字 == "银两" then
      玩家数据[id].角色:添加银子(藏宝阁数据[关键字][编号].数额,"藏宝阁取回"..关键字,1)
      table.remove(藏宝阁数据[关键字],编号)
      发送数据(玩家数据[id].连接id,7,"#y/恭喜你取回物品成功")
    elseif 关键字 == "召唤兽" then
      if #玩家数据[id].召唤兽.数据 >= 7 then
        发送数据(玩家数据[id].连接id,7,"#y/您的召唤兽空间已满，无法取回")
          return 0
      else
        玩家数据[id].召唤兽.数据[#玩家数据[id].召唤兽.数据+1] = 藏宝阁数据[关键字][编号].召唤兽
        table.remove(藏宝阁数据[关键字],编号)
        发送数据(玩家数据[id].连接id,7,"#y/恭喜你取回物品成功")
      end
    end
    for i,v in pairs(观察藏宝阁数据) do
      if 玩家数据[i] ~= nil then
        发送数据(玩家数据[i].连接id,116 , 藏宝阁数据)
      else
        观察藏宝阁数据[i] = nil
      end
    end
  end
end

function 系统处理类:藏宝阁购买处理(id,编号,类型)
  local 关键字 = "其他"
  if 类型 == 1 then
    关键字 = "装备"
  elseif 类型 == 3 then
    关键字 = "灵饰"
  elseif 类型 == 4 then
    关键字 = "召唤兽"
  elseif 类型 == 5 then
    关键字 = "银两"
  elseif 类型 == 6 then
    关键字 = "其他"
  elseif 类型 == 7 then
    关键字 = "角色"
  end
  if 藏宝阁数据[关键字][编号] == nil then
    发送数据(玩家数据[id].连接id, 7, "#y/数据已经刷新请重新打开藏宝阁")
    return 0
  elseif 藏宝阁数据[关键字][编号].结束时间 - os.time() <= 30 then
    发送数据(玩家数据[id].连接id, 7, "#y/该物品即将超时下架,无法进行购买处理")
    return 0
  else
    local 价格 = tonumber(藏宝阁数据[关键字][编号].价格)
    if 价格 == nil  then
        return
    end
    local 买家价格 = math.floor(价格)
    -- local 点卡=f函数.读配置(程序目录..[[data\]]..玩家数据[id].账号..[[\账号信息.txt]],"账号配置","点卡")
    -- if 点卡==nil or 点卡=="空" then
    --     f函数.写配置(程序目录..[[data\]]..玩家数据[id].账号..[[\账号信息.txt]],"账号配置","点卡","0")
    --     点卡=0
    -- end
    -- if 点卡+0<买家价格 then
    --   常规提示(id,"点卡不够哦!!请注意充值购买!!!")
    --   return
    -- end


    if 取银子(id)<买家价格 then
      常规提示(id,"银子不够哦!!无法购买!!!")
      return
    end
    local 对方id = 藏宝阁数据[关键字][编号].所有者
    if 关键字 ~= "银两" and 关键字 ~= "召唤兽" and 关键字 ~= "角色" then
      self.临时格子=玩家数据[id].角色:取道具格子()
      if self.临时格子==0 then
        发送数据(玩家数据[id].连接id,7,"#y/您当前的包裹空间已满，无法购买")
        return 0
      end
      self.可用id = 玩家数据[id].道具:取新编号()
      玩家数据[id].道具.数据[self.可用id] = 藏宝阁数据[关键字][编号].物品
      玩家数据[id].角色.数据.道具[self.临时格子] = self.可用id
      藏宝阁记录 = 藏宝阁记录..玩家数据[id].角色.数据.名称.."通过藏宝阁购买ID:"..藏宝阁数据[关键字][编号].所有者.."物品["..藏宝阁数据[关键字][编号].物品.名称.."]花费"..价格.."银两\n"
      table.remove(藏宝阁数据[关键字],编号)
      发送数据(玩家数据[id].连接id,7,"#y/恭喜你购买物品成功")
    elseif 关键字 == "银两" then
      玩家数据[id].角色:添加银子(藏宝阁数据[关键字][编号].数额,"藏宝阁购买"..关键字,1)
      藏宝阁记录 = 藏宝阁记录..玩家数据[id].角色.数据.名称.."通过藏宝阁购买ID:"..藏宝阁数据[关键字][编号].所有者.."物品["..藏宝阁数据[关键字][编号].数额.."两银子]花费"..价格.."银两\n"
      table.remove(藏宝阁数据[关键字],编号)
      发送数据(玩家数据[id].连接id,7,"#y/恭喜你购买物品成功")
    elseif 关键字 == "召唤兽" then
      if #玩家数据[id].召唤兽.数据 >= 7 then
        发送数据(玩家数据[id].连接id,7,"#y/您的召唤兽空间已满，无法购买")
        return 0
      else
        玩家数据[id].召唤兽.数据[#玩家数据[id].召唤兽.数据+1] = 藏宝阁数据[关键字][编号].召唤兽
        藏宝阁记录 = 藏宝阁记录..玩家数据[id].角色.数据.名称.."通过藏宝阁购买ID:"..藏宝阁数据[关键字][编号].所有者.."物品["..藏宝阁数据[关键字][编号].召唤兽.名称.."]花费"..价格.."银两\n"
        table.remove(藏宝阁数据[关键字],编号)
        发送数据(玩家数据[id].连接id,7,"#y/恭喜你购买物品成功")
      end
    elseif 关键字 == "角色" then
      local 账号信息 = table.loadstring(读入文件([[data/]]..玩家数据[id].角色.数据.账号..[[/信息.txt]]))
      if #账号信息 >= 6 then
        发送数据(玩家数据[id].连接id,7,"#y/您的账号信息已满,无法购买新的角色")
        return
      elseif 玩家数据[id].角色.数据.账号 == 藏宝阁数据[关键字][编号].角色信息.账号 then
        发送数据(玩家数据[id].连接id,7,"#y/你不能购买自己的角色")
        return
      end
      账号信息[#账号信息+1] = 藏宝阁数据[关键字][编号].所有者
      写出文件([[data/]]..玩家数据[id].角色.数据.账号..[[/]].."/信息.txt",table.tostring(账号信息))
      账号信息 = {}
      local 账号 = 藏宝阁数据[关键字][编号].角色信息.账号
      账号信息 = table.loadstring(读入文件([[data/]]..账号..[[/信息.txt]]))
      for i=1,#账号信息 do
        if 账号信息[i] == 藏宝阁数据[关键字][编号].所有者 or tonumber(账号信息[i]) == 藏宝阁数据[关键字][编号].所有者 then
          table.remove(账号信息,i)
        end
      end
      写出文件([[data/]]..账号..[[/]].."/信息.txt",table.tostring(账号信息))
      local 角色信息=table.loadstring(读入文件([[data/]]..账号..[[/]]..藏宝阁数据[关键字][编号].所有者..[[/角色.txt]]))
      角色信息.账号 = 玩家数据[id].角色.数据.账号
      角色信息.藏宝阁出售 = nil
      写出文件([[data/]]..账号..[[/]]..藏宝阁数据[关键字][编号].所有者..[[/角色.txt]],table.tostring(角色信息))
      角色信息 = nil
      if 移动文件(账号,tostring(藏宝阁数据[关键字][编号].所有者),玩家数据[id].角色.数据.账号) == "0" then
        藏宝阁记录 = 藏宝阁记录..玩家数据[id].角色.数据.名称.."ID为:"..id.."通过藏宝阁购买ID:"..藏宝阁数据[关键字][编号].所有者.."角色花费"..价格.."银两,角色移除异常,请检查!\n"
      else
        藏宝阁记录 = 藏宝阁记录..玩家数据[id].角色.数据.名称.."ID为:"..id.."通过藏宝阁购买ID:"..藏宝阁数据[关键字][编号].所有者.."角色花费"..价格.."银两,角色转换成功!\n"
      end
      table.remove(藏宝阁数据[关键字],编号)
      发送数据(玩家数据[id].连接id,7,"#y/恭喜你购买物品成功")
    end
    -- 玩家数据[id].角色:扣除点卡(买家价格,"藏宝阁购买",id)
     -- 发送数据(玩家数据[id].连接id,7,"#y/支付:"..买家价格.."点点卡!")
    -- 玩家数据[id].角色:扣除银子(买家价格,"藏宝阁购买",id)
    玩家数据[id].角色:扣除银子(买家价格,0,0,"藏宝阁购买",id)
    发送数据(玩家数据[id].连接id,7,"#y/支付:"..买家价格.."点银子!")
--     if 玩家数据[对方id] == nil then
--       if 寄存数据[对方id] == nil then
--         寄存数据[对方id] = {[1]={类型="点卡",数额=价格}}
--       else
--         寄存数据[对方id][#寄存数据[对方id]+1] = {类型="点卡",数额=价格}
--       end
--     else
--        --添加点卡(math.floor(价格*(1-cbg费率)),玩家数据[对方id].账号,对方id,"藏宝阁出售")
--         发送数据(玩家数据[对方id].连接id,7,"#y/藏宝阁物品成功出售,并获得"..价格.."点点卡!!!")
--     end
--     for i,v in pairs(观察藏宝阁数据) do
--       if 玩家数据[i] ~= nil then
--         发送数据(玩家数据[i].连接id,116 , 藏宝阁数据)
--       else
--         观察藏宝阁数据[i] = nil
--       end
--     end
--   end
-- end
    if 玩家数据[对方id] == nil then
      if 寄存数据[对方id] == nil then
        寄存数据[对方id] = {[1]={类型="银子",数额=价格}}
      else
        寄存数据[对方id][#寄存数据[对方id]+1] = {类型="银子",数额=价格}
      end
    else
       -- --添加点卡(math.floor(价格*(1-cbg费率)),玩家数据[对方id].账号,对方id,"藏宝阁出售")
       -- 添加银子(math.floor(价格*(1-cbg费率)),玩家数据[对方id].账号,对方id,"藏宝阁出售")
       玩家数据[对方id].角色:添加银子(math.floor(价格*(1-cbg费率)),玩家数据[对方id].账号,对方id,"藏宝阁出售")
        发送数据(玩家数据[对方id].连接id,7,"#y/藏宝阁物品成功出售,并获得"..价格.."点银子!!!")
    end
    for i,v in pairs(观察藏宝阁数据) do
      if 玩家数据[i] ~= nil then
        发送数据(玩家数据[i].连接id,116 , 藏宝阁数据)
      else
        观察藏宝阁数据[i] = nil
      end
    end
  end
end
function 系统处理类:藏宝阁上架召唤兽(id,编号,价格)
  if 玩家数据[id].召唤兽.数据[编号] == nil then
    发送数据(玩家数据[id].连接id, 7, "#y/你没有这样的召唤兽")
    return 0
  elseif 玩家数据[id].召唤兽:是否有装备(编号)  then
    发送数据(玩家数据[id].连接id, 7, "#y/请将该召唤兽装备卸下后再进行交易")
    return 0
  elseif tonumber(价格) == nil or tonumber(价格) < 1 then
    发送数据(玩家数据[id].连接id, 7, "#y/请正确输入物品的价格")
    return 0
  elseif  玩家数据[id].摊位数据~=nil then
    发送数据(玩家数据[id].连接id, 7, "#y/摆摊不能上架藏宝阁")
    return 0
    elseif  tonumber(价格) < 20 then
    发送数据(玩家数据[id].连接id, 7, "#y/银子价格不能低于20点")
    return 0
  elseif 玩家数据[id].召唤兽:是否有统御()  then
    发送数据(玩家数据[id].连接id, 7, "#y/请将所有召唤兽统御效果撤除后再进行交易")
    return 0
  elseif #玩家数据[id].召唤兽.数据[编号].技能 <  7 then
    发送数据(玩家数据[id].连接id, 7, "#y/召唤兽上架技能要求最少8个")
    return 0
  elseif #玩家数据[id].召唤兽.数据>7 then
   发送数据(玩家数据[id].连接id, 7, "#Y/召唤携带数量超过7个无法上架,请将多余的存仓库")
    return 0
  -- elseif 玩家数据[id].召唤兽.数据[编号].成长 <  1.3 then
  --   发送数据(玩家数据[id].连接id, 7, "#y/召唤兽上架技能要求最少12个")
  --   return 0
  else
    藏宝阁数据["召唤兽"][#藏宝阁数据["召唤兽"]+1] = {召唤兽=玩家数据[id].召唤兽.数据[编号],价格=价格,所有者=id,结束时间=os.time()+604800}
    if 玩家数据[id].召唤兽.数据[编号].认证码==玩家数据[id].角色.数据.参战宝宝.认证码 then
      玩家数据[id].角色.数据.参战宝宝={}
      发送数据(玩家数据[id].连接id,18,玩家数据[id].角色.数据.参战宝宝)
    end
    发送数据(玩家数据[id].连接id,45,编号)
    table.remove(玩家数据[id].召唤兽.数据,编号)
    发送数据(玩家数据[id].连接id, 7, "#y/上架成功")
    for i,v in pairs(观察藏宝阁数据) do
      if 玩家数据[i] ~= nil then
        发送数据(玩家数据[i].连接id,116 , 藏宝阁数据)
      else
        观察藏宝阁数据[i] = nil
      end
    end
  end
end



function 系统处理类:藏宝阁上架(id,编号,价格) --上架手续费 第二要限制出售类型 装备类 120级以上 其他
  local 物品id = 玩家数据[id].角色.数据.道具[编号]
  local 道具类型 = 玩家数据[id].道具.数据[物品id].分类
  local 类型 = "其他"

  if 玩家数据[id].角色.数据.道具[编号] == nil then
    发送数据(玩家数据[id].连接id, 7, "#y/你没有这样的道具")
    return 0
  elseif  玩家数据[id].摊位数据~=nil then
    发送数据(玩家数据[id].连接id, 7, "#y/摆摊不能上架藏宝阁")
    return 0
  elseif 玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]] == nil then
    发送数据(玩家数据[id].连接id, 7, "#y/出售的物品不存在")
    return 0
  elseif tonumber(价格) == nil or tonumber(价格) < 1 then
    发送数据(玩家数据[id].连接id, 7, "#y/请正确输入物品的价格")
    return 0
  elseif 玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]].名称 == "飞行符"
    or 玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]].名称 == "摄妖香"
     or 玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]].名称 == "珍珠"
      or 玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]].名称 == "天眼通符"
        or 玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]].名称 == "金柳露"
         or 玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]].名称 == "超级金柳露"
          or 玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]].名称 == "玄武石"
           or 玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]].名称 == "青龙石"
            or 玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]].名称 == "白虎石"
             or 玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]].名称 == "朱雀石"
              or 玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]].名称 == "海马"
               or 玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]].名称 == "秘制红罗羹"
                or 玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]].名称 == "秘制绿罗羹"
                 or 玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]].名称 == "洞冥草"
                  or 玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]].名称 == "月华露"
                   or 玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]].名称 == "修炼果"
                    or 玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]].名称 == "九转金丹"
                     or 玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]].名称 == "易经丹"
                      or 玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]].名称 == "玉葫灵髓"
                       or 玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]].名称 == "清灵净瓶"
                        or 玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]].名称 == "彩果"
                         or 玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]].名称 == "金银锦盒"
                          or 玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]].名称 == "空白强化符"
                           or 玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]].名称 == "碎星锤"
                            or 玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]].名称 == "神兵图鉴"
                             or 玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]].名称 == "灵宝图鉴"
                              or 玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]].名称 == "含沙射影"
                               or 玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]].名称 == "符石卷轴"
                                or 玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]].名称 == "召唤兽内丹"
                                 or 玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]].名称 == "元宵"
                                  or 玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]].名称 == "低级清灵净瓶"
                                   or 玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]].名称 == "中级清灵净瓶"
                                    or 玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]].名称 == "百炼精铁"
                                     or 玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]].名称 == "魔兽要诀"
                                      or 玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]].名称 == "九转金丹"  then
        发送数据(玩家数据[id].连接id, 7, "#y/请勿上架低价值的物品")
        return 0
  elseif 玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]].总类 == 1 and 玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]].子类 == 20 then
      发送数据(玩家数据[id].连接id, 7, "#y/请勿上架低价值的物品")
       return 0
  elseif 玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]].总类 == 1 and 玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]].子类 == 1 then
      发送数据(玩家数据[id].连接id, 7, "#y/请勿上架低价值的物品")
       return 0
  elseif 玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]].总类 == 55 and 玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]].子类 == 1 then
      发送数据(玩家数据[id].连接id, 7, "#y/请勿上架低价值的物品")
       return 0
  elseif 玩家数据[id].道具.数据[物品id].总类 == 2 and 道具类型 >=1 and 道具类型 <= 6 and 玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]].级别限制 < 40 then
      发送数据(玩家数据[id].连接id, 7, "#y/低于40的装备属于低价值物品,无法上架藏宝阁")
      return 0
  elseif 玩家数据[id].道具.数据[物品id].总类 == 2 and 道具类型 >=10 and 道具类型 <=13 and 玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]].级别限制 < 60 then
      发送数据(玩家数据[id].连接id, 7, "#y/低于60的灵饰属于低价值物品,无法上架藏宝阁")
      return 0
    elseif 玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]].专用~=nil then
       玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]].专用=id
       玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]].不可交易=true

      发送数据(玩家数据[id].连接id, 7, "#y/专用装备你上架个毛啊？")
      return 0
  else
    --table.print(玩家数据[id].道具.数据[玩家数据[id].角色.数据.道具[编号]])
    if 道具类型 ~= nil then
      if 玩家数据[id].道具.数据[物品id].总类 == 2 and 道具类型 >=1 and 道具类型 <= 6 then
        类型 = "装备"
      elseif 玩家数据[id].道具.数据[物品id].总类 == 2 and 道具类型 >=10 and 道具类型 <=13 then
        类型 = "灵饰"
      end
    end
    藏宝阁数据[类型][#藏宝阁数据[类型]+1] = {物品=玩家数据[id].道具.数据[物品id],价格=价格,所有者=id,结束时间=os.time()+604800}
    玩家数据[id].角色.数据.道具[编号] = nil
    玩家数据[id].道具.数据[物品id] = nil
    道具刷新(id)
    发送数据(玩家数据[id].连接id, 7, "#y/上架成功")
    for i,v in pairs(观察藏宝阁数据) do
      if 玩家数据[i] ~= nil then
        发送数据(玩家数据[i].连接id,116 , 藏宝阁数据)
      else
        观察藏宝阁数据[i] = nil
      end
    end
  end
end
function 系统处理类:藏宝阁上架银两(id,数量,价格)
  if tonumber(数量) == nil or tonumber(价格) ==nil then
    return
  end
  if 取银子(id)<数量 then
    发送数据(玩家数据[id].连接id,7,"#y/你没那么多银子")
  elseif tonumber(价格) == nil or tonumber(价格) < 1 then
    发送数据(玩家数据[id].连接id, 7, "#y/请正确输入价格")
    return 0
  elseif  玩家数据[id].摊位数据~=nil then
    发送数据(玩家数据[id].连接id, 7, "#y/摆摊不能上架藏宝阁")
    return 0
  else
      玩家数据[id].角色:扣除银子(数量,0,0,"上架藏宝阁")
      藏宝阁数据["银两"][#藏宝阁数据["银两"]+1] = {数额=数量,价格=价格,所有者=id,结束时间=os.time()+604800}
      发送数据(玩家数据[id].连接id, 7, "#y/上架成功")
    for i,v in pairs(观察藏宝阁数据) do
      if 玩家数据[i] ~= nil then
        发送数据(玩家数据[i].连接id,116, 藏宝阁数据)
      else
        观察藏宝阁数据[i] = nil
      end
    end
    end
end
function 系统处理类:获取商店变异召唤兽(id)
  if 变异商店bb[id]==nil then
    self:刷新商店变异召唤兽(id)
    变异商店bb[id].刷新=0
  end
 发送数据(玩家数据[id].连接id,130.1,变异商店bb[id])
end

function 系统处理类:刷新商店变异召唤兽(id)
  变异商店bb[id]={}
  for n=1,12 do
    local 模型=取随机怪(105,125)
    变异商店bb[id][n]={模型=模型[2],价格=取随机数(200000,1000000)}
  end
end

function 系统处理类:获取商店召唤兽(id)
  if 商店bb[id]==nil then
    self:刷新商店召唤兽(id)
    商店bb[id].刷新=0
  end
 发送数据(玩家数据[id].连接id,130,商店bb[id])
end

function 系统处理类:刷新商店召唤兽(id)
  商店bb[id]={}
  for n=1,12 do
    local 模型=取随机怪(0,95)
    商店bb[id][n]={模型=模型[2],价格=取随机数(100000,500000)}
  end
end

function 系统处理类:打开交易中心(id)
  local 分类信息={}
  table.insert(分类信息,{"100装备相关","110装备相关"})
  table.insert(分类信息,{"低级魔兽要诀","高级魔兽要诀"})
  发送数据(玩家数据[id].连接id,3910,分类信息)
end

function 系统处理类:刷新交易数据(id,内容)
  local 大类=内容.大类 + 0
  local 小类=内容.小类
  local 商品列表,小类序号=获取交易中心列表(大类,小类)
  发送数据(玩家数据[id].连接id,3911,商品列表)
end

function 系统处理类:购买交易中心商品(id,内容)
  local 大类=内容.大类 + 0
  local 小类=内容.小类
  local 编号=内容.编号 + 0
  local 商品列表,小类序号=获取交易中心列表(大类,小类)
  local 选中商品 = 商品列表[编号]
  if 选中商品.日涨跌幅 >= 10.0 then
    发送数据(玩家数据[id].连接id, 7, "#y/该商品已经涨停了，无法购买")
    return
  end
  if 玩家数据[id].角色.数据.银子<选中商品.价格 then
    常规提示(id,"#Y/你没有那么多的银子")
    return
  end
  local 临时格子=玩家数据[id].角色:取道具格子()
  if 临时格子==0 then
    常规提示(id,"#Y/包裹已满，请先整理下包裹吧！")
    return
  end
  玩家数据[id].角色:扣除银子(选中商品.价格,0,0,"交易中心购买",1)
  if 选中商品.名称 == "魔兽要诀" or 选中商品.名称 == "高级魔兽要诀" then
    玩家数据[id].道具:给予道具(id,选中商品.名称,nil,选中商品.参数一)
  elseif 选中商品.名称 == "制造指南书" then
    玩家数据[id].道具:给予道具(id,选中商品.名称,选中商品.参数一+0,选中商品.参数二+0)
  elseif 选中商品.名称 == "百炼精铁" then
    玩家数据[id].道具:给予道具(id,选中商品.名称,选中商品.参数一+0)
  end
  玩家数据[id].角色:日志记录(format("[交易中心-购买]购买道具[%s][%s]，花费%s两银子：[%s][%s][%s]",选中商品.名称,选中商品.参数一,选中商品.价格,玩家数据[id].账号,id,玩家数据[id].角色.名称))
  常规提示(id,"#Y/你花费了#R"..选中商品.价格.."#Y两，成功购买了#R"..选中商品.名称.."！")
  交易中心[大类][小类序号].内容[编号].价格 = math.floor(交易中心[大类][小类序号].内容[编号].价格 / (100+交易中心[大类][小类序号].内容[编号].日涨跌幅) * (100+交易中心[大类][小类序号].内容[编号].日涨跌幅 + 0.25))
  交易中心[大类][小类序号].内容[编号].日涨跌幅 = 交易中心[大类][小类序号].内容[编号].日涨跌幅 + 0.25
  发送数据(玩家数据[id].连接id,3911,商品列表)
end

function 系统处理类:出售交易中心商品(id,内容)
  local 大类=内容.大类 + 0
  local 小类=内容.小类
  local 编号=内容.编号 + 0
  local 商品列表,小类序号=获取交易中心列表(大类,小类)
  local 选中商品 = 商品列表[编号]
  if 选中商品.日涨跌幅 <= -10.0 then
    发送数据(玩家数据[id].连接id, 7, "#y/该商品已经跌停了，无法出售")
    return
  end
  local 扣除成功=玩家数据[id].道具:扣除道具数量(id,选中商品.名称,1,选中商品.参数一类型,选中商品.参数一,选中商品.参数二类型,选中商品.参数二)
  if 扣除成功 then
    local 出售价格=math.floor(选中商品.价格*0.5)
    常规提示(id,"#Y出售成功，你获得了#R"..出售价格.."#Y两银子")
    玩家数据[id].角色:添加银子(出售价格,"交易中心出售",1)
    交易中心[大类][小类序号].内容[编号].价格 = math.floor(交易中心[大类][小类序号].内容[编号].价格 / (100+交易中心[大类][小类序号].内容[编号].日涨跌幅) * (100+交易中心[大类][小类序号].内容[编号].日涨跌幅 - 0.25))
    交易中心[大类][小类序号].内容[编号].日涨跌幅 = 交易中心[大类][小类序号].内容[编号].日涨跌幅 - 0.25
    刷新货币(玩家数据[id].连接id,id)
  else
    常规提示(id,"出售失败，你没有这个道具")
  end
  发送数据(玩家数据[id].连接id,3911,商品列表)
end

function 系统处理类:获取商店召唤兽(id)
  if 商店bb[id]==nil then
    self:刷新商店召唤兽(id)
    商店bb[id].刷新=0
  end
 发送数据(玩家数据[id].连接id,130,商店bb[id])
end

function 系统处理类:取消息数据(id,连接id)
  if 玩家数据[id]~=nil and 消息数据[id]~=nil and #消息数据[id]>0 then
    local 接收消息=true
    发送数据(玩家数据[id].连接id,58,{信息=消息数据[id][1].名称.."   "..消息数据[id][1].时间,模型=消息数据[id][1].模型,类型=消息数据[id][1].类型,id=消息数据[id][1].id,内容=消息数据[id][1].内容,名称=消息数据[id][1].名称,好友度=消息数据[id][1].好友度,等级=消息数据[id][1].等级})
    table.remove(消息数据[id],1)
    if #消息数据[id]==0 then
      发送数据(玩家数据[id].连接id,57,"1")
    end
    return true
  else
    发送数据(玩家数据[id].连接id,57,"1")
    return false
  end
end

function 系统处理类:拒收消息检查(id,好友id,提示id)
  if 好友黑名单[id]==nil then 好友黑名单[id]={} end
  for n=1,#好友黑名单[id] do
    if 好友黑名单[id][n]==好友id then
      常规提示(提示id,"#Y你已被对方拉入黑名单中！")
      return false
    end
  end
  return true
end

function 系统处理类:更新消息通知(id)
  if 玩家数据[id]~=nil and 消息数据[id]~=nil and #消息数据[id]>0  then
    发送数据(玩家数据[id].连接id,56,"1")
  end
  if 玩家数据[id]~=nil and 玩家数据[id].摊位数据~=nil then
    玩家数据[id].摊位数据=nil
    地图处理类:取消玩家摊位(id)
  end
end

function 系统处理类:取好友度(id,好友id)
  for n=1,#玩家数据[id].角色.数据.好友数据.好友 do
    if 玩家数据[id].角色.数据.好友数据.好友[n].id==好友id then
      if 玩家数据[id].角色.数据.好友数据.好友[n].好友度==nil then
        return 0
      else
        return 玩家数据[id].角色.数据.好友数据.好友[n].好友度
      end
    end
  end
  return 0
end
function 系统处理类:兑换超级神兽(id)

  if #玩家数据[id].召唤兽.数据 >= 14 then
    常规提示(id,"你身上没有足够的位置携带神兽了。")
    return
  elseif 玩家数据[id].道具:扣除道具数量(id,"神兜兜",99,"名称","神兜兜")==false then
    常规提示(id,"必须集齐99个才可以使用哟")
    return
  end
  local 模型库 = {"超级土地公公","超级六耳猕猴","超级神鸡","超级玉兔","超级神猴","超级神马","超级神羊","超级筋斗云","超级神蛇","超级神狗","飞天","超级神鼠","超级神猪","超级小白龙","超级猪小戒"}
  local 模型 = 模型库[取随机数(1,#模型库)]
  local 物法 = "法系"
  if 取随机数()<=50 then
    物法 = nil
  end
  玩家数据[id].召唤兽:添加召唤兽(模型,nil,nil,true,0,物法)
  常规提示(id,"#Y/你获得了一个新的召唤兽"..模型)

end
function 系统处理类:兑换超级神兽1(id)

  if #玩家数据[id].召唤兽.数据 >= 14 then
    常规提示(id,"你身上没有足够的位置携带神兽了。")
    return
  elseif 玩家数据[id].道具:扣除道具数量(id,"神兜兜(专属)",99,"名称","神兜兜(专属)")==false then
    常规提示(id,"必须集齐99个才可以使用哟")
    return
  end
  local 模型库 = {"超级土地公公","超级六耳猕猴","超级神鸡","超级玉兔","超级神猴","超级神马","超级神羊","超级筋斗云","超级神蛇","超级神狗","飞天","超级神鼠","超级神猪","超级小白龙","超级猪小戒"}
  local 模型 = 模型库[取随机数(1,#模型库)]
  local 物法 = "法系"
  if 取随机数()<=50 then
    物法 = nil
  end
  玩家数据[id].召唤兽:添加召唤兽(模型,nil,nil,true,0,物法)
  常规提示(id,"#Y/你获得了一个新的召唤兽"..模型)

end
function 系统处理类:兑换千亿兽决(id)
    if 玩家数据[id].道具:扣除道具数量(id,"神兜兜",99,"名称","神兜兜")==false then
    常规提示(id,"必须集齐99个才可以使用哟")
    return
    elseif 玩家数据[id].角色:取道具格子()==0 then
    常规提示(id,"请确保你的包裹格子大于1")
    end
    local 名称="高级魔兽要诀"
    local 技能=取特殊要诀10()
    玩家数据[id].道具:给予道具(id,名称,nil,技能)
    常规提示(id,"恭喜你获得了特殊魔兽要诀#R/["..技能.."]")
end
function 系统处理类:添加好友(id,连接id,好友id,类型)
  if id==好友id then
    常规提示(id,"#Y你无法将自己添加到好友名单中")
    return
  end
  if 类型==1 then
    if #玩家数据[id].角色.数据.好友数据.好友>=50 then
      常规提示(id,"#Y你的好友人数已达上限")
      return
    else
      --检查是否重复
      for n=1,#玩家数据[id].角色.数据.好友数据.好友 do
        if 玩家数据[id].角色.数据.好友数据.好友[n].id==好友id then
          常规提示(id,"#Y对方已经在你的好友名单中了")
          return
        end
      end
      local 删除序列=0
      for n=1,#玩家数据[id].角色.数据.好友数据.黑名单 do
        if 玩家数据[id].角色.数据.好友数据.黑名单[n].id==好友id then
          删除序列=n
        end
      end
      if 删除序列~=0 then
        table.remove(玩家数据[id].角色.数据.好友数据.黑名单,删除序列)
      end
      --增加新朋友
    end
    玩家数据[id].角色.数据.好友数据.好友[#玩家数据[id].角色.数据.好友数据.好友+1]={关系="陌生人",模型=玩家数据[好友id].角色.数据.模型,名称=玩家数据[好友id].角色.数据.名称,id=好友id,门派=玩家数据[好友id].角色.数据.门派,帮派=玩家数据[好友id].角色.数据.帮派,等级=玩家数据[好友id].角色.数据.等级,称谓=玩家数据[好友id].角色.数据.当前称谓}
    for n=1,#玩家数据[好友id].角色.数据.好友数据.好友 do
      if 玩家数据[好友id].角色.数据.好友数据.好友[n].id==id then
        if 玩家数据[好友id].角色.数据.好友数据.好友[n].好友度~=nil then
          玩家数据[id].角色.数据.好友数据.好友[#玩家数据[id].角色.数据.好友数据.好友].好友度=玩家数据[好友id].角色.数据.好友数据.好友[n].好友度
        end
        玩家数据[好友id].角色.数据.好友数据.好友[n].关系="普通朋友"
        玩家数据[id].角色.数据.好友数据.好友[#玩家数据[id].角色.数据.好友数据.好友].关系="普通朋友"
      end
    end
    常规提示(id,"#Y添加好友成功")
    常规提示(好友id,"#Y"..玩家数据[id].角色.数据.名称.."将你添加为好友")
    local 删除序列=0
    for n=1,#玩家数据[id].角色.数据.好友数据.临时 do
      if 玩家数据[id].角色.数据.好友数据.临时[n].id==好友id then
        删除序列=n
      end
    end
    if 删除序列~=0 then
      table.remove(玩家数据[id].角色.数据.好友数据.临时,删除序列)
    end
    发送数据(连接id,52)
    if 玩家数据[id].角色.数据.好友数据.好友[#玩家数据[id].角色.数据.好友数据.好友].关系~="陌生人" then
      发送数据(玩家数据[好友id].连接id,52)
    end
  elseif 类型==2 then  --加为临时
    for n=1,#玩家数据[id].角色.数据.好友数据.好友 do
      if 玩家数据[id].角色.数据.好友数据.好友[n].id==好友id then
        常规提示(id,"#Y对方已经在你的好友名单中了")
        return
      end
    end
    for n=1,#玩家数据[id].角色.数据.好友数据.临时 do
      if 玩家数据[id].角色.数据.好友数据.临时[n].id==好友id then
        常规提示(id,"#Y对方已经在你的临时好友名单中了")
        return
      end
    end
    local 序列=0
    if #玩家数据[id].角色.数据.好友数据.临时<6 then
      序列=#玩家数据[id].角色.数据.好友数据.临时+1
    else
      table.remove(玩家数据[id].角色.数据.好友数据.临时,1)
      序列=6
    end
    玩家数据[id].角色.数据.好友数据.临时[序列]={关系="陌生人",模型=玩家数据[好友id].角色.数据.模型,名称=玩家数据[好友id].角色.数据.名称,id=好友id,门派=玩家数据[好友id].角色.数据.门派,帮派=玩家数据[好友id].角色.数据.帮派,等级=玩家数据[好友id].角色.数据.等级,称谓=玩家数据[好友id].角色.数据.当前称谓}
    常规提示(id,"#Y添加临时好友成功")
    发送数据(连接id,52)
  elseif 类型==3 then  --加为临时
    for n=1,#玩家数据[id].角色.数据.好友数据.黑名单 do
      if 玩家数据[id].角色.数据.好友数据.黑名单[n].id==好友id then
        常规提示(id,"#Y对方已经在你的黑名单中了")
        return
      end
    end
    if #玩家数据[id].角色.数据.好友数据.黑名单>=20 then
      常规提示(id,"#Y你的黑名单人数已达上限")
      return
    end
    玩家数据[id].角色.数据.好友数据.黑名单[#玩家数据[id].角色.数据.好友数据.黑名单+1]={关系="黑名单",模型=玩家数据[好友id].角色.数据.模型,名称=玩家数据[好友id].角色.数据.名称,id=好友id,门派=玩家数据[好友id].角色.数据.门派,帮派=玩家数据[好友id].角色.数据.帮派,等级=玩家数据[好友id].角色.数据.等级,称谓=玩家数据[好友id].角色.数据.当前称谓}
    好友黑名单[id][#好友黑名单[id]+1]=好友id
    常规提示(id,"#Y添加黑名单成功")
    local 删除序列=0
    for n=1,#玩家数据[id].角色.数据.好友数据.好友 do
      if 玩家数据[id].角色.数据.好友数据.好友[n].id==好友id then
        删除序列=n
      end
    end
    if 删除序列~=0 then
      table.remove(玩家数据[id].角色.数据.好友数据.好友,删除序列)
    end
    删除序列=0
    for n=1,#玩家数据[id].角色.数据.好友数据.临时 do
      if 玩家数据[id].角色.数据.好友数据.临时[n].id==好友id then
        删除序列=n
      end
    end
    if 删除序列~=0 then
      table.remove(玩家数据[id].角色.数据.好友数据.临时,删除序列)
    end
    删除序列=0
    for n=1,#玩家数据[id].角色.数据.好友数据.最近 do
      if 玩家数据[id].角色.数据.好友数据.最近[n].id==好友id then
        删除序列=n
      end
    end
    if 删除序列~=0 then
      table.remove(玩家数据[id].角色.数据.好友数据.最近,删除序列)
    end
    发送数据(连接id,52)
  end
end

function 系统处理类:查找角色(名称,id)
  local 数据组={}
  if id~="" then id=id+0 end
  for i, v in pairs(玩家数据) do
    if 玩家数据[i].管理==nil and 玩家数据[i].角色.数据.名称==名称 or i==id then
      数据组[1]=玩家数据[i].角色.数据.名称
      数据组[2]=i
      数据组[3]=玩家数据[i].角色.数据.等级
      数据组[4]=玩家数据[i].角色.数据.门派
    end
  end
  return 数据组
end

function 系统处理类:断开游戏(数字id,id)
  if id~=nil then
    if id ~= 玩家数据[数字id].连接id then
      return
    end
  end
  if 玩家数据[数字id] == nil then
    return
  end
  if 玩家数据[数字id].摊位数据~=nil then
    return
  end
  if 玩家数据[数字id].管理~=nil then
    玩家数据[数字id] = nil
    return
  end
  if 玩家数据[数字id]~=nil and 玩家数据[数字id].战斗~=0 then
    if 战斗准备类.战斗盒子[玩家数据[数字id].战斗]~=nil and 玩家数据[数字id].观战 == nil then
      战斗准备类.战斗盒子[玩家数据[数字id].战斗]:设置断线玩家(数字id)
      return
    elseif 战斗准备类.战斗盒子[玩家数据[数字id].战斗]~=nil and 玩家数据[数字id].观战 ~= nil then
      战斗准备类.战斗盒子[玩家数据[数字id].战斗][数字id] = nil
      玩家数据[数字id].战斗=0
    else
      玩家数据[数字id].战斗=0
    end
  end
  if 玩家数据[数字id]~=nil  then
    if 玩家数据[数字id].交易信息~=nil then
      玩家数据[数字id].道具:取消交易(数字id)
    end
    -- if 玩家数据[数字id].队伍~=0 then
    --   队伍处理类:退出队伍(数字id)
    -- end
    if 玩家数据[数字id].队伍~=0 then
      if not 判断是否为空表(剑会天下三人匹配) then
        for i=1,#队伍数据[玩家数据[数字id].队伍].成员数据 do
          if 玩家数据[队伍数据[玩家数据[数字id].队伍].成员数据[i]]~=nil then
            发送数据(玩家数据[队伍数据[玩家数据[数字id].队伍].成员数据[i]].连接id,128)
            常规提示(队伍数据[玩家数据[数字id].队伍].成员数据[i],"#Y/因为队伍玩家离开取消了匹配！")
          end
        end
        for n,v in pairs(剑会天下三人匹配) do
          if v.id == 玩家数据[数字id].队伍 then
            table.remove(剑会天下三人匹配,n)
            break
          end
        end
      end
      if not 判断是否为空表(剑会天下五人匹配) then
        for i=1,#队伍数据[玩家数据[数字id].队伍].成员数据 do
          if 玩家数据[队伍数据[玩家数据[数字id].队伍].成员数据[i]]~=nil then
            发送数据(玩家数据[队伍数据[玩家数据[数字id].队伍].成员数据[i]].连接id,128)
            常规提示(队伍数据[玩家数据[数字id].队伍].成员数据[i],"#Y/因为队伍玩家离开取消了匹配！")
          end
        end
        for n,v in pairs(剑会天下五人匹配) do
          if v.id == 玩家数据[数字id].队伍 then
            table.remove(剑会天下五人匹配,n)
            break
          end
        end
      end
      队伍处理类:退出队伍(数字id)
    else
      if not 判断是否为空表(剑会天下单人匹配) then
        for n,v in pairs(剑会天下单人匹配) do
          if v.id == 数字id then
            table.remove(剑会天下单人匹配,n)
            break
          end
        end
      end
    end
    if 自动遇怪[数字id]~=nil then
      自动遇怪[数字id]=nil
    end
    if 玩家数据[数字id].角色.数据.帮派 ~= "无帮派" and 玩家数据[数字id].角色.数据.帮派数据 ~= nil then
      local 帮派编号 = 玩家数据[数字id].角色.数据.帮派数据.编号
      if 帮派数据[帮派编号].商人 == nil then 帮派数据[帮派编号].商人 = {} end
      if 帮派数据[帮派编号].成员数据[数字id] ~= nil and 帮派数据[帮派编号].成员数据[数字id].职务 == "商人" then
        for i=1,#帮派数据[帮派编号].商人 do
          if 帮派数据[帮派编号].商人[i] ~= nil and 帮派数据[帮派编号].商人[i].id == 数字id then
            table.remove(帮派数据[帮派编号].商人,i)
            break
          end
        end
        帮派数据[帮派编号].成员数据[数字id].职务 =  "帮众"
        玩家数据[数字id].角色:删除称谓(数字id,帮派数据[帮派编号].帮派名称.."商人")
        玩家数据[数字id].角色:添加称谓(数字id,帮派数据[帮派编号].帮派名称.."帮众")
      end
      帮派数据[帮派编号].成员数据[数字id].在线 = false
      帮派数据[帮派编号].成员数据[数字id].离线时间 = os.time()
    end
    玩家数据[数字id].角色.数据.离线时间=os.time()
    玩家数据[数字id].角色:存档()
    if 玩家数据[数字id].账号 == nil then
        玩家数据[数字id].账号 = 玩家数据[数字id].角色.数据.账号
        账号记录[玩家数据[数字id].账号..数字id]=nil
    else
      账号记录[玩家数据[数字id].账号..数字id]=nil --退出游戏
    end
    地图处理类:移除玩家(数字id)
    玩家数据[数字id]=nil
    collectgarbage("collect")
  end
end

function 系统处理类:统计排行榜(id)
  local 名单={实力={},比武={},帮派={},财富={银子={},金额={}}}
  local 我的排行={实力={},比武={},帮派={},财富={银子={},金额={}}}
  local 发送信息 = {实力={},比武={},帮派={},财富={银子={},金额={}}}
  for b, v in pairs(经验数据.排行) do
    名单["实力"][#名单["实力"]+1]={经验=经验数据.排行[b].经验,id=b,名称=经验数据.排行[b].名称,等级=经验数据.排行[b].等级,门派=经验数据.排行[b].门派,账号=经验数据.排行[b].账号}
  end
  table.sort(名单["实力"],function(a,b) return a.经验>b.经验 end )
  发送信息.比武=比武大会
  for b, v in pairs(银子数据) do
    名单["财富"]["银子"][#名单["财富"]["银子"]+1]={银子=银子数据[b].银子,id=b,名称=银子数据[b].名称,等级=银子数据[b].等级,门派=银子数据[b].门派,账号=银子数据[b].账号}
  end
  table.sort(名单["财富"]["银子"],function(a,b) return a.银子>b.银子 end )
  for b, v in pairs(充值数据) do
    名单["财富"]["金额"][#名单["财富"]["金额"]+1]={金额=充值数据[b].金额,id=b,名称=充值数据[b].名称,等级=充值数据[b].等级,门派=充值数据[b].门派,账号=银子数据[b].账号}
  end
  table.sort(名单["财富"]["金额"],function(a,b) return a.金额>b.金额 end )
  for b, v in pairs(帮派竞赛) do
    名单["帮派"][#名单["帮派"]+1]={帮派=帮派竞赛[b].帮派名称,id=b,帮主=帮派竞赛[b].帮主,id=帮派竞赛[b].id,积分=帮派竞赛[b].积分}
  end
  table.sort(名单["帮派"],function(a,b) return a.积分>b.积分 end )
  for i=1,10 do
    if 名单["实力"][i] ~= nil then
      发送信息.实力[i] = 名单["实力"][i]
    end
    if 名单["比武"][i] ~= nil then
      发送信息.比武[i] = 名单["比武"][i]
    end
    if 名单["帮派"][i] ~= nil then
      发送信息.帮派[i] = 名单["帮派"][i]
    end
    if 名单["财富"]["银子"][i] ~= nil then
      发送信息.财富.银子[i] = 名单["财富"]["银子"][i]
    end
    if 名单["财富"]["金额"][i] ~= nil then
      发送信息.财富.金额[i] = 名单["财富"]["金额"][i]
    end
  end
  发送信息.id = id
  发送数据(玩家数据[id].连接id,49,发送信息)
end

function 系统处理类:取角色选择id(id,账号)
  if 账号==nil or id==nil or id==0 then
    return
  end
  local 临时id = 0
  if f函数.文件是否存在([[data/]]..账号..[[/信息.txt]])==false then
    return
  else
    local 临时文件=读入文件([[data/]]..账号..[[/信息.txt]])
    local 写入信息=table.loadstring(临时文件)
    if 写入信息[id+0]~=nil then
      if f函数.文件是否存在([[data/]]..账号..[[/]]..写入信息[id+0]..[[/角色.txt]])==false then
        -- 发送数据(id,7,"#Y/账号并不存在")
        return
      else
        local 读取文件=读入文件([[data/]]..账号..[[/]]..写入信息[id+0]..[[/角色.txt]])
        local 还原数据=table.loadstring(读取文件)
        临时id = 还原数据.数字id
      end
    end
  end
  return 临时id
end



function 系统处理类:进入游戏(id,账号,数字id,ip,硬盘,序号)


  -- if 序号 == 4.2 then
  --   print("有人通过4.2序号接口进入,请注意!")
    -- 数字id=数字id+0
    -- __C客户信息[id].角色id = 数字id
    -- __C客户信息[id].jb=2
    -- 玩家数据[数字id]={连接id=id}
    -- 玩家数据[数字id].角色=角色处理类:创建(id)
    -- 玩家数据[数字id].道具=道具处理类:创建(id)
    -- 玩家数据[数字id].装备=装备处理类:创建(id,数字id)
    -- 玩家数据[数字id].召唤兽=召唤兽处理类:创建(id,数字id)
    -- 玩家数据[数字id].账号=账号
    -- 玩家数据[数字id].yp=硬盘
    -- 玩家数据[数字id].ip=ip
    -- 玩家数据[数字id].管理 = true
    -- 发送数据(玩家数据[数字id].连接id,10086)
  -- else
    数字id=数字id+0
    --同步给网关ID信息
    发送数据(id,-2,数字id)
    if 消息数据[数字id]==nil then
      消息数据[数字id]={}
    end
    if 好友黑名单[数字id]==nil then
      好友黑名单[数字id]={}
    end
    if 玩家数据[数字id] ~= nil and 玩家数据[数字id].角色 ~= nil and 玩家数据[数字id].角色.数据.藏宝阁出售 == nil then
      if 玩家数据[数字id].交易信息~=nil then
        玩家数据[数字id].道具:取消交易(数字id)
      end
      发送数据(玩家数据[数字id].连接id,998,"您的账号已经在其他地方登陆,如不是您本人,请及时修改密码")
      玩家数据[数字id].分区=tonumber(f函数.读配置(程序目录..[[data\]]..账号..[[\账号信息.txt]],"账号配置","分区"))  ---嘎嘎妹 跨服
      --__S服务:断开连接(玩家数据[数字id].连接id)
      玩家数据[数字id].连接id=id
      if 玩家数据[数字id].角色.数据.地图数据.编号 >=100000 and 玩家数据[数字id].角色.数据.地图数据.编号 <=400000000 then
        local x = tonumber(string.sub(玩家数据[数字id].角色.数据.地图数据.编号,2,6))
        for i=1,#房屋数据 do
          if 房屋数据[i].ID == x then
            发送数据(id,111,房屋数据[i])
          end
        end
      end
      if 序号 == nil then
        发送数据(id,5,玩家数据[数字id].角色:取总数据())
        发送数据(id,16,玩家数据[数字id].召唤兽.数据)
        发送数据(id,102,玩家数据[数字id].助战:取数据())
        玩家数据[数字id].角色:刷新任务跟踪()
      end
      发送数据(id,43,{时辰=时辰信息.当前})
      if (玩家数据[数字id].角色.数据.地图数据.编号>=1340 and 玩家数据[数字id].角色.数据.地图数据.编号<=1342) or 玩家数据[数字id].角色.数据.地图数据.编号==1332 then
         地图处理类:跳转地图(数字id,1001,514,154) -- 跳回长安重进
      else
         地图处理类:重连加入(数字id,玩家数据[数字id].角色.数据.地图数据.编号,玩家数据[数字id].角色.数据.地图数据.x,玩家数据[数字id].角色.数据.地图数据.y)
      end
      self:更新消息通知(数字id)
      if 玩家数据[数字id].战斗 ~= 0 and 战斗准备类.战斗盒子[玩家数据[数字id].战斗]==nil then
        玩家数据[数字id].战斗=0
        发送数据(玩家数据[数字id].连接id,5505)
        玩家数据[数字id].遇怪时间=os.time()+取随机数(5,10)
        玩家数据[数字id].道具:重置法宝回合(数字id)
        玩家数据[数字id].角色.数据.战斗开关=nil
      elseif 玩家数据[数字id].战斗 ~= 0 and 战斗准备类.战斗盒子[玩家数据[数字id].战斗]~=nil and 战斗准备类.战斗盒子[玩家数据[数字id].战斗].参战玩家==nil then
        玩家数据[数字id].战斗=0
        发送数据(玩家数据[数字id].连接id,5505)
        玩家数据[数字id].遇怪时间=os.time()+取随机数(5,10)
        玩家数据[数字id].道具:重置法宝回合(数字id)
        玩家数据[数字id].角色.数据.战斗开关=nil
      end
      if 玩家数据[数字id].战斗==0 then
        if 玩家数据[数字id].队伍~=0 then
          队伍处理类:退出队伍(数字id)
        end
      else
        if 玩家数据[数字id].队伍~=0 then
          队伍处理类:索取队伍信息(数字id,4004)
          if 玩家数据[数字id].队长 then
            发送数据(玩家数据[数字id].连接id,4006)
          end
        end
        if 序号 == nil then
          战斗准备类.战斗盒子[玩家数据[数字id].战斗]:设置重连玩家(数字id)
        else
          战斗准备类.战斗盒子[玩家数据[数字id].战斗]:设置断线重连(数字id)
        end
      end
    else
        if 账号记录 == nil then
          return
        end
        账号记录[账号..数字id]=数字id
        玩家数据[数字id]={连接id=id}
        玩家数据[数字id].角色=角色处理类:创建(id)
        玩家数据[数字id].道具=道具处理类:创建(id)
        玩家数据[数字id].装备=装备处理类:创建(id,数字id)
        玩家数据[数字id].召唤兽=召唤兽处理类:创建(id,数字id)
        玩家数据[数字id].助战=助战处理类:创建(数字id)
        玩家数据[数字id].角色:加载数据(账号,数字id)
        玩家数据[数字id].召唤兽仓库 = 召唤兽仓库类:创建(id)
        玩家数据[数字id].召唤兽仓库:加载数据(账号,数字id)
        if 玩家数据[数字id].角色.数据.藏宝阁出售 ~= nil then
          常规提示(数字id,"#Y该角色已经被上架藏宝阁,无法进入游戏,可以使用任意角色在XX处使用ID和取回密码取回账号")
          return
        end
        -- 玩家数据[数字id].孩子=孩子处理类:创建(数字id)
        -- 玩家数据[数字id].孩子:加载数据(账号,数字id)
        玩家数据[数字id].道具:加载数据(账号,数字id)
        玩家数据[数字id].召唤兽:加载数据(账号,数字id)
        玩家数据[数字id].助战:加载数据(账号,数字id)
        玩家数据[数字id].账号=账号
        玩家数据[数字id].分区=tonumber(f函数.读配置(程序目录..[[data\]]..账号..[[\账号信息.txt]],"账号配置","分区"))---嘎嘎妹 跨服
        玩家数据[数字id].队伍=0
        玩家数据[数字id].当前频道=os.time()
        玩家数据[数字id].世界频道=os.time()
        玩家数据[数字id].传闻频道=os.time()
        玩家数据[数字id].遇怪时间=os.time()+取随机数(10,20)
        玩家数据[数字id].战斗=0
        玩家数据[数字id].ip=ip
        玩家数据[数字id].yp=硬盘
        玩家数据[数字id].连接id=id
        玩家数据[数字id].商品列表=0
        玩家数据[数字id].移动数据={}
        玩家数据[数字id].最后事件=""
        玩家数据[数字id].道具操作={}
        玩家数据[数字id].保存时间=os.time()+math.random(0,60)
        f函数.写配置(程序目录..[[data\]]..账号..[[\账号信息.txt]],"账号配置","创建ip",ip)
        if 玩家数据[数字id].角色.数据.地图数据.编号 >=100000 and 玩家数据[数字id].角色.数据.地图数据.编号 <=400000000 then
          local x = tonumber(string.sub(玩家数据[数字id].角色.数据.地图数据.编号,2,6))
          for i=1,#房屋数据 do
            if 房屋数据[i].ID == x then
              发送数据(id,111,房屋数据[i])
            end
          end
        end
        if 玩家数据[数字id].角色.数据.地图数据.编号>=1600 and 玩家数据[数字id].角色.数据.地图数据.编号<=1620 and 迷宫数据.开关==false then
          玩家数据[数字id].角色.数据.地图数据.编号=1001
          玩家数据[数字id].角色.数据.地图数据.x=365
          玩家数据[数字id].角色.数据.地图数据.y=165
		elseif 玩家数据[数字id].角色.数据.地图数据.编号>=6003 and 玩家数据[数字id].角色.数据.地图数据.编号<=6008 and not 比武大会.比赛 and not 比武大会.入场 then
          玩家数据[数字id].角色.数据.地图数据.编号=1001
          玩家数据[数字id].角色.数据.地图数据.x=365
          玩家数据[数字id].角色.数据.地图数据.y=165
        elseif 玩家数据[数字id].角色.数据.地图数据.编号==5001 then
          玩家数据[数字id].角色.数据.地图数据.编号=1226
          玩家数据[数字id].角色.数据.地图数据.x=115*20
          玩家数据[数字id].角色.数据.地图数据.y=15*20
        elseif 玩家数据[数字id].角色.数据.地图数据.编号>=6021 and 玩家数据[数字id].角色.数据.地图数据.编号<=6023 and (玩家数据[数字id].角色:取任务(130) == nil or 玩家数据[数字id].角色:取任务(130) == 0 or 任务数据[玩家数据[数字id].角色:取任务(130)]==nil) then
          玩家数据[数字id].角色.数据.地图数据.编号=1070
          玩家数据[数字id].角色.数据.地图数据.x=125*20
          玩家数据[数字id].角色.数据.地图数据.y=144*20
        elseif 玩家数据[数字id].角色.数据.地图数据.编号>=6001 and 玩家数据[数字id].角色.数据.地图数据.编号<=6002 and (玩家数据[数字id].角色:取任务(120) == nil or 玩家数据[数字id].角色:取任务(120) == 0 or 任务数据[玩家数据[数字id].角色:取任务(120)]==nil) then
          玩家数据[数字id].角色.数据.地图数据.编号=1001
          玩家数据[数字id].角色.数据.地图数据.x=287*20
          玩家数据[数字id].角色.数据.地图数据.y=85*20
        elseif 玩家数据[数字id].角色.数据.地图数据.编号>=6024 and 玩家数据[数字id].角色.数据.地图数据.编号<=6026 and (玩家数据[数字id].角色:取任务(120) == nil or 玩家数据[数字id].角色:取任务(120) == 0 or 任务数据[玩家数据[数字id].角色:取任务(120)]==nil) then
          玩家数据[数字id].角色.数据.地图数据.编号=1002
          玩家数据[数字id].角色.数据.地图数据.x=34*20
          玩家数据[数字id].角色.数据.地图数据.y=71*20
        elseif 玩家数据[数字id].角色.数据.地图数据.编号>=6027 and 玩家数据[数字id].角色.数据.地图数据.编号<=6030 and (玩家数据[数字id].角色:取任务(160) == nil or 玩家数据[数字id].角色:取任务(160) == 0 or 任务数据[玩家数据[数字id].角色:取任务(160)]==nil) then
          玩家数据[数字id].角色.数据.地图数据.编号=1070
          玩家数据[数字id].角色.数据.地图数据.x=53*20
          玩家数据[数字id].角色.数据.地图数据.y=70*20
        elseif 玩家数据[数字id].角色.数据.地图数据.编号>=6031 and 玩家数据[数字id].角色.数据.地图数据.编号<=6035 and (玩家数据[数字id].角色:取任务(180) == nil or 玩家数据[数字id].角色:取任务(180) == 0 or 任务数据[玩家数据[数字id].角色:取任务(180)]==nil) then
          玩家数据[数字id].角色.数据.地图数据.编号=1070
          玩家数据[数字id].角色.数据.地图数据.x=53*20
          玩家数据[数字id].角色.数据.地图数据.y=196*20
        elseif 玩家数据[数字id].角色.数据.地图数据.编号>=6036 and 玩家数据[数字id].角色.数据.地图数据.编号<=6039 and (玩家数据[数字id].角色:取任务(191) == nil or 玩家数据[数字id].角色:取任务(191) == 0 or 任务数据[玩家数据[数字id].角色:取任务(191)]==nil) then
          玩家数据[数字id].角色.数据.地图数据.编号=1001
          玩家数据[数字id].角色.数据.地图数据.x=365
          玩家数据[数字id].角色.数据.地图数据.y=165
        elseif 玩家数据[数字id].角色.数据.地图数据.编号>=7001 and 玩家数据[数字id].角色.数据.地图数据.编号<=7004 and (玩家数据[数字id].角色:取任务(7001) == nil or 玩家数据[数字id].角色:取任务(7001) == 0 or 任务数据[玩家数据[数字id].角色:取任务(7001)]==nil) then
          玩家数据[数字id].角色.数据.地图数据.编号=1501
          玩家数据[数字id].角色.数据.地图数据.x=87*20
          玩家数据[数字id].角色.数据.地图数据.y=29*20
        end
        if 玩家数据[数字id].角色.数据.地图数据==nil or (玩家数据[数字id].角色.数据.地图数据.编号 >= 100000  and 玩家数据[数字id].角色.数据.地图数据.编号 <= 400000000) then
          玩家数据[数字id].角色.数据.地图数据.编号=1001
          玩家数据[数字id].角色.数据.地图数据.x=484*20
          玩家数据[数字id].角色.数据.地图数据.y=140*20
        end
---嘎嘎 开服地图跳转到长安
        if 玩家数据[数字id].角色.数据.地图数据==nil or (玩家数据[数字id].角色.数据.地图数据.编号 >= 5140  and 玩家数据[数字id].角色.数据.地图数据.编号 <= 5157) then
          玩家数据[数字id].角色.数据.地图数据.编号=1001
          玩家数据[数字id].角色.数据.地图数据.x=226*20
          玩家数据[数字id].角色.数据.地图数据.y=114*20
        end



        if 玩家数据[数字id].角色.数据.地图数据.编号 >=100000 and 玩家数据[数字id].角色.数据.地图数据.编号 <=400000000 then
          local x = tonumber(string.sub(玩家数据[数字id].角色.数据.地图数据.编号,2,6))
          for i=1,#房屋数据 do
            if 房屋数据[i].ID == x then
              发送数据(id,111,房屋数据[i])
            end
          end
        end
        if 银子数据[数字id]==nil then
          银子数据[数字id]={id=数字id,名称=玩家数据[数字id].角色.数据.名称,银子=玩家数据[数字id].角色.数据.银子+玩家数据[数字id].角色.数据.存银,门派=玩家数据[数字id].角色.数据.门派,等级=玩家数据[数字id].角色.数据.等级}
        end
        if 活跃数据[数字id]==nil or 活跃数据==nil then
          活跃数据[数字id]={活跃度=0,领取100活跃=false,领取200活跃=false,领取300活跃=false,领取400活跃=false,领取500活跃=false}
        end
      --发送角色数据
      if 玩家数据[数字id].角色.数据.帮派 ~= "无帮派" and (玩家数据[数字id].角色.数据.帮派数据 == nil or 帮派数据[玩家数据[数字id].角色.数据.帮派数据.编号] == nil or 帮派数据[玩家数据[数字id].角色.数据.帮派数据.编号].成员数据[数字id] == nil) then
        玩家数据[数字id].角色.数据.帮派 = "无帮派"
        玩家数据[数字id].角色.数据.帮派数据 = nil
        发送数据(数字id,7,"#R你已经被逐出了帮派")
      elseif 玩家数据[数字id].角色.数据.帮派 ~= "无帮派" and 玩家数据[数字id].角色.数据.帮派数据 ~= nil and 帮派数据[玩家数据[数字id].角色.数据.帮派数据.编号] ~= nil and 帮派数据[玩家数据[数字id].角色.数据.帮派数据.编号].成员数据[数字id] ~= nil then
        帮派数据[玩家数据[数字id].角色.数据.帮派数据.编号].成员数据[数字id].在线 = true
      end
      for i,v in pairs(玩家数据[数字id].角色.数据.装备) do
        if v ~= nil and 玩家数据[数字id].道具.数据[v] ~= nil and 玩家数据[数字id].道具.数据[v].临时附魔 ~= nil then
          玩家数据[数字id].角色:附魔装备刷新(数字id,v)
        end
      end
-----------------嘎嘎
  --[[if not 强化技能 then
    for i=1,#玩家数据[数字id].角色.数据.强化技能 do
        玩家数据[数字id].角色.数据.强化技能[i].等级=0
    end
  end--]]
    if 玩家数据[数字id].角色.数据.多角色操作==nil then
        玩家数据[数字id].角色.数据.多角色操作 = false
    end
    if 玩家数据[数字id].角色.数据.飞行==nil then
      玩家数据[数字id].角色.数据.飞行=false
    else
       玩家数据[数字id].角色.数据.飞行=false
    end
    if 玩家数据[数字id].角色.数据.跨服强化==nil then
       玩家数据[数字id].角色.数据.跨服强化={伤害结果=0,气血上限=0}
    end
    if 玩家数据[数字id].角色.数据.召唤兽强化==nil then ---没写效果
       玩家数据[数字id].角色.数据.召唤兽强化=0
    end
    if 玩家数据[数字id].角色.数据.玄元锁==nil then
      玩家数据[数字id].角色.数据.玄元锁={激活=false,名称="玄元锁",潜能点=0,等级=0,风暴={0,0},流沙={0,0},冰冻={0,0},重击={0,0},幸运={0,0},气血={0,0}}
    end
    if 玩家数据[数字id].角色.数据.决战神州==nil then
       玩家数据[数字id].角色.数据.决战神州={东={仙=0,尊=0},南={仙=0,尊=0},西={仙=0,尊=0},北={仙={冰冻=0,幸运=0},尊={冰冻=0,幸运=0}}}
    end

      发送数据(id,5,玩家数据[数字id].角色:取总数据())
      self:进入游戏检测(数字id)
      发送数据(id,16,玩家数据[数字id].召唤兽.数据)
      发送数据(id,102,玩家数据[数字id].助战:取数据())
--      发送数据(id,17.2,玩家数据[数字id].孩子:取数据())
      发送数据(id,1,{id=id,用户="正式用户"})
      发送数据(id,43,{时辰=时辰信息.当前})


      if 玩家数据[数字id].角色.数据.多角色操作 then
        发送数据(id,158)
      end


      if (玩家数据[数字id].角色.数据.地图数据.编号>=1340 and 玩家数据[数字id].角色.数据.地图数据.编号<=1342) or 玩家数据[数字id].角色.数据.地图数据.编号==1332 then
         地图处理类:跳转地图(数字id,1001,514,154)
      else
         地图处理类:加入玩家(数字id,玩家数据[数字id].角色.数据.地图数据.编号,玩家数据[数字id].角色.数据.地图数据.x,玩家数据[数字id].角色.数据.地图数据.y)
      end
      玩家数据[数字id].角色:刷新任务跟踪()
       玩家数据[数字id].角色:刷新信息()
      self:更新消息通知(数字id)
      self:进入游戏预处理(id,数字id)
  end



end

function 系统处理类:进入游戏预处理(id,数字id)
   if 玩家数据[数字id].角色.数据.强P开关 ~= nil then
        发送数据(id,94,{开关=true})
        地图处理类:更改强PK(数字id,true)
      elseif 玩家数据[数字id].角色.数据.PK开关 ~= nil then
        发送数据(id,93,{开关=true})
        地图处理类:更改PK(数字id,true)
      end
        local 点卡=f函数.读配置(程序目录..[[data\]]..玩家数据[数字id].账号..[[\账号信息.txt]],"账号配置","点卡")
        if 点卡==nil or 点卡=="空" then
            f函数.写配置(程序目录..[[data\]]..玩家数据[数字id].账号..[[\账号信息.txt]],"账号配置","点卡","0")
        end
      if 玩家数据[数字id].角色.数据.剧情.飞升==nil then
          玩家数据[数字id].角色.数据.修炼.攻击修炼[3]=math.floor(取人物修炼等级上限(玩家数据[数字id].角色.数据.等级))
          玩家数据[数字id].角色.数据.修炼.防御修炼[3]=math.floor(取人物修炼等级上限(玩家数据[数字id].角色.数据.等级))
          玩家数据[数字id].角色.数据.修炼.法术修炼[3]=math.floor(取人物修炼等级上限(玩家数据[数字id].角色.数据.等级))
          玩家数据[数字id].角色.数据.修炼.抗法修炼[3]=math.floor(取人物修炼等级上限(玩家数据[数字id].角色.数据.等级))
          玩家数据[数字id].角色.数据.修炼.猎术修炼[3]=math.floor(取人物修炼等级上限(玩家数据[数字id].角色.数据.等级))
          玩家数据[数字id].角色.数据.bb修炼.攻击控制力[3]=math.floor(取人物修炼等级上限(玩家数据[数字id].角色.数据.等级))
          玩家数据[数字id].角色.数据.bb修炼.防御控制力[3]=math.floor(取人物修炼等级上限(玩家数据[数字id].角色.数据.等级))
          玩家数据[数字id].角色.数据.bb修炼.法术控制力[3]=math.floor(取人物修炼等级上限(玩家数据[数字id].角色.数据.等级))
          玩家数据[数字id].角色.数据.bb修炼.抗法控制力[3]=math.floor(取人物修炼等级上限(玩家数据[数字id].角色.数据.等级))
      end
----帮战
      if 玩家数据[数字id].角色.数据.帮战次数==nil then
         玩家数据[数字id].角色.数据.帮战次数=0
      end
      if 玩家数据[数字id].角色.数据.帮战积分==nil then
         玩家数据[数字id].角色.数据.帮战积分=0
      end
      if 玩家数据[数字id].角色.数据.自动开关==nil then
         玩家数据[数字id].角色.数据.自动开关={挂机类型={},自动类型={},高级飞行棋=0,执行进度=0,执行时间=0,间隔时间=5,执行=false,是否挂机=false}
      end

      if 玩家数据[数字id].角色.数据.自动开关.挂机类型 ==nil then
         玩家数据[数字id].角色.数据.自动开关={挂机类型={},自动类型={},高级飞行棋=0,执行进度=0,执行时间=0,间隔时间=5,执行=false,是否挂机=false}
      end

      if 玩家数据[数字id].角色.数据.自动开关.间隔时间~=nil then
         玩家数据[数字id].角色.数据.自动开关.间隔时间=2
      end


      if 玩家数据[数字id].角色.数据.等级 >50 and 玩家数据[数字id].角色.数据.新手银子 ~= nil then
        玩家数据[数字id].角色.数据.新手银子 = nil
      end
      if 玩家数据[数字id].角色.数据.等级>=69 then
          玩家数据[数字id].角色.数据.装备属性.可换乾元丹=3
      end
      if 玩家数据[数字id].角色.数据.等级>=89 then
          玩家数据[数字id].角色.数据.装备属性.可换乾元丹=4
      end
      if 玩家数据[数字id].角色.数据.等级>=109 then
          玩家数据[数字id].角色.数据.装备属性.可换乾元丹=5
      end
      if 玩家数据[数字id].角色.数据.等级>=129 then
          玩家数据[数字id].角色.数据.装备属性.可换乾元丹=5
      end
      if 玩家数据[数字id].角色.数据.等级>=155 then
          玩家数据[数字id].角色.数据.装备属性.可换乾元丹=5
      end
      if 玩家数据[数字id].角色.数据.等级>=159 then
          玩家数据[数字id].角色.数据.装备属性.可换乾元丹=6
      end
      if 玩家数据[数字id].角色.数据.等级>=164 then
          玩家数据[数字id].角色.数据.装备属性.可换乾元丹=7
      end
      if 玩家数据[数字id].角色.数据.等级>=168 then
          玩家数据[数字id].角色.数据.装备属性.可换乾元丹=7
      end
      if 玩家数据[数字id].角色.数据.等级>=171 then
          玩家数据[数字id].角色.数据.装备属性.可换乾元丹=7
      end

      if 玩家数据[数字id].角色.数据.比武积分==nil or 玩家数据[数字id].角色.数据.比武积分==0 then
          玩家数据[数字id].角色.数据.比武积分={当前积分=0,总积分=0}
      end

      if 玩家数据[数字id].角色.数据.累积活跃==nil then
          玩家数据[数字id].角色.数据.累积活跃={当前积分=0,总积分=0}
      end

      if 玩家数据[数字id].角色.数据.累积活跃.当前积分>=1 and 玩家数据[数字id].角色.数据.累积活跃.总积分~=13145 then
          玩家数据[数字id].角色.数据.累积活跃={当前积分=0,总积分=13145}
      end
      for n=1,#玩家数据[数字id].助战.数据 do
        if 玩家数据[数字id].助战.数据[n].装备属性.抵抗封印等级==nil or  玩家数据[数字id].助战.数据[n].装备属性.格挡值==nil then
          玩家数据[数字id].助战.数据[n].装备属性 = {法术防御=0,固定伤害=0,封印命中等级=0,法术伤害=0,物理暴击等级=0,法术暴击等级=0,物理暴击伤害=0,法术暴击伤害=0,治疗能力=0,气血=0,魔法=0,命中=0,伤害=0,防御=0,速度=0,躲避=0,灵力=0,体质=0,魔力=0,力量=0,耐力=0,敏捷=0,月饼=0,乾元丹=0,附加乾元丹=0,剩余乾元丹=0,可换乾元丹=7}
          local 月饼 = 玩家数据[数字id].助战.数据[n].装备属性.月饼
          local 乾元丹 = 玩家数据[数字id].助战.数据[n].装备属性.乾元丹
          local 附加乾元丹 = 玩家数据[数字id].助战.数据[n].装备属性.附加乾元丹
          local 剩余乾元丹 = 玩家数据[数字id].助战.数据[n].装备属性.剩余乾元丹
          local 可换乾元丹 = 玩家数据[数字id].助战.数据[n].装备属性.可换乾元丹
          玩家数据[数字id].助战.数据[n].装备属性 = {抵抗封印等级=0,法术伤害结果=0,狂暴等级=0,穿刺等级=0,气血回复效果=0,抗物理暴击等级=0,格挡值=0,抗法术暴击等级=0,封印命中等级=0,法术防御=0,固定伤害=0,法术伤害=0,物理暴击等级=0,法术暴击等级=0,物理暴击伤害=0,法术暴击伤害=0,治疗能力=0,气血=0,魔法=0,命中=0,伤害=0,防御=0,速度=0,躲避=0,灵力=0,体质=0,魔力=0,力量=0,耐力=0,敏捷=0,月饼=0,乾元丹=乾元丹,附加乾元丹=附加乾元丹,剩余乾元丹=剩余乾元丹,可换乾元丹=可换乾元丹}
        end
      end
        if VIP数据[数字id]==nil then
          VIP数据[数字id] = {}
          VIP数据[数字id].VIP经验 = 0
          VIP数据[数字id].VIP1状态 = false
          VIP数据[数字id].VIP2状态 = false
          VIP数据[数字id].VIP3状态 = false
          VIP数据[数字id].VIP4状态 = false
          VIP数据[数字id].VIP5状态 = false
        end
        if 玩家数据[数字id].角色.数据.帮派数据 ==nil then
           玩家数据[数字id].角色.数据.帮派数据 = {编号=nil,权限=nil}
         end

      if 玩家数据[数字id].角色.数据.刷新时间==nil or 玩家数据[数字id].角色.数据.记录时间==nil then
      玩家数据[数字id].角色.数据.刷新时间=0
      玩家数据[数字id].角色.数据.记录时间=0
      end

        if 成就数据[数字id]==nil then
        成就数据[数字id]={成就点=0}
        end

        if 比武奖励[数字id]==nil then
        比武奖励[数字id]={剑会已领=0,比武已领=0,失败次数=0,大会积分=0}
        end
        if 玩家数据[数字id].角色.战斗间隔==nil then
        玩家数据[数字id].角色.战斗间隔=os.time()
        end

        if 剑会天下[数字id]==nil then
        剑会天下[数字id]={当前积分=1200,连胜=0,名称=玩家数据[数字id].角色.名称,等级=玩家数据[数字id].角色.等级,数字id=id,门派=玩家数据[数字id].角色.门派}
        end

        if 玩家数据[数字id].角色.数据.传音纸鹤== nil then
          玩家数据[数字id].角色.数据.传音纸鹤=0
        end
      if 妖魔积分[数字id]==nil then
         妖魔积分[数字id]={当前=0,总计=0,使用=0}
      end
       if 玩家数据[数字id].角色.数据.钓鱼积分== nil then
        玩家数据[数字id].角色.数据.钓鱼积分=0
      end

      if 副本奖励[数字id]==nil then
         副本奖励[数字id]={}
       end

        --  if 玩家数据[数字id].角色.数据.辅助技能[3].名称 == "强壮"  then
        --     玩家数据[数字id].角色.数据.辅助技能[3].等级 = 0
        -- end
        if 玩家数据[数字id].角色.数据.辅助技能[13] == nil then
            玩家数据[数字id].角色.数据.辅助技能[13] ={等级=0,名称="强壮",学会=false}
        end
        if 玩家数据[数字id].角色.数据.辅助技能[13] == nil then
            玩家数据[数字id].角色.数据.辅助技能[13] ={等级=0,名称="神速",学会=false}
        end
        if 玩家数据[数字id].角色.数据.帮派数据.编号 ~= nil then
        local 帮派编号 = 玩家数据[数字id].角色.数据.帮派数据.编号
        local 帮贡当前 = 帮派数据[帮派编号].成员数据[数字id].帮贡.当前
        local 帮贡 = 玩家数据[数字id].角色.数据.帮贡
        if 帮贡当前~= 玩家数据[数字id].角色.数据.帮贡 then
          玩家数据[数字id].角色.数据.帮贡=帮贡当前
        end

      --   if 帮派缴纳情况[玩家数据[数字id].角色.数据.帮派数据.编号]==nil then
      --     帮派缴纳情况[玩家数据[数字id].角色.数据.帮派数据.编号] = {}
      --     帮派缴纳情况[玩家数据[数字id].角色.数据.帮派数据.编号].缴费人数 = 0
      --     帮派缴纳情况[玩家数据[数字id].角色.数据.帮派数据.编号].缴费总金额 = 0
      --     帮派缴纳情况[玩家数据[数字id].角色.数据.帮派数据.编号].起始时间 = os.time()
      --   end
      self.找到节日=false
      for n=1,5 do
        self.当前时间=os.date("%m月%d日")
        self.节日时间=f函数.读配置(程序目录.."节日列表.ini","节日时间","节日时间"..n)
        self.节日名称=f函数.读配置(程序目录.."节日列表.ini","节日名称","节日名称"..n)
        if self.当前时间==self.节日时间 then
          常规提示(数字id,"今天是#R/"..self.节日名称.."#W/，请前往长安节日礼物使者#Y/（208，152）#W/处领取节日礼物，祝您天天有个好心情！#77")
          self.找到节日=true
          break
        end
      end
      if self.找到节日 then
          节日开关=true
      else
          节日开关=false
      end

      for n=1,#玩家数据[数字id].召唤兽.数据 do
      if 玩家数据[数字id].召唤兽.数据[n].成长>2 then
      玩家数据[数字id].召唤兽.数据[n].成长=2
      常规提示(数字id,"当前版本宠物最高成长不能>2,你的宝宝成长已经被强制修改为2")
      end
      end

      for n=1,#玩家数据[数字id].召唤兽.数据 do
      if 玩家数据[数字id].召唤兽.数据[n].成长>=2 and 玩家数据[数字id].召唤兽.数据[n].种类=="神兽" then
      玩家数据[数字id].召唤兽.数据[n].成长=2
      常规提示(数字id,"当前版本宠物最高成长不能>2,你的宝宝成长已经被强制修改为2")
      end
      end

      if 玩家数据[数字id].角色.数据.是否首席==nil or 玩家数据[数字id].角色.数据.是否首席==0 then
         玩家数据[数字id].角色.数据.是否首席=0
      for i=1,#玩家数据[数字id].角色.数据.称谓 do
        if 玩家数据[数字id].角色.数据.称谓[i] == 玩家数据[数字id].角色.数据.门派.."首席大弟子"  then
        玩家数据[数字id].角色:删除称谓(玩家数据[数字id].角色.数据.数字id,玩家数据[数字id].角色.数据.门派.."首席大弟子")
        end
      end
      end

    if not 比武大会.入场 and not 比武大会.比赛 then
      for i=1,#玩家数据[数字id].角色.数据.称谓 do
        if 玩家数据[数字id].角色.数据.称谓[i] == "白虎代表队成员"  then
        玩家数据[数字id].角色:删除称谓(玩家数据[数字id].角色.数据.数字id,"白虎代表队成员")
        end
        if 玩家数据[数字id].角色.数据.称谓[i] == "青龙代表队成员"  then
        玩家数据[数字id].角色:删除称谓(玩家数据[数字id].角色.数据.数字id,"青龙代表队成员")
        end
      end
    end

 if 玩家数据[数字id]~=nil then
 local 对话=[[#S非凡西游 全新版本,
      #Y剑会天下活动震撼来袭,每周六周日19点开启比如入场19.10正式开打10分钟的分组组队时间
        #G新增活动:世界BOSS,新服福利怪,妖魔鬼怪
          #G修复公告:调整怪物难度,调整阵法几率提高百分之70,修复附魔宝珠无法点化
            #G增加坐骑移动速度,炼妖优化
              #G增加武神坛模式,商城UI全面优化
                #G增加超级合成旗,飞行坐骑功能等等


                                                     #R持续更新··· ]] ---公告修改
--       比武大会活动震撼来袭,每周六周日19点开启比如入场19.10正式开打10分钟的分组组队时间
-- 比武活动中无论输赢都讲获得大量银子,仙玉奖励
-- 胜利的阵营方：90级武器书铁,60级灵饰书铁,高级藏宝图,5-8级宝石
-- 失败的阵营方：70-90级武器书铁,60级灵饰书铁,高级藏宝图,3-8级宝石


        发送数据(玩家数据[数字id].连接id,1501,{名称=玩家数据[数字id].角色.数据.名称,模型=玩家数据[数字id].角色.数据.模型,对话=对话,选项=选项})
     if 玩家数据[数字id].角色.数据.武神坛==nil then
        刷新排行榜(数字id)
     end
      end
      发送数据(玩家数据[数字id].连接id,5505)
    end
  发送数据(玩家数据[数字id].连接id,5506,{玩家数据[数字id].角色:取气血数据()})
    if 玩家数据[数字id]~=nil then
      玩家数据[数字id].角色.数据.战斗开关=nil
      self:进入事件(数字id,玩家数据[数字id].连接id)
    end
    if 玩家数据[数字id].角色.数据.飞行时间限制 ~=nil and 玩家数据[数字id].角色.数据.飞行时间限制<= os.time() then
       玩家数据[数字id].角色.数据.月卡领取=0
     end



end

function 系统处理类:进入游戏检测(数字id)
  for i=1,6 do
    if 玩家数据[数字id].角色.数据.装备[i] ~= nil then
      local 格子 = 玩家数据[数字id].角色.数据.装备[i]
      if 玩家数据[数字id].道具.数据[格子].限时 ~= nil and 玩家数据[数字id].道具.数据[格子].限时 < os.time() then
        玩家数据[数字id].角色:卸下装备(玩家数据[数字id].道具.数据[格子],玩家数据[数字id].道具.数据[格子].分类,"0")
        常规提示(数字id,"#Y你的装备#R"..玩家数据[数字id].道具.数据[格子].名称.."#Y使用时间已到已被系统回收")
        玩家数据[数字id].角色.数据.装备[i] = nil
         玩家数据[数字id].道具.数据[格子] = nil
      end
    end
  end
end

function 系统处理类:进入战斗检测(数字id)
  for i=1,6 do
    if 玩家数据[数字id].角色.数据.装备[i] ~= nil then
      local 格子 = 玩家数据[数字id].角色.数据.装备[i]
      if 玩家数据[数字id].道具.数据[格子].限时 ~= nil and 玩家数据[数字id].道具.数据[格子].限时 < os.time() then
        玩家数据[数字id].角色:卸下装备(玩家数据[数字id].道具.数据[格子],玩家数据[数字id].道具.数据[格子].分类,"0")
        发送数据(玩家数据[数字id].连接id,38,{内容="你的装备#R/"..玩家数据[数字id].道具.数据[格子].名称.."#W/使用时间已到已被系统回收",频道="xt"})
        玩家数据[数字id].角色.数据.装备[i] = nil
        玩家数据[数字id].道具.数据[格子] = nil
      end
    end
  end
end

function 系统处理类:退出战斗检测(数字id)
  for i=1,6 do
    if 玩家数据[数字id].角色.数据.装备[i] ~= nil then
      local 格子 = 玩家数据[数字id].角色.数据.装备[i]
      if 玩家数据[数字id].道具.数据[格子].限时 ~= nil and 玩家数据[数字id].道具.数据[格子].限时 < os.time() then
        玩家数据[数字id].角色:卸下装备(玩家数据[数字id].道具.数据[格子],玩家数据[数字id].道具.数据[格子].分类,"0")
        发送数据(玩家数据[数字id].连接id,38,{内容="你的装备#R/"..玩家数据[数字id].道具.数据[格子].名称.."#W/使用时间已到已被系统回收",频道="xt"})
        玩家数据[数字id].角色.数据.装备[i] = nil
        玩家数据[数字id].道具.数据[格子] = nil
      end
    end
  end
end
function 系统处理类:进入事件(id,连接id)
  -- if 玩家数据[id].账号== "qq815884350"  then
  --    玩家数据[id].管理模式 = true
  -- end
    __gge.print(false,6,时间转换(os.time()).."账号:")
  __gge.print(false,11,玩家数据[id].账号)
  __gge.print(false,6,"ID:")
  __gge.print(false,11,id)
  __gge.print(false,6,"名称:")
  __gge.print(false,11,玩家数据[id].角色.数据.名称)
  __gge.print(false,10," 进入游戏\n")
  if 玩家数据[id].角色.数据.等级>=10 and (玩家数据[id].角色.数据.月卡领取==nil or 玩家数据[id].角色.数据.月卡领取<1) then
    广播消息({内容=format("#Y欢迎#G/%s #S/%s#Y进入游戏..#81",玩家数据[id].角色.数据.名称,id),频道="xt"})
    else
    广播消息({内容=format("#Z月卡玩家#Y【"..玩家数据[id].角色.数据.名称.."】#G进入游戏\n#G开始叱咤风云,笑傲三界的江湖之旅!"),频道="xt"})
  end
   -- 广播消息({内容=format("#Y欢迎#G/%s#Y进入游戏..#81",id),频道="xt"})
  if 玩家数据[id].角色.数据.离线时间~=nil then
    local 离线总时长 = os.time()-玩家数据[id].角色.数据.离线时间
    local 离线经验值 = 0
    local 离线储备 = 0
    if 离线总时长>=300 then  --离线时间5分钟  才会获取离线经验
      if 离线总时长 > 172800 then  --不能超过3天
        离线总时长=172800  --如果超过3天就按照三天算
      end
      离线经验值 = math.floor(离线总时长/300*玩家数据[id].角色.数据.等级*3.5*10) ---每5分钟计算一次经验 按照你等级*3.5*1.5给你经验 你可以自己设定  比方说挂野的
      离线储备 = math.floor(离线总时长/300*玩家数据[id].角色.数据.等级*3.5*10)
      ----离线经验
      if 玩家数据[id].角色:取任务(409)~=0 then
        local 任务id=玩家数据[id].角色:取任务(409)
        任务数据[任务id].离线经验=任务数据[任务id].离线经验 + 离线经验值
        if 任务数据[任务id].离线经验 >= math.floor(172800/300*玩家数据[id].角色.数据.等级*3.5*10) then  --如果离线经验超过你所在等级3天存储的时间就不会再获取了
          任务数据[任务id].离线经验 = math.floor(172800/300*玩家数据[id].角色.数据.等级*3.5*10)
          常规提示(id,"#Y/当前离线经验已满！最多只能获取#R/"..任务数据[任务id].离线经验.."#Y/点离线经验！")
        else
          常规提示(id,"#Y/获取了#R/"..离线经验值.."#Y/点离线经验！")
        end
      else
        if 离线经验值>0 then
           任务处理类:添加离线经验(id,离线经验值)
          常规提示(id,"#Y/获取了#R/"..离线经验值.."#Y/点离线经验！")
        end
      end
      ----离线储备
      if 玩家数据[id].角色:取任务(410)~=0 then
        local 任务id=玩家数据[id].角色:取任务(410)
        任务数据[任务id].离线储备=任务数据[任务id].离线储备 + 离线储备
        if 任务数据[任务id].离线储备 >= math.floor(172800/300*玩家数据[id].角色.数据.等级*3.5*10) then  --如果离线储备超过你所在等级3天存储的时间就不会再获取了
          任务数据[任务id].离线储备 = math.floor(172800/300*玩家数据[id].角色.数据.等级*3.5*10)
          常规提示(id,"#Y/当前离线储备已满！最多只能获取#R/"..任务数据[任务id].离线储备.."#Y/点离线储备！")
        else
          常规提示(id,"#Y/获取了#R/"..离线储备.."#Y/点离线储备！")
        end
      else
        if 离线储备>0 then
           任务处理类:添加离线储备(id,离线储备)
          常规提示(id,"#Y/获取了#R/"..离线储备.."#Y/点离线储备！")
        end
      end
    end
    玩家数据[id].角色.数据.离线时间=nil
  end
  for n=1,#玩家数据[id].角色.数据.好友数据.好友 do
    local 好友id=玩家数据[id].角色.数据.好友数据.好友[n].id
    if 玩家数据[好友id]~=nil and 玩家数据[id].角色.数据.好友数据.好友[n].好友度~=nil and 玩家数据[id].角色.数据.好友数据.好友[n].好友度>=10 then
      for i=1,#玩家数据[好友id].角色.数据.好友数据.好友 do
        if 玩家数据[好友id].角色.数据.好友数据.好友[i].id==id and 玩家数据[好友id].角色.数据.好友数据.好友[i].好友度~=nil and 玩家数据[好友id].角色.数据.好友数据.好友[i].好友度>=10 then
          发送数据(玩家数据[好友id].连接id,38,{内容="#W你的好友#Y"..玩家数据[id].角色.数据.名称.."#W进入了游戏",频道="xt"})
        end
      end
    end
  end
  --检测坐骑属性
  -- table.print([2])
  if not 判断是否为空表(玩家数据[id].助战.数据) then
    for k,v in pairs(玩家数据[id].助战.数据) do
      local 检测是否成功 = true
      for i,n in pairs(v) do
        if i=="体质" and n<0 then
          检测是否成功 = false
        elseif i=="魔力" and n<0 then
          检测是否成功 = false
        elseif i=="力量" and n<0 then
          检测是否成功 = false
        elseif i=="耐力" and n<0 then
          检测是否成功 = false
        elseif i=="敏捷" and n<0 then
          检测是否成功 = false
        end
      end
      if not 检测是否成功 then
        玩家数据[id].助战.数据[k].体质=1
        玩家数据[id].助战.数据[k].魔力=1
        玩家数据[id].助战.数据[k].力量=1
        玩家数据[id].助战.数据[k].耐力=1
        玩家数据[id].助战.数据[k].敏捷=1
        玩家数据[id].助战:刷新信息(k,1)
      end
    end
  end
  if not 判断是否为空表(玩家数据[id].角色.数据.坐骑列表) then
    for k,v in pairs(玩家数据[id].角色.数据.坐骑列表) do
      local 检测是否成功 = true
      for i,n in pairs(v) do
        if i=="体质" and n<0 then
          检测是否成功=false
        elseif  i=="魔力" and n<0 then
          检测是否成功=false
        elseif  i=="力量" and n<0 then
          检测是否成功=false
        elseif  i=="耐力" and n<0 then
          检测是否成功=false
        elseif  i=="敏捷" and n<0 then
          检测是否成功=false
        end
      end
      if not 检测是否成功 then
        玩家数据[id].角色:坐骑洗点(k)
      end
    end
  end
end

function 系统处理类:账号验证(id,序号,内容)
 -- table.print(内容)
  if f函数.读配置(程序目录..[[data\]]..内容.账号..[[\账号信息.txt]],"账号配置","封禁")=="1" then  --账号是否异常
    发送数据(id,7,"#R该账号已经被禁止登录游戏")
    print(内容.账号.."禁止登陆游戏")
    return false
  elseif f函数.文件是否存在([[data/]]..内容.账号)==false then  --未创建存档
    发送数据(id,7,"#Y该账户未被注册！")
    print(内容.账号.."该账户未被注册！")
    return false
  elseif 序号 == 1.2 and f函数.读配置(程序目录..[[data\]]..内容.账号..[[\账号信息.txt]],"账号配置","管理")~="1" then
    发送数据(id,7,"#Y该账户没有管理权限！")
    print(内容.账号.."该账户没有管理权限")
    return false
  else
    local 密码=f函数.读配置(程序目录..[[data\]]..内容.账号..[[\账号信息.txt]],"账号配置","密码")
    local 分区=tonumber(f函数.读配置(程序目录..[[data\]]..内容.账号..[[\账号信息.txt]],"账号配置","分区"))

    if tonumber(分区)==nil then
      f函数.写配置(程序目录..[[data\]]..内容.账号..[[\账号信息.txt]],"账号配置","分区",math.floor(内容.分区))
      分区=math.floor(内容.分区)
    end

    if 密码~=内容.密码 then
      发送数据(id,7,"#Y您输入的密码不正确！")
      print(内容.账号.."您输入的密码不正确")
      return false
    elseif tonumber(分区) and 分区 ~= tonumber(内容.分区) then
      发送数据(id,7,"#Y该账号已经绑定:"..分区.."服,如若想进入本服游戏，需重新申请账号！")
      return false
    end
    if f函数.读配置(程序目录..[[data\]]..内容.账号..[[\账号信息.txt]],"账号配置","机器码")=="" or f函数.读配置(程序目录..[[data\]]..内容.账号..[[\账号信息.txt]],"账号配置","机器码")=="空" then
      f函数.写配置(程序目录..[[data\]]..内容.账号..[[\账号信息.txt]],"账号配置","机器码",内容.硬盘)
    end
    if 序号 ~= 1.1 and 序号 ~= 1.2 then
      self:取角色选择信息(id,内容.账号)
    elseif 序号 == 1.2 then
      发送数据(id,1.1)
    end
    return true
  end
end

function 系统处理类:封号处理(id,序号,内容)
       print("有人被疯了")
      --f函数.写配置(程序目录 .."ip封禁.ini","ip",__C客户信息[id].IP,1)

       -- 发送数据(id,7,"#Y还TM想盗刷老摩托给爷滚！")
     end

function 系统处理类:创建账号(id,序号,内容)
  ----------------摩托修改注册账号限制--------------
 -- f函数.写配置(程序目录..[[各类情况查看\]]..[[\检测注册数量.txt]],"账号配置",内容.ip,nil)
   -- f函数.读配置(程序目录..[[各类情况查看\]]..[[\检测注册数量.txt]],"账号配置",内容.ip)+0
-- if f函数.读配置(程序目录..[[各类情况查看\]]..[[\检测注册数量.txt]],"账号配置",内容.ip) ~= "0" and f函数.读配置(程序目录..[[各类情况查看\]]..[[\检测注册数量.txt]],"账号配置",内容.ip) ~= "1"  and f函数.读配置(程序目录..[[各类情况查看\]]..[[\检测注册数量.txt]],"账号配置",内容.ip) ~= "2" and f函数.读配置(程序目录..[[各类情况查看\]]..[[\检测注册数量.txt]],"账号配置",内容.ip) ~= "3" then
--    -- f函数.写配置(程序目录..[[各类情况查看\]]..[[\检测注册数量.txt]],"账号配置",内容.ip,0)
--   f函数.写配置(程序目录..[[各类情况查看\]]..[[\检测注册数量.txt]],"账号配置",内容.ip,0)
-- end
--   if f函数.读配置(程序目录..[[各类情况查看\]]..[[\检测注册数量.txt]],"账号配置",内容.ip) >= "9999" then
--   发送数据(id,7,"#Y此电脑注册数量过多，无法再次创建更多账号，如有发现盗刷予以封号处理！")
-- return
-- end
  -- local 注册数量 = f函数.读配置(程序目录..[[各类情况查看\]]..[[\检测注册数量.txt]],"账号配置",内容.ip)+0
  --  注册数量=注册数量+1
  --  f函数.写配置(程序目录..[[各类情况查看\]]..[[\检测注册数量.txt]],"账号配置",内容.ip,注册数量)


  if f函数.读配置(程序目录..[[data\]]..内容.账号..[[\账号信息.txt]],"账号配置","封禁")=="1" then  --账号是否异常
    发送数据(id,7,"#R该账号已经被禁止登录游戏")
    return
  elseif f函数.文件是否存在([[data/]]..内容.账号)==false then  --未创建存档
    os.execute("md "..[[data\]]..内容.账号)
    local file =io.open([[data\]]..内容.账号..[[\信息.txt]],"w")
    file:write([[do local ret={} return ret end]])
    file:close()
    local file =io.open([[data\]]..内容.账号..[[\账号信息.txt]],"w")
    f函数.写配置(程序目录..[[data\]]..内容.账号..[[\账号信息.txt]],"账号配置","密码",内容.密码)
    f函数.写配置(程序目录..[[data\]]..内容.账号..[[\账号信息.txt]],"账号配置","仙玉","0")
    f函数.写配置(程序目录..[[data\]]..内容.账号..[[\账号信息.txt]],"账号配置","点数","0")
    f函数.写配置(程序目录..[[data\]]..内容.账号..[[\账号信息.txt]],"账号配置","管理","0")
    f函数.写配置(程序目录..[[data\]]..内容.账号..[[\账号信息.txt]],"账号配置","安全码","0")
    f函数.写配置(程序目录..[[data\]]..内容.账号..[[\账号信息.txt]],"账号配置","创建时间",时间转换(os.time()))
    f函数.写配置(程序目录..[[data\]]..内容.账号..[[\账号信息.txt]],"账号配置","创建ip",内容.ip)
    f函数.写配置(程序目录..[[data\]]..内容.账号..[[\账号信息.txt]],"账号配置","银子","0")
    f函数.写配置(程序目录..[[data\]]..内容.账号..[[\账号信息.txt]],"账号配置","储备","0")
    f函数.写配置(程序目录..[[data\]]..内容.账号..[[\账号信息.txt]],"账号配置","推广礼包","0")
    f函数.写配置(程序目录..[[data\]]..内容.账号..[[\账号信息.txt]],"账号配置","测试礼包","0")
    f函数.写配置(程序目录..[[data\]]..内容.账号..[[\账号信息.txt]],"账号配置","机器码",内容.硬盘)
    写出文件([[data/]]..内容.账号..[[/消费记录.txt]],"日志创建")
    发送数据(id,7,"#Y恭喜你，游戏账号注册成功！！！")
    发送数据(id,73)
  else
     发送数据(id,7,"#Y该账号已被注册！")
    return
  end
-- --  发送数据(id,7,"#Y注册暂时关闭,需要注册找群主")
 end

function 系统处理类:取角色选择信息(id,账号)
  self.临时文件=读入文件([[data/]]..账号..[[/信息.txt]])
  self.写入信息=table.loadstring(self.临时文件)
  self.发送数据={}
  for n=1,#self.写入信息 do
    local 武器数据={名称="",级别限制=0,子类=0}
    local 锦衣数据
    local 光环数据
    local 足迹数据
    self.读取文件=读入文件([[data/]]..账号..[[/]]..self.写入信息[n]..[[/角色.txt]])
    self.还原数据=table.loadstring(self.读取文件)
    if self.还原数据.装备[3]~=nil or self.还原数据.锦衣~=nil then
      local 临时文件=读入文件([[data/]]..账号..[[/]]..self.写入信息[n]..[[/道具.txt]])
      local 临时道具=table.loadstring(临时文件)
      if self.还原数据.装备[3]~=nil then
        武器数据=临时道具[self.还原数据.装备[3]]
      end
      -- if self.还原数据.锦衣~=nil then
      --     if self.还原数据.锦衣[1] ~= nil then
      --       锦衣数据 = 临时道具[self.还原数据.锦衣[1]]
      --     end
      --     if self.还原数据.锦衣[2] ~= nil then
      --       光环数据 = 临时道具[self.还原数据.锦衣[2]]
      --     end
      --     if self.还原数据.锦衣[4] ~= nil then
      --       足迹数据 = 临时道具[self.还原数据.锦衣[4]]
      --     end
      -- end
    end
    self.发送数据[n]={锦衣数据=锦衣数据,光环数据=光环数据,足迹数据=足迹数据,名称=self.还原数据.名称,等级=self.还原数据.等级,染色方案=self.还原数据.染色方案,染色组=self.还原数据.染色组,造型=self.还原数据.造型,武器数据=武器数据,门派=self.还原数据.门派,id=self.还原数据.数字id}
  end
  发送数据(id,4,self.发送数据)
  self.读取文件=nil
  self.还原数据=nil
  self.临时文件=nil
  self.写入信息=nil
end

function 系统处理类:设置传说物品(id)
  --修炼
  local 任务id=玩家数据[id].角色:取任务(13)
  if 任务id~=0 and 任务数据[任务id]~=nil and 任务数据[任务id].传说==nil then
    任务数据[任务id].传说=1
    if 任务数据[任务id].等级==nil then
      玩家数据[id].道具:给予道具(id,任务数据[任务id].物品,1,30)
      常规提示(id,"#Y你获得了传说中的#R"..任务数据[任务id].物品)
      发送数据(玩家数据[id].连接id,38,{内容="你得到了#R/"..任务数据[任务id].物品})
    else
      玩家数据[id].道具:取随机装备1(id,任务数据[任务id].等级,任务数据[任务id].物品)
      常规提示(id,"#Y你获得了传说中的#R"..任务数据[任务id].物品)
      发送数据(玩家数据[id].连接id,38,{内容="你得到了#R/"..任务数据[任务id].物品})
    end
  end
end

function 系统处理类:生死劫处理(id,数据)
for i=1,#队伍数据[玩家数据[id].队伍].成员数据 do
  if 生死劫数据.次数==nil then
      生死劫数据.次数={}
  end
  if 生死劫数据.次数[队伍数据[玩家数据[id].队伍].成员数据[i]]==nil then
      生死劫数据.次数[队伍数据[玩家数据[id].队伍].成员数据[i]]=0
  end
  if 生死劫数据[队伍数据[玩家数据[id].队伍].成员数据[i]]==nil then
    生死劫数据[队伍数据[玩家数据[id].队伍].成员数据[i]]=1
  elseif 生死劫数据[队伍数据[玩家数据[id].队伍].成员数据[i]]>9 then
    生死劫数据[队伍数据[玩家数据[id].队伍].成员数据[i]]=1
  end
  if 生死劫数据.次数[队伍数据[玩家数据[id].队伍].成员数据[i]]>=3 then
      添加最后对话(队伍数据[玩家数据[id].队伍].成员数据[i],"你本日可挑战次数已达上限，每日仅可以挑战3次生死劫，请明日再来吧。")
      return
  end
  if 数据.序列=="止戈" and 生死劫数据[队伍数据[玩家数据[id].队伍].成员数据[i]]~=nil and 生死劫数据[队伍数据[玩家数据[id].队伍].成员数据[i]]~=1 then
    常规提示(队伍数据[玩家数据[id].队伍].成员数据[i],"#Y你已经挑战过该层！")
    return
  elseif 数据.序列=="清心" and 生死劫数据[队伍数据[玩家数据[id].队伍].成员数据[i]]~=nil and 生死劫数据[队伍数据[玩家数据[id].队伍].成员数据[i]]~=2 then
    常规提示(队伍数据[玩家数据[id].队伍].成员数据[i],"#Y你已经挑战过该层！")
    return
  elseif 数据.序列=="雷霆" and 生死劫数据[队伍数据[玩家数据[id].队伍].成员数据[i]]~=nil and 生死劫数据[队伍数据[玩家数据[id].队伍].成员数据[i]]~=3 then
    常规提示(队伍数据[玩家数据[id].队伍].成员数据[i],"#Y你已经挑战过该层！")
    return
  elseif 数据.序列=="惜花" and 生死劫数据[队伍数据[玩家数据[id].队伍].成员数据[i]]~=nil and 生死劫数据[队伍数据[玩家数据[id].队伍].成员数据[i]]~=4 then
    常规提示(队伍数据[玩家数据[id].队伍].成员数据[i],"#Y你已经挑战过该层！")
    return
  elseif 数据.序列=="忘情" and 生死劫数据[队伍数据[玩家数据[id].队伍].成员数据[i]]~=nil and 生死劫数据[队伍数据[玩家数据[id].队伍].成员数据[i]]~=5 then
    常规提示(队伍数据[玩家数据[id].队伍].成员数据[i],"#Y你已经挑战过该层！")
    return
  elseif 数据.序列=="卧龙" and 生死劫数据[队伍数据[玩家数据[id].队伍].成员数据[i]]~=nil and 生死劫数据[队伍数据[玩家数据[id].队伍].成员数据[i]]~=6 then
    常规提示(队伍数据[玩家数据[id].队伍].成员数据[i],"#Y你已经挑战过该层！")
    return
  elseif 数据.序列=="天象" and 生死劫数据[队伍数据[玩家数据[id].队伍].成员数据[i]]~=nil and 生死劫数据[队伍数据[玩家数据[id].队伍].成员数据[i]]~=7 then
    常规提示(队伍数据[玩家数据[id].队伍].成员数据[i],"#Y你已经挑战过该层！")
    return
  elseif 数据.序列=="轮回" and 生死劫数据[队伍数据[玩家数据[id].队伍].成员数据[i]]~=nil and 生死劫数据[队伍数据[玩家数据[id].队伍].成员数据[i]]~=8 then
    常规提示(队伍数据[玩家数据[id].队伍].成员数据[i],"#Y你已经挑战过该层！")
    return
  elseif 数据.序列=="娑罗" and 生死劫数据[队伍数据[玩家数据[id].队伍].成员数据[i]]~=nil and 生死劫数据[队伍数据[玩家数据[id].队伍].成员数据[i]]~=9 then
    常规提示(队伍数据[玩家数据[id].队伍].成员数据[i],"#Y你已经挑战过该层！")
    return
  end
end
  战斗准备类:创建战斗(id,100055,0)
end


function 系统处理类:领取活跃度奖励(id,数据)
  if 活跃数据[id]==nil then
    常规提示(id,"#Y当前活跃系统出错，无法领取")
    return
   elseif 活动次数查询(id,"活跃次数")==false then
    return
  end
  local 等级=玩家数据[id].角色.数据.等级
  local 经验=等级*600
  if 数据.序列==1 and 活跃数据[id].活跃度>=150 and 活跃数据[id].领取100活跃==false then
    添加活动次数(id,"活跃次数")
    玩家数据[id].角色:添加银子(经验,"150活跃奖励")
    玩家数据[id].角色:添加经验(经验,"150活跃奖励",1)
    添加仙玉(10,玩家数据[id].账号,id,"150活跃奖励")
    活跃数据[id].领取100活跃=true
    常规提示(id,"#Y领取150活跃奖励成功\n获得#R"..经验.."#Y点经验、#R"..经验.."#Y银子")
  elseif 活跃数据[id].活跃度>=200 and 活跃数据[id].领取200活跃==false then
    经验=等级*700
    添加活动次数(id,"活跃次数")
    玩家数据[id].角色:添加银子(经验,"200活跃奖励")
    玩家数据[id].角色:添加经验(经验,"200活跃奖励",1)
    添加仙玉(20,玩家数据[id].账号,id,"200活跃奖励")
    活跃数据[id].领取200活跃=true
    常规提示(id,"#Y领取200活跃奖励成功\n获得#R"..经验.."#Y点经验、#R"..经验.."#Y银子")
  elseif 数据.序列==3 and 活跃数据[id].活跃度>=250 and 活跃数据[id].领取300活跃==false then
    经验=等级*800
    添加活动次数(id,"活跃次数")
    玩家数据[id].角色:添加银子(经验,"250活跃奖励")
    玩家数据[id].角色:添加经验(经验,"250活跃奖励",1)
    添加仙玉(30,玩家数据[id].账号,id,"250活跃奖励")
    活跃数据[id].领取300活跃=true
    常规提示(id,"#Y领取250活跃奖励成功\n获得#R"..经验.."#Y点经验、#R"..经验.."#Y银子")
  elseif 活跃数据[id].活跃度>=300 and 活跃数据[id].领取400活跃==false then
    经验=等级*900
    添加活动次数(id,"活跃次数")
    玩家数据[id].角色:添加银子(经验,"300活跃奖励")
    玩家数据[id].角色:添加经验(经验,"300活跃奖励",1)
     添加仙玉(40,玩家数据[id].账号,id,"300活跃奖励")
    活跃数据[id].领取400活跃=true
    常规提示(id,"#Y领取300活跃奖励成功\n获得#R"..经验.."#Y点经验、#R"..经验.."#Y银子")
  elseif 数据.序列==5 and 活跃数据[id].活跃度>=350 and 活跃数据[id].领取500活跃==false then
    经验=等级*1000
    添加活动次数(id,"活跃次数")
    玩家数据[id].角色:添加银子(经验,"350活跃奖励")
    玩家数据[id].角色:添加经验(经验,"350活跃奖励",1)
    添加仙玉(50,玩家数据[id].账号,id,"350活跃奖励")
    local 奖励数据=玩家数据[id].道具:给予书铁(id,{10,11})
    local 名称="100-110级书铁"
    常规提示(id,"#Y你得到了#R"..名称)
    活跃数据[id].领取500活跃=true
    if 取随机数(1,1000)<=1 then
      local 模型=取随机神兽[取随机数(1,#取随机神兽)]
      玩家数据[id].召唤兽:添加召唤兽(模型,nil,nil,true,0,nil)
      常规提示(id,"#Y恭喜你，获得神兽"..模型)
      发送公告("#G玩家#R"..玩家数据[id].角色.数据.名称.."#G在完成每日活跃日常中，领取350活跃奖励，获得了#R神兽"..模型.."#G一只，大家一起来鄙视他吧！！！")--.."#"..取随机数(1,110))
    end
    常规提示(id,"#Y领取350活跃奖励成功\n获得#R"..经验.."#Y点经验、#R"..经验.."#Y银子")
  else
    常规提示(id,"#Y当前活跃度不够或已领取该奖励")
    return
  end
end

function 系统处理类:获取签到数据(id)
  self.当月天数 = os.date("%d",os.time({year=os.date("%Y"),month=os.date("%m")+1,day=0})) --当月天数
  self.月份 =tonumber(os.date("%m", os.time()))
  self.几号 =tonumber(os.date("%d", os.time()))
  if 签到数据[id] ~= nil then
    if 签到数据[id][self.月份] == nil then
      签到数据[id]={[self.月份]={}}
      签到数据[id][self.月份]={
      当月天数=self.当月天数,
      几号=self.几号,
      月份=self.月份,
      累计签到=0
      }
      for i=1,self.当月天数 do
        if 签到数据[id][self.月份][i] == nil then
          签到数据[id][self.月份][i] =false
        end
      end
    end
  else
    签到数据[id]={[self.月份]={}}
    签到数据[id][self.月份]={
      当月天数=self.当月天数,
      几号=self.几号,
      月份=self.月份,
      累计签到=0
    }
    for i=1,self.当月天数 do
      if 签到数据[id][self.月份][i] == nil then
        签到数据[id][self.月份][i] =false
      end
    end
  end
  if 签到数据[id][self.月份].几号 ~= self.几号 then
    签到数据[id][self.月份].几号 = self.几号
  end
  发送数据(玩家数据[id].连接id,90,签到数据[id][self.月份])
end
function 系统处理类:自动抓鬼处理(id)
  if 玩家数据[id].队伍==0 or 玩家数据[id].队长==false then
      常规提示(id,"#Y/该任务必须组队完成且由队长领取")
      return
    elseif 取队伍最低等级(玩家数据[id].队伍,25) then
      常规提示(id,"#Y/等级小于25级的玩家无法领取此任务")
      return
    elseif 活动次数查询(id,"抓鬼任务")==false then
      玩家数据[id].角色.数据.自动抓鬼=false
      常规提示(id,"#Y/已完成今日所有抓鬼任务")
      发送数据(玩家数据[id].连接id,154,{开关=玩家数据[id].角色.数据.自动抓鬼})
    return
    elseif not 玩家数据[id].角色.数据.自动抓鬼 then
      -- 常规提示(id,"#Y/数据异常请重试")
      发送数据(玩家数据[id].连接id,154,{开关=玩家数据[id].角色.数据.自动抓鬼})
    return
    elseif 自动抓鬼数据[id]==nil or 自动抓鬼数据[id].天数<=0 then
      玩家数据[id].角色.数据.自动抓鬼=false
      常规提示(id,"#Y/您的自动抓鬼已到期,请联系GM续费")
      发送数据(玩家数据[id].连接id,154,{开关=玩家数据[id].角色.数据.自动抓鬼})
    return
  end

  if 玩家数据[id].角色:取任务(8)~=0 then
      if 玩家数据[id].角色.数据.地图数据.编号==任务数据[玩家数据[id].角色:取任务(8)].地图编号 then
        if 任务数据[玩家数据[id].角色:取任务(8)].战斗~=nil then
          常规提示(id,"#Y/对方正在战斗中")
          return
        end
        if 玩家数据[id].队伍==nil then
          常规提示(数字id,"#Y/请先组队！")
          return
        end
        战斗准备类:创建战斗(id+0,100008,玩家数据[id].角色:取任务(8))
        任务数据[玩家数据[id].角色:取任务(8)].战斗=true
        玩家数据[id].地图单位=nil
      else
      地图处理类:跳转地图(id,任务数据[玩家数据[id].角色:取任务(8)].地图编号,任务数据[玩家数据[id].角色:取任务(8)].x,任务数据[玩家数据[id].角色:取任务(8)].y)
      玩家数据[id].角色:刷新任务跟踪()
      end
  else

  任务处理类:添加抓鬼任务(id)

  end

end
function 系统处理类:签到处理(id,数据)
  local 累计次数 = 签到数据[id][数据.月份].累计签到
  if 活跃数据[id].活跃度<100 then
    常规提示(id,"#Y签到需每日的活跃度达到100以上，少侠的活跃度不够，无法签到!")
    return
  end
  if 玩家数据[id].角色.数据.等级<30 then
    常规提示(id,"#Y签到需等级达到30级以上，少侠的等级不够，无法签到!")
    return
  end
  if 签到数据[id][数据.月份][数据.几号] == true then
    常规提示(id,"#Y少侠今日已经签到过了!")
    return
  else
    签到数据[id][数据.月份][数据.几号] = true
    签到数据[id][数据.月份].累计签到 = 累计次数 + 1
    累计次数 = 累计次数 + 1
    self:签到奖励处理(id,累计次数)
    发送数据(玩家数据[id].连接id,90.1,签到数据[id][数据.月份])
  end
end

function 系统处理类:签到奖励处理(id,累计)
  self.经验奖励=math.floor(玩家数据[id].角色.数据.等级*500*累计)
  玩家数据[id].角色:添加经验(self.经验奖励,"签到奖励",1)
  玩家数据[id].角色:添加银子(self.经验奖励,"签到奖励")
  常规提示(id,"#Y恭喜你！签到成功获得大量经验银子奖励！")
  if 累计 == 7 then
    玩家数据[id].道具:给予道具(id,"修炼果",1)
    玩家数据[id].道具:给予道具(id,"九转金丹",1,100)
    玩家数据[id].角色:添加经验(self.经验奖励,"签到奖励",1)
    玩家数据[id].角色:添加银子(self.经验奖励,"签到奖励")
    添加仙玉(100,玩家数据[id].账号,id,"签到奖励")
    常规提示(id,"#Y恭喜你！签到成功获得大量经验银子\n100仙玉\n1个修炼果\n1个九转金丹")
  elseif 累计 == 14 then
    玩家数据[id].道具:给予道具(id,"高级魔兽要诀")
    玩家数据[id].道具:给予道具(id,"高级召唤兽内丹")
    玩家数据[id].道具:给予道具(id,"召唤兽内丹")
    玩家数据[id].角色:添加经验(self.经验奖励,"签到奖励",1)
    玩家数据[id].角色:添加银子(self.经验奖励,"签到奖励")
    添加仙玉(300,玩家数据[id].账号,id,"签到奖励")
    常规提示(id,"#Y恭喜你！签到成功获得大量经验银子\n300仙玉\n高级魔兽要诀\n高级召唤兽内丹")
  elseif 累计 == 21 then
    玩家数据[id].角色:添加经验(self.经验奖励,"签到奖励",1)
    玩家数据[id].角色:添加银子(self.经验奖励,"签到奖励")
    添加仙玉(500,玩家数据[id].账号,id,"签到奖励")
    常规提示(id,"#Y恭喜你！签到成功获得大量经验银子\n500仙玉")
  elseif 累计 == 28 then
    玩家数据[id].角色:添加经验(self.经验奖励,"签到奖励",1)
    玩家数据[id].角色:添加银子(self.经验奖励,"签到奖励")
    添加仙玉(1000,玩家数据[id].账号,id,"签到奖励")
    常规提示(id,"#Y恭喜你！签到成功获得大量经验银子\n1000仙玉")
  end
end

function 系统处理类:获取点卡数据(id)
  local 点卡=f函数.读配置(程序目录..[[data\]]..玩家数据[id].账号..[[\账号信息.txt]],"账号配置","点卡")
  if 点卡 == nil or 点卡 == "" or 点卡 == "空" then
    f函数.写配置(程序目录..[[data\]]..玩家数据[id].账号..[[\账号信息.txt]],"账号配置","点卡",0)
    点卡 = 0
  end
  发送数据(玩家数据[id].连接id,92,{兑换比例=兑换比例,点卡=点卡})
end

function 系统处理类:获取VIP数据(id)
  if VIP数据[id] ~=nil then
    if VIP数据[id].VIP经验 == nil then
      VIP数据[id].VIP经验 = 0
      VIP数据[id].VIP1状态 = false
      VIP数据[id].VIP2状态 = false
      VIP数据[id].VIP3状态 = false
      VIP数据[id].VIP4状态 = false
      VIP数据[id].VIP5状态 = false
    end
  else
    VIP数据[id] = {}
    VIP数据[id].VIP经验 = 0
    VIP数据[id].VIP1状态 = false
    VIP数据[id].VIP2状态 = false
    VIP数据[id].VIP3状态 = false
    VIP数据[id].VIP4状态 = false
    VIP数据[id].VIP5状态 = false
  end
  local 点卡=f函数.读配置(程序目录..[[data\]]..玩家数据[id].账号..[[\账号信息.txt]],"账号配置","点卡")
  if 点卡 == nil or 点卡 == "" or 点卡 == "空" then
    f函数.写配置(程序目录..[[data\]]..玩家数据[id].账号..[[\账号信息.txt]],"账号配置","点卡",0)
    点卡 = 0
  end
  发送数据(玩家数据[id].连接id,91,{充值比例=充值比例,VIP数据=VIP数据[id],兑换比例=兑换比例,点卡=点卡})
end

function 系统处理类:VIP领取奖励处理(id,数据)
  if 玩家数据[id].角色:取道具格子2()<=12 then
    常规提示(id,"#Y请先清理下背包再来领取奖励")
    return
  end
  local VIP1经验=充值比例*188
  local VIP2经验=充值比例*388
  local VIP3经验=充值比例*888
  local VIP4经验=充值比例*2888
  local VIP5经验=充值比例*4888
  if 数据.序列=="VIP1" then
    if VIP数据[id].VIP经验>=VIP1经验 and VIP数据[id].VIP1状态==false then
      玩家数据[id].道具:给予道具(id,"30级装备礼包")
      玩家数据[id].角色:添加银子(100000,"VIP1礼包")
      玩家数据[id].道具:给予道具(id,"九转金丹",5,500)
      添加仙玉(100,玩家数据[id].账号,id,"VIP1礼包")
      玩家数据[id].角色:添加称谓(id,"VIP1")
      VIP数据[id].VIP1状态=true
    else
      if VIP数据[id].VIP1状态 then
        常规提示(id,"#Y您已经领取过VIP1礼包，无法重复领取！")
        return
      else
        常规提示(id,"#Y领取VIP1礼包所需经验：#R"..VIP1经验.."#Y，您当前经验为：#R"..VIP数据[id].VIP经验)
        return
      end
    end
  elseif 数据.序列=="VIP2" then
    if VIP数据[id].VIP经验>=VIP2经验 and VIP数据[id].VIP2状态==false then
      玩家数据[id].道具:给予道具(id,"40级装备礼包")
      玩家数据[id].角色:添加银子(100000,"VIP2礼包")
      玩家数据[id].道具:给予道具(id,"九转金丹",10,500)
      --玩家数据[id].道具:给予道具(id,"5级宝石礼包")
      --礼包奖励类:全套灵饰(id,80,"无级别限制","专用")
      --添加仙玉(50000,玩家数据[id].账号,id,"VIP2礼包")
      玩家数据[id].角色:添加称谓(id,"VIP2")
      VIP数据[id].VIP2状态=true
    else
      if VIP数据[id].VIP2状态 then
        常规提示(id,"#Y您已经领取过VIP2礼包，无法重复领取！")
        return
      else
        常规提示(id,"#Y领取VIP2礼包所需经验：#R"..VIP2经验.."#Y，您当前经验为：#R"..VIP数据[id].VIP经验)
        return
      end
    end
  elseif 数据.序列=="VIP3" then
    if VIP数据[id].VIP经验>=VIP3经验 and VIP数据[id].VIP3状态==false then
      玩家数据[id].道具:给予道具(id,"50级装备礼包")
      玩家数据[id].角色:添加银子(100000,"VIP3礼包")
      玩家数据[id].道具:给予道具(id,"九转金丹",15,500)
      --玩家数据[id].道具:给予道具(id,"7级宝石礼包")
      --礼包奖励类:全套灵饰(id,100,"无级别限制","专用")
      --添加仙玉(100000,玩家数据[id].账号,id,"VIP3礼包")
      玩家数据[id].角色:添加称谓(id,"VIP3")
      VIP数据[id].VIP3状态=true
    else
      if VIP数据[id].VIP3状态 then
        常规提示(id,"#Y您已经领取过VIP3礼包，无法重复领取！")
        return
      else
        常规提示(id,"#Y领取VIP3礼包所需经验：#R"..VIP3经验.."#Y，您当前经验为：#R"..VIP数据[id].VIP经验)
        return
      end
    end
  elseif 数据.序列=="VIP4" then
    if VIP数据[id].VIP经验>=VIP4经验 and VIP数据[id].VIP4状态==false then
      玩家数据[id].道具:给予道具(id,"60级装备礼包")
      玩家数据[id].角色:添加银子(100000,"VIP4礼包")
      玩家数据[id].道具:给予道具(id,"九转金丹",20,500)
      --玩家数据[id].道具:给予道具(id,"10级宝石礼包")
      --礼包奖励类:全套灵饰(id,120,"无级别限制","专用")
      --添加仙玉(200000,玩家数据[id].账号,id,"VIP4礼包")
      玩家数据[id].角色:添加称谓(id,"VP4")
      VIP数据[id].VIP4状态=true
    else
      if VIP数据[id].VIP4状态 then
        常规提示(id,"#Y您已经领取过VIP4礼包，无法重复领取！")
        return
      else
        常规提示(id,"#Y领取VIP4礼包所需经验：#R"..VIP4经验.."#Y，您当前经验为：#R"..VIP数据[id].VIP经验)
        return
      end
    end
  elseif 数据.序列=="VIP5" then
    if VIP数据[id].VIP经验>=VIP5经验 and VIP数据[id].VIP5状态==false then
      玩家数据[id].道具:给予道具(id,"70级装备礼包")
      玩家数据[id].角色:添加银子(100000,"VIP5礼包")
      玩家数据[id].道具:给予道具(id,"九转金丹",25,500)
      --礼包奖励类:全套灵饰(id,120,"无级别限制","专用")
      --添加仙玉(500000,玩家数据[id].账号,id,"VIP5礼包")
      玩家数据[id].角色:添加称谓(id,"VP5")
      VIP数据[id].VIP5状态=true
    else
      if VIP数据[id].VIP5状态 then
        常规提示(id,"#Y您已经领取过VIP5礼包，无法重复领取！")
        return
      else
        常规提示(id,"#Y领取VIP5礼包所需经验：#R"..VIP5经验.."#Y，您当前经验为：#R"..VIP数据[id].VIP经验)
        return
      end
    end
  end
end

function 系统处理类:显示(x,y) end
return 系统处理类