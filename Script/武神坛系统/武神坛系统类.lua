-- @Author: baidwwy
-- @Date:   2023-04-26 18:53:06
-- @Last Modified by:   baidwwy
-- @Last Modified time: 2023-12-31 10:38:26

local 武神坛系统类 = class()

function 武神坛系统类:初始化(id)
end


function 武神坛系统类:创建武神坛角色(id,内容)
      local 临时角色=角色处理类.创建()
      我的武神坛=true
      临时角色:创建角色(id,内容.账号,内容.模型,内容.名称,内容.ip,0,我的武神坛)
      临时角色=nil
      发送数据(玩家数据[id].连接id,157)
      发送数据(玩家数据[id].连接id,7,"#Y/武神坛角色创建成功")

end

function 武神坛系统类:进入武神坛(id)
    if 玩家数据[id].队伍~=0 then
        发送数据(玩家数据[id].连接id,7,"#Y/你不可以带着队伍进入武神坛,请先解散队伍！谢谢！")
        return
    end

    local 武神坛id=(id..id)+0
        if f函数.文件是否存在([[data/]]..玩家数据[id].账号..[[/]]..武神坛id.."/角色.txt")==false  and 玩家数据[id].角色.数据.武神坛==nil then
           内容={}
           内容.id=武神坛id
           内容.账号=玩家数据[id].账号
           内容.模型=玩家数据[id].角色.数据.造型
           内容.名称="武神坛-"..玩家数据[id].角色.数据.名称
           内容.ip=玩家数据[id].角色.数据.ip
          self:创建武神坛角色(id,内容)
           上线id = {}
             上线id.其他队员 = {id}
             上线id.子队员 = {武神坛id}
             上线id.选择id=武神坛id

             选择id=武神坛id
           self:更换武神坛角色(id,上线id,选择id)
         else
             上线id = {}
             上线id.其他队员 = {id}
             上线id.子队员 = {武神坛id}
             上线id.选择id=武神坛id

             选择id=武神坛id
           self:更换武神坛角色(id,上线id,选择id)
           end

   end


 function 武神坛系统类:退出武神坛(id,上线id,选择id)
         self:更换武神坛角色(id,上线id,选择id,true)

   end




function 武神坛系统类:角色进入游戏(id,数字id,是否切换,退出)
  数字id=数字id+0
  local 临时角色连接id = 玩家数据[id].连接id+0
  local 临时角色账号 = 玩家数据[id].账号
  local 临时角色ip = 玩家数据[id].ip
  local  临时角色硬盘  = 玩家数据[id].硬盘
   -- if 账号记录 == nil then
   --        return
   --      end
        --账号记录[临时角色账号..数字id]=数字id
        玩家数据[数字id]={}
        玩家数据[数字id].角色=角色处理类:创建()
        玩家数据[数字id].道具=道具处理类:创建()
        玩家数据[数字id].装备=装备处理类:创建(nil,数字id)
        玩家数据[数字id].召唤兽=召唤兽处理类:创建(nil,数字id)
        玩家数据[数字id].助战=助战处理类:创建(数字id)
        玩家数据[数字id].角色:加载数据(临时角色账号,数字id)
        玩家数据[数字id].道具:加载数据(临时角色账号,数字id)
        玩家数据[数字id].召唤兽:加载数据(临时角色账号,数字id)
        玩家数据[数字id].召唤兽仓库 = 召唤兽仓库类:创建()
        玩家数据[数字id].召唤兽仓库:加载数据(临时角色账号,数字id)
        玩家数据[数字id].助战:加载数据(临时角色账号,数字id)
        玩家数据[数字id].连接id=nil
        玩家数据[数字id].账号=临时角色账号
        玩家数据[数字id].队伍=0
        玩家数据[数字id].当前频道=os.time()
        玩家数据[数字id].世界频道=os.time()
        玩家数据[数字id].传闻频道=os.time()
        玩家数据[数字id].遇怪时间=os.time()+取随机数(10,20)
        玩家数据[数字id].战斗=0
        玩家数据[数字id].ip=临时角色ip
        玩家数据[数字id].yp=临时角色硬盘
        玩家数据[数字id].商品列表=0
        玩家数据[数字id].移动数据={}
        玩家数据[数字id].最后事件=""
        玩家数据[数字id].道具操作={}
        玩家数据[数字id].角色.多角色操作 = false
        玩家数据[数字id].子角色操作 =true
        玩家数据[数字id].保存时间=os.time()+math.random(0,60)
        f函数.写配置(程序目录..[[data\]]..临时角色账号..[[\账号信息.txt]],"账号配置","创建ip",临时角色ip)
        local x = tonumber(string.sub(玩家数据[数字id].角色.数据.地图数据.编号,2,6))
          for i=1,#房屋数据 do
            if 房屋数据[i].ID == x then
              发送数据(id,111,房屋数据[i])
            end
          end


        if 玩家数据[数字id].角色.数据.藏宝阁出售 ~= nil then
          常规提示(数字id,"#Y该角色已经被上架藏宝阁,无法进入游戏,可以使用任意角色在XX处使用ID和取回密码取回账号")
          return
        end

         if 银子数据[数字id]==nil then
          银子数据[数字id]={id=数字id,名称=玩家数据[数字id].角色.数据.名称,银子=玩家数据[数字id].角色.数据.银子+玩家数据[数字id].角色.数据.存银,门派=玩家数据[数字id].角色.数据.门派,等级=玩家数据[数字id].角色.数据.等级}
        end
        if 活跃数据[数字id]==nil or 活跃数据==nil then
          活跃数据[数字id]={活跃度=0,领取100活跃=false,领取200活跃=false,领取300活跃=false,领取400活跃=false,领取500活跃=false}
        end

      --发送角色数据
      if 玩家数据[数字id].角色.数据.帮派 ~= "无帮派" and (玩家数据[数字id].角色.数据.帮派数据 == nil or 帮派数据[玩家数据[数字id].角色.数据.帮派数据.编号] == nil or 帮派数据[玩家数据[数字id].角色.数据.帮派数据.编号].成员数据[数字id] == nil) then
        玩家数据[数字id].角色.数据.帮派 = "无帮派"
        玩家数据[数字id].角色.数据.帮派数据 = nil
        发送数据(数字id,7,"#R你已经被逐出了帮派")
      elseif 玩家数据[数字id].角色.数据.帮派 ~= "无帮派" and 玩家数据[数字id].角色.数据.帮派数据 ~= nil and 帮派数据[玩家数据[数字id].角色.数据.帮派数据.编号] ~= nil and 帮派数据[玩家数据[数字id].角色.数据.帮派数据.编号].成员数据[数字id] ~= nil then
        帮派数据[玩家数据[数字id].角色.数据.帮派数据.编号].成员数据[数字id].在线 = true
      end
      for i,v in pairs(玩家数据[数字id].角色.数据.装备) do
        if v ~= nil and 玩家数据[数字id].道具.数据[v] ~= nil and 玩家数据[数字id].道具.数据[v].临时附魔 ~= nil then
          玩家数据[数字id].角色:附魔装备刷新(数字id,v)
        end
      end
    玩家数据[数字id].角色.数据.地图数据.编号=玩家数据[id].角色.数据.地图数据.编号
    玩家数据[数字id].角色.数据.地图数据.x=玩家数据[id].角色.数据.地图数据.x+取随机数(10,50)
    玩家数据[数字id].角色.数据.地图数据.y=玩家数据[id].角色.数据.地图数据.y+取随机数(10,50)

    玩家数据[数字id].角色:刷新任务跟踪()

    地图处理类:加入玩家(数字id,玩家数据[数字id].角色.数据.地图数据.编号,玩家数据[数字id].角色.数据.地图数据.x,玩家数据[数字id].角色.数据.地图数据.y)

    if 是否切换 == nil then
      系统处理类:进入事件(数字id,玩家数据[数字id].连接id)
    end
   -- collectgarbage("collect")
   系统处理类:进入游戏预处理(临时角色连接id,数字id)
   if 退出==nil then
   地图处理类:跳转地图(数字id,1994,440,183)
   发送数据(玩家数据[数字id].连接id,1033)
    else
   发送数据(玩家数据[数字id].连接id,1034)
   end
  end

function 武神坛系统类:更换武神坛角色(id,上线id,选择id,退出)
  for n=1,#上线id.子队员 do
      if 玩家数据[上线id.子队员[n]]~=nil then
        系统处理类:断开游戏(上线id.子队员[n])
      elseif 上线id.子队员[n] == 选择id then
        table.remove(上线id.子队员,n)
      end
  end
   local 连接id = 玩家数据[id].连接id
   local 账号 = 玩家数据[id].账号
   local 硬盘 = 玩家数据[id].硬盘
   local 临时ip = 玩家数据[id].ip

    系统处理类:断开游戏(id)



       -- 账号记录[账号..选择id]=选择id
        玩家数据[选择id]={}
        玩家数据[选择id].角色=角色处理类:创建(连接id)
        玩家数据[选择id].道具=道具处理类:创建(连接id)
        玩家数据[选择id].装备=装备处理类:创建(连接id,选择id)
        玩家数据[选择id].召唤兽=召唤兽处理类:创建(连接id,选择id)
        玩家数据[选择id].助战=助战处理类:创建(选择id)
        玩家数据[选择id].角色:加载数据(账号,选择id)
        玩家数据[选择id].道具:加载数据(账号,选择id)
        玩家数据[选择id].召唤兽:加载数据(账号,选择id)
        玩家数据[选择id].召唤兽仓库 = 召唤兽仓库类:创建()
        玩家数据[选择id].召唤兽仓库:加载数据(账号,选择id)
        玩家数据[选择id].助战:加载数据(账号,选择id)
        玩家数据[选择id].连接id=连接id
        玩家数据[选择id].账号=账号
        玩家数据[选择id].队伍=0
        玩家数据[选择id].当前频道=os.time()
        玩家数据[选择id].世界频道=os.time()
        玩家数据[选择id].传闻频道=os.time()
        玩家数据[选择id].遇怪时间=os.time()+取随机数(10,20)
        玩家数据[选择id].战斗=0
        玩家数据[选择id].ip=临时ip
        玩家数据[选择id].yp=硬盘
        玩家数据[选择id].商品列表=0
        玩家数据[选择id].移动数据={}
        玩家数据[选择id].最后事件=""
        玩家数据[选择id].道具操作={}
        玩家数据[选择id].角色.数据.多角色操作 = false
        玩家数据[选择id].子角色操作 = nil

   if 玩家数据[选择id].角色.数据.累积活跃==nil then
      玩家数据[选择id].角色.数据.累积活跃={当前积分=0,总积分=0}
   end


    发送数据(连接id,5,玩家数据[选择id].角色:取总数据())
    发送数据(连接id,16,玩家数据[选择id].召唤兽.数据)
    发送数据(连接id,102,玩家数据[选择id].助战:取数据())
    发送数据(连接id,1,{id=连接id,用户="正式用户"})
    发送数据(连接id,43,{时辰=时辰信息.当前})
    发送数据(连接id,160)

    地图处理类:加入玩家(选择id,玩家数据[选择id].角色.数据.地图数据.编号,玩家数据[选择id].角色.数据.地图数据.x,玩家数据[选择id].角色.数据.地图数据.y,id)
    玩家数据[选择id].角色:刷新任务跟踪()
    -- local 建队信息 = {}
    -- 建队信息.ip = 临时ip
    -- 建队信息.数字id = 选择id
    -- 建队信息.id = 选择id
    --队伍处理类:创建队伍(选择id,建队信息)
    table.print(上线id)
    for n=1,#上线id.子队员 do
      if 退出==nil then
      self:角色进入游戏(选择id,上线id.子队员[n],1)
    else
      self:角色进入游戏(选择id,上线id.子队员[n],1,true)
    end
      --self:角色加入队伍(选择id,上线id.子队员[n])
    end
    -- for n=1,#上线id.其他队员 do
    --   if 上线id.其他队员[n] == id then
    --     self:角色进入游戏(选择id,上线id.其他队员[n],1)
    --   end
    --   --self:角色加入队伍(选择id,上线id.其他队员[n])
    -- end
  --队伍处理类:索取队伍信息(选择id,4004)
--  玩家数据[选择id].角色.多角色操作 = true
if 退出==nil then
地图处理类:跳转地图(选择id,1994,440,183)
发送数据(玩家数据[选择id].连接id,1033)
else
发送数据(玩家数据[选择id].连接id,1034)
end
end



function 武神坛系统类:更新(dt) end
function 武神坛系统类:显示(x,y) end
return 武神坛系统类